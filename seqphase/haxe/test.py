# Generated by Haxe 3.4.7
# coding: utf-8

import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import random as python_lib_Random
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class Entry:
    _hx_class_name = "Entry"
    __slots__ = ("name", "seq", "line")
    _hx_fields = ["name", "seq", "line"]
    _hx_methods = ["addToSeq", "getName", "getSeq", "getLineNo"]

    def __init__(self,line = -1,name = None,seq = None):
        if (line is None):
            line = -1
        self.line = line
        self.name = name
        self.seq = seq

    def addToSeq(self,s):
        if ((self.seq is None) or ((self.seq == ""))):
            self.seq = s
        else:
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.seq
            _hx_local_0.seq = (("null" if _hx_local_1 is None else _hx_local_1) + ("null" if s is None else s))
            _hx_local_0.seq

    def getName(self):
        return self.name

    def getSeq(self):
        if (self.seq is None):
            return ""
        return self.seq

    def getLineNo(self):
        return self.line



class FastaAlignmentParser:
    _hx_class_name = "FastaAlignmentParser"
    __slots__ = ("fastaContent", "seqLength")
    _hx_fields = ["fastaContent", "seqLength"]
    _hx_methods = ["getSeqLength", "getSequences"]
    _hx_statics = ["authorizedCharacters", "startsWith", "isWhitespace", "stripStringBegin", "stripStringEnd", "stripString"]

    def __init__(self,fileContent,allChecks,fileNr):
        self.seqLength = -1
        if (fileContent is None):
            return
        end = len(fileContent)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(fileContent,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        s = HxString.substring(fileContent,0,end)
        begin = 0
        sLen = len(s)
        while True:
            tmp1 = None
            if (begin < sLen):
                cCode1 = HxString.charCodeAt(s,begin)
                result1 = False
                _g2 = 0
                _g11 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g2 < len(_g11)):
                    ele1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                    _g2 = (_g2 + 1)
                    if (ele1 == cCode1):
                        result1 = True
                        break
                tmp1 = result1
            else:
                tmp1 = False
            if (not tmp1):
                break
            begin = (begin + 1)
        if (HxString.substr(s,begin,None) == ""):
            SeqPhase1Result.instance().addErr("Empty file!",fileNr)
            return
        if ((HxString.substr(fileContent,0,len(">")) != ">") and ((HxString.substr(fileContent,0,len(";")) != ";"))):
            SeqPhase1Result.instance().addErr("File does not seem to be a fasta file!",fileNr)
            return
        lines = fileContent.split("\n")
        if (len(lines) == 0):
            SeqPhase1Result.instance().addErr("Not a fasta but an empty file!",fileNr)
            return
        elif (len(lines) == 1):
            SeqPhase1Result.instance().addErr("Only 1 line detected! Please check data format (opening the alignment in MEGA (http://www.megasoftware.net/) and exporting it as FASTA again may solve the problem; alternatively, there may be a problem with end-of-line characters - see http://en.wikipedia.org/wiki/Newline for details!",fileNr)
            return
        entryMap = haxe_ds_StringMap()
        current = None
        lineNo = 0
        _g3 = 0
        while (_g3 < len(lines)):
            line = (lines[_g3] if _g3 >= 0 and _g3 < len(lines) else None)
            _g3 = (_g3 + 1)
            lineNo = (lineNo + 1)
            end1 = len(line)
            while True:
                line1 = None
                if (end1 > 0):
                    cCode2 = HxString.charCodeAt(line,(end1 - 1))
                    result2 = False
                    _g4 = 0
                    _g12 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g4 < len(_g12)):
                        ele2 = (_g12[_g4] if _g4 >= 0 and _g4 < len(_g12) else None)
                        _g4 = (_g4 + 1)
                        if (ele2 == cCode2):
                            result2 = True
                            break
                    line1 = result2
                else:
                    line1 = False
                if (not line1):
                    break
                end1 = (end1 - 1)
            s1 = HxString.substring(line,0,end1)
            begin1 = 0
            sLen1 = len(s1)
            while True:
                line2 = None
                if (begin1 < sLen1):
                    cCode3 = HxString.charCodeAt(s1,begin1)
                    result3 = False
                    _g5 = 0
                    _g13 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g5 < len(_g13)):
                        ele3 = (_g13[_g5] if _g5 >= 0 and _g5 < len(_g13) else None)
                        _g5 = (_g5 + 1)
                        if (ele3 == cCode3):
                            result3 = True
                            break
                    line2 = result3
                else:
                    line2 = False
                if (not line2):
                    break
                begin1 = (begin1 + 1)
            line = HxString.substr(s1,begin1,None)
            if (HxString.substr(line,0,len(";")) == ";"):
                continue
            elif (HxString.substr(line,0,len(">")) == ">"):
                s2 = HxString.substr(line,1,None)
                end2 = len(s2)
                while True:
                    tmp2 = None
                    if (end2 > 0):
                        cCode4 = HxString.charCodeAt(s2,(end2 - 1))
                        result4 = False
                        _g6 = 0
                        _g14 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                        while (_g6 < len(_g14)):
                            ele4 = (_g14[_g6] if _g6 >= 0 and _g6 < len(_g14) else None)
                            _g6 = (_g6 + 1)
                            if (ele4 == cCode4):
                                result4 = True
                                break
                        tmp2 = result4
                    else:
                        tmp2 = False
                    if (not tmp2):
                        break
                    end2 = (end2 - 1)
                s3 = HxString.substring(s2,0,end2)
                begin2 = 0
                sLen2 = len(s3)
                while True:
                    tmp3 = None
                    if (begin2 < sLen2):
                        cCode5 = HxString.charCodeAt(s3,begin2)
                        result5 = False
                        _g7 = 0
                        _g15 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                        while (_g7 < len(_g15)):
                            ele5 = (_g15[_g7] if _g7 >= 0 and _g7 < len(_g15) else None)
                            _g7 = (_g7 + 1)
                            if (ele5 == cCode5):
                                result5 = True
                                break
                        tmp3 = result5
                    else:
                        tmp3 = False
                    if (not tmp3):
                        break
                    begin2 = (begin2 + 1)
                indName = HxString.substr(s3,begin2,None)
                if (indName in entryMap.h):
                    SeqPhase1Result.instance().addErr((((((("Repeat of name " + ("null" if indName is None else indName)) + " encountered in alignment (line ") + Std.string(lineNo)) + ", line ") + Std.string(entryMap.h.get(indName,None).getLineNo())) + ")"),fileNr)
                current = Entry(lineNo,indName)
                entryMap.h[indName] = current
                if (len(indName) == 0):
                    SeqPhase1Result.instance().addErr(("Missing sequence name, line " + Std.string(lineNo)),fileNr)
            else:
                _g21 = 0
                _g16 = len(line)
                while (_g21 < _g16):
                    i = _g21
                    _g21 = (_g21 + 1)
                    char = ("" if (((i < 0) or ((i >= len(line))))) else line[i])
                    if (not (char in FastaAlignmentParser.authorizedCharacters.h)):
                        SeqPhase1Result.instance().addErr(((((("Unknown character state " + ("null" if char is None else char)) + " in ") + HxOverrides.stringOrNull(current.getName())) + ", line ") + Std.string(lineNo)),fileNr)
                    elif (allChecks and ((FastaAlignmentParser.authorizedCharacters.h.get(char,None) == False))):
                        SeqPhase1Result.instance().addErr(((((("Unallowed state " + ("null" if char is None else char)) + " in ") + HxOverrides.stringOrNull(current.getName())) + ", line ") + Std.string(lineNo)),fileNr)
                _this = line.split("?")
                line = "N".join([python_Boot.toString1(x1,'') for x1 in _this])
                current.addToSeq(line.upper())
        if (current is None):
            SeqPhase1Result.instance().addErr("Corrupted Fasta File",fileNr)
            return
        if (current.getSeq() == ""):
            SeqPhase1Result.instance().addErr(((("Empty sequence " + HxOverrides.stringOrNull(current.getName())) + ", line ") + Std.string(current.getLineNo())),fileNr)
            return
        self.seqLength = len(current.getSeq())
        self.fastaContent = list()
        key = entryMap.keys()
        while key.hasNext():
            key1 = key.next()
            val = entryMap.h.get(key1,None)
            _this1 = self.fastaContent
            _this1.append(val)
            if (len(val.getSeq()) != len(current.getSeq())):
                SeqPhase1Result.instance().addErr(((((((((((("Not all sequences in this file have equal lengths. E.g. sequence " + HxOverrides.stringOrNull(val.getName())) + " (line ") + Std.string(val.getLineNo())) + ") is of length ") + Std.string(len(val.getSeq()))) + " while sequence ") + HxOverrides.stringOrNull(current.getName())) + " (line ") + Std.string(current.getLineNo())) + ") is of length ") + Std.string(len(val.getSeq()))),fileNr)
                return
            if (HxString.substr(val.getSeq(),0,len("-")) == "-"):
                SeqPhase1Result.instance().addWrn((((("Sequence " + HxOverrides.stringOrNull(val.getName())) + " (line ") + Std.string(val.getLineNo())) + ") starts with '-'. Is it a real indel or did you mean 'N' or '?' (missing data)?"),fileNr)
            _this2 = val.getSeq()
            index = (len(val.getSeq()) - 1)
            if ((("" if (((index < 0) or ((index >= len(_this2))))) else _this2[index])) == "-"):
                SeqPhase1Result.instance().addWrn((((("Sequence " + HxOverrides.stringOrNull(val.getName())) + " (line ") + Std.string(val.getLineNo())) + ") ends with '-'. Is it a real indel or did you mean 'N' or '?' (missing data)?"),fileNr)
        def _hx_local_14(e1,e2):
            if allChecks:
                nameE1 = e1.getName()
                nameE2 = e1.getName()
                aNameE1 = HxString.substring(nameE1,0,(len(nameE1) - 1))
                aNameE2 = HxString.substring(nameE2,0,(len(nameE2) - 1))
                if (aNameE1 < aNameE2):
                    return -1
                if (aNameE1 > aNameE2):
                    return 1
                index1 = (len(nameE1) - 1)
                lNameE1 = ("" if (((index1 < 0) or ((index1 >= len(nameE1))))) else nameE1[index1])
                index2 = (len(nameE2) - 1)
                lNameE2 = ("" if (((index2 < 0) or ((index2 >= len(nameE2))))) else nameE2[index2])
                if (lNameE1 < lNameE2):
                    return -1
                if (lNameE1 > lNameE2):
                    return 1
                return 0
            else:
                if (e1.getName() < e2.getName()):
                    return -1
                if (e1.getName() > e2.getName()):
                    return 1
                return 0
        self.fastaContent.sort(key= python_lib_Functools.cmp_to_key(_hx_local_14))
        if allChecks:
            if (HxOverrides.mod(len(self.fastaContent), 2) != 0):
                SeqPhase1Result.instance().addErr("Uneven number of sequences in alignment: please check data.",fileNr)
            lastName = None
            _g8 = 0
            _g17 = self.fastaContent
            while (_g8 < len(_g17)):
                entry = (_g17[_g8] if _g8 >= 0 and _g8 < len(_g17) else None)
                _g8 = (_g8 + 1)
                if (lastName is None):
                    lastName = entry.getName()
                    lastName = HxString.substring(lastName,0,(len(lastName) - 1))
                else:
                    curName = entry.getName()
                    curName = HxString.substring(curName,0,(len(curName) - 1))
                    if (lastName != curName):
                        SeqPhase1Result.instance().addErr(("Only one haplotype sequence found for individual " + HxOverrides.stringOrNull(entry.getName())),fileNr)
                    else:
                        lastName = None

    def getSeqLength(self):
        return self.seqLength

    def getSequences(self):
        return self.fastaContent

    @staticmethod
    def startsWith(t,s):
        return (HxString.substr(t,0,len(s)) == s)

    @staticmethod
    def isWhitespace(s,pos):
        cCode = HxString.charCodeAt(s,pos)
        result = False
        _g = 0
        _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
        while (_g < len(_g1)):
            ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (ele == cCode):
                result = True
                break
        return result

    @staticmethod
    def stripStringBegin(s):
        begin = 0
        sLen = len(s)
        while True:
            tmp = None
            if (begin < sLen):
                cCode = HxString.charCodeAt(s,begin)
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            begin = (begin + 1)
        return HxString.substr(s,begin,None)

    @staticmethod
    def stripStringEnd(s):
        end = len(s)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(s,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        return HxString.substring(s,0,end)

    @staticmethod
    def stripString(s):
        end = len(s)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(s,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        s1 = HxString.substring(s,0,end)
        begin = 0
        sLen = len(s1)
        while True:
            tmp1 = None
            if (begin < sLen):
                cCode1 = HxString.charCodeAt(s1,begin)
                result1 = False
                _g2 = 0
                _g11 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g2 < len(_g11)):
                    ele1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                    _g2 = (_g2 + 1)
                    if (ele1 == cCode1):
                        result1 = True
                        break
                tmp1 = result1
            else:
                tmp1 = False
            if (not tmp1):
                break
            begin = (begin + 1)
        return HxString.substr(s1,begin,None)



class List:
    _hx_class_name = "List"
    __slots__ = ("h", "q", "length")
    _hx_fields = ["h", "q", "length"]
    _hx_methods = ["add", "join"]

    def __init__(self):
        self.q = None
        self.h = None
        self.length = 0

    def add(self,item):
        x = _List_ListNode(item,None)
        if (self.h is None):
            self.h = x
        else:
            self.q.next = x
        self.q = x
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 + 1)
        _hx_local_1

    def join(self,sep):
        s_b = python_lib_io_StringIO()
        first = True
        l = self.h
        while (l is not None):
            if first:
                first = False
            else:
                s_b.write(Std.string(sep))
            s_b.write(Std.string(l.item))
            l = l.next
        return s_b.getvalue()



class _List_ListNode:
    _hx_class_name = "_List.ListNode"
    __slots__ = ("item", "next")
    _hx_fields = ["item", "next"]

    def __init__(self,item,next):
        self.item = item
        self.next = next



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)


class SeqPhase1:
    _hx_class_name = "SeqPhase1"
    __slots__ = ()
    _hx_statics = ["map1", "map2", "doIt", "main"]

    @staticmethod
    def doIt(align1,align2,align3):
        SeqPhase1Result.instance().clear()
        al1 = FastaAlignmentParser(align1,False,1)
        al2 = FastaAlignmentParser(align2,True,2)
        al3 = FastaAlignmentParser(align3,True,3)
        expectedLength = (al1.getSeqLength() if ((al1.getSeqLength() > al2.getSeqLength())) else al2.getSeqLength())
        if (expectedLength > al3.getSeqLength()):
            expectedLength = expectedLength
        else:
            expectedLength = al3.getSeqLength()
        diffLength = False
        if ((al1.getSeqLength() != -1) and ((al1.getSeqLength() != expectedLength))):
            diffLength = True
        if ((al2.getSeqLength() != -1) and ((al2.getSeqLength() != expectedLength))):
            diffLength = True
        if ((al3.getSeqLength() != -1) and ((al3.getSeqLength() != expectedLength))):
            diffLength = True
        if diffLength:
            SeqPhase1Result.instance().addGeneralError("Not all input sequences have equal lengths, please check whether this is expected.")
        elif ((expectedLength == -1) or ((expectedLength == 0))):
            SeqPhase1Result.instance().addGeneralError("It seems that all given sequences are empty ...")
        if SeqPhase1Result.instance().hasErrors():
            return SeqPhase1Result.instance()
        al1a = List()
        al1b = List()
        _g = 0
        _g1 = al1.getSequences()
        while (_g < len(_g1)):
            entry = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            seq1a = List()
            seq1b = List()
            _g3 = 0
            _g2 = len(entry.getSeq())
            while (_g3 < _g2):
                i = _g3
                _g3 = (_g3 + 1)
                _this = entry.getSeq()
                c = ("" if (((i < 0) or ((i >= len(_this))))) else _this[i])
                if (c in SeqPhase1.map1.h):
                    seq1a.add(SeqPhase1.map1.h.get(c,None))
                    seq1b.add(SeqPhase1.map2.h.get(c,None))
                else:
                    seq1a.add(c)
                    seq1b.add(c)
            al1a.add(Entry(entry.getLineNo(),entry.getName(),seq1a.join("")))
            al1b.add(Entry(entry.getLineNo(),entry.getName(),seq1b.join("")))
        varpos = List()
        multipos = List()
        constFileContent = List()
        _g11 = 0
        _g4 = expectedLength
        while (_g11 < _g4):
            i1 = _g11
            _g11 = (_g11 + 1)
            m = haxe_ds_StringMap()
            _g2_head = al1a.h
            while (_g2_head is not None):
                val = _g2_head.item
                _g2_head = _g2_head.next
                entry1 = val
                _this1 = entry1.getSeq()
                key = ("" if (((i1 < 0) or ((i1 >= len(_this1))))) else _this1[i1])
                m.h[key] = False
            _g2_head1 = al1b.h
            while (_g2_head1 is not None):
                val1 = _g2_head1.item
                _g2_head1 = _g2_head1.next
                entry2 = val1
                _this2 = entry2.getSeq()
                key1 = ("" if (((i1 < 0) or ((i1 >= len(_this2))))) else _this2[i1])
                m.h[key1] = False
            _g21 = 0
            _g31 = al2.getSequences()
            while (_g21 < len(_g31)):
                entry3 = (_g31[_g21] if _g21 >= 0 and _g21 < len(_g31) else None)
                _g21 = (_g21 + 1)
                _this3 = entry3.getSeq()
                key2 = ("" if (((i1 < 0) or ((i1 >= len(_this3))))) else _this3[i1])
                m.h[key2] = False
            _g22 = 0
            _g32 = al3.getSequences()
            while (_g22 < len(_g32)):
                entry4 = (_g32[_g22] if _g22 >= 0 and _g22 < len(_g32) else None)
                _g22 = (_g22 + 1)
                _this4 = entry4.getSeq()
                key3 = ("" if (((i1 < 0) or ((i1 >= len(_this4))))) else _this4[i1])
                m.h[key3] = False
            mapLen = 0
            lastKey = None
            key4 = m.keys()
            while key4.hasNext():
                key5 = key4.next()
                lastKey = key5
                mapLen = (mapLen + 1)
            if (mapLen != 0):
                if (mapLen == 1):
                    if (lastKey == "N"):
                        SeqPhase1Result.instance().addGeneralWarn(("Only N/? 's found at position " + Std.string(((i1 + 1)))))
                    constFileContent.add(lastKey)
                elif (mapLen > 2):
                    constFileContent.add(".")
        return SeqPhase1Result.instance()

    @staticmethod
    def main():
        pass


class SeqPhase1Result:
    _hx_class_name = "SeqPhase1Result"
    __slots__ = ("errorsAlign1", "warningsAlign1", "errorsAlign2", "warningsAlign2", "errorsAlign3", "warningsAlign3", "errorsGeneral", "warningsGeneral", "notes", "suggestedPhaseCommand", "varPos", "nbVarPos", "inpFile", "knownFile", "constFile")
    _hx_fields = ["errorsAlign1", "warningsAlign1", "errorsAlign2", "warningsAlign2", "errorsAlign3", "warningsAlign3", "errorsGeneral", "warningsGeneral", "notes", "suggestedPhaseCommand", "varPos", "nbVarPos", "inpFile", "knownFile", "constFile"]
    _hx_methods = ["clear", "addErr", "addWrn", "addAlign1Error", "hasAlign1Errors", "getAlign1Errors", "addAlign1Warn", "hasAlign1Warn", "getAlign1Warn", "addAlign2Error", "hasAlign2Errors", "getAlign2Errors", "addAlign2Warn", "hasAlign2Warn", "getAlign2Warn", "addAlign3Error", "hasAlign3Errors", "getAlign3Errors", "addAlign3Warn", "hasAlign3Warn", "getAlign3Warn", "addGeneralError", "hasGeneralErrors", "getGeneralErrors", "addGeneralWarn", "hasGeneralWarn", "getGeneralWarn", "hasErrors", "addNote", "hasNotes", "getNotes", "setSuggestedPhaseCommand", "hasSuggestedCommand", "getSuggestedPhaseCommand", "setNrVarPos", "getNrVarPos", "setNrNbVarPos", "getNrNbVarPos", "setInpFile", "hasInpFile", "getInpFile", "setKnownFile", "hasKnownFile", "getKnownFile", "setConstFile", "hasConstFile", "getConstFile"]
    _hx_statics = ["inst", "instance"]

    def __init__(self):
        self.constFile = None
        self.knownFile = None
        self.inpFile = None
        self.nbVarPos = None
        self.varPos = None
        self.suggestedPhaseCommand = None
        self.notes = None
        self.warningsGeneral = None
        self.errorsGeneral = None
        self.warningsAlign3 = None
        self.errorsAlign3 = None
        self.warningsAlign2 = None
        self.errorsAlign2 = None
        self.warningsAlign1 = None
        self.errorsAlign1 = None
        self.clear()

    def clear(self):
        self.errorsAlign1 = List()
        self.warningsAlign1 = List()
        self.errorsAlign2 = List()
        self.warningsAlign2 = List()
        self.errorsAlign3 = List()
        self.warningsAlign3 = List()
        self.errorsGeneral = List()
        self.warningsGeneral = List()
        self.notes = List()
        self.suggestedPhaseCommand = None
        self.varPos = None
        self.nbVarPos = None
        self.inpFile = None
        self.knownFile = None
        self.constFile = None

    def addErr(self,err,nr):
        if (nr == 1):
            self.addAlign1Error(err)
        elif (nr == 2):
            self.addAlign2Error(err)
        elif (nr == 3):
            self.addAlign3Error(err)
        else:
            raise _HxException(("Illegal nr " + Std.string(nr)))

    def addWrn(self,wrn,nr):
        if (nr == 1):
            self.addAlign1Warn(wrn)
        elif (nr == 2):
            self.addAlign2Warn(wrn)
        elif (nr == 3):
            self.addAlign3Warn(wrn)
        else:
            raise _HxException(("Illegal nr " + Std.string(nr)))

    def addAlign1Error(self,err):
        self.errorsAlign1.add(err)

    def hasAlign1Errors(self):
        return (self.errorsAlign1.length != 0)

    def getAlign1Errors(self):
        this1 = [None]*self.errorsAlign1.length
        result = this1
        i = 0
        _g_head = self.errorsAlign1.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addAlign1Warn(self,wrn):
        self.warningsAlign1.add(wrn)

    def hasAlign1Warn(self):
        return (self.warningsAlign1.length != 0)

    def getAlign1Warn(self):
        this1 = [None]*self.warningsAlign1.length
        result = this1
        i = 0
        _g_head = self.warningsAlign1.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addAlign2Error(self,err):
        self.errorsAlign2.add(err)

    def hasAlign2Errors(self):
        return (self.errorsAlign2.length != 0)

    def getAlign2Errors(self):
        this1 = [None]*self.errorsAlign2.length
        result = this1
        i = 0
        _g_head = self.errorsAlign2.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addAlign2Warn(self,wrn):
        self.warningsAlign2.add(wrn)

    def hasAlign2Warn(self):
        return (self.warningsAlign2.length != 0)

    def getAlign2Warn(self):
        this1 = [None]*self.warningsAlign2.length
        result = this1
        i = 0
        _g_head = self.warningsAlign2.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addAlign3Error(self,err):
        self.errorsAlign3.add(err)

    def hasAlign3Errors(self):
        return (self.errorsAlign3.length != 0)

    def getAlign3Errors(self):
        this1 = [None]*self.errorsAlign3.length
        result = this1
        i = 0
        _g_head = self.errorsAlign3.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addAlign3Warn(self,wrn):
        self.warningsAlign3.add(wrn)

    def hasAlign3Warn(self):
        return (self.warningsAlign3.length != 0)

    def getAlign3Warn(self):
        this1 = [None]*self.warningsAlign3.length
        result = this1
        i = 0
        _g_head = self.warningsAlign3.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addGeneralError(self,err):
        self.errorsGeneral.add(err)

    def hasGeneralErrors(self):
        return (self.errorsGeneral.length != 0)

    def getGeneralErrors(self):
        this1 = [None]*self.errorsGeneral.length
        result = this1
        i = 0
        _g_head = self.errorsGeneral.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def addGeneralWarn(self,wrn):
        self.warningsGeneral.add(wrn)

    def hasGeneralWarn(self):
        return (self.warningsGeneral.length != 0)

    def getGeneralWarn(self):
        this1 = [None]*self.warningsGeneral.length
        result = this1
        i = 0
        _g_head = self.warningsGeneral.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def hasErrors(self):
        if (not ((((self.errorsAlign1.length > 0) or ((self.errorsAlign2.length > 0))) or ((self.errorsAlign3.length > 0))))):
            return (self.errorsGeneral.length > 0)
        else:
            return True

    def addNote(self,note):
        self.notes.add(note)

    def hasNotes(self):
        return (self.notes.length != 0)

    def getNotes(self):
        this1 = [None]*self.notes.length
        result = this1
        i = 0
        _g_head = self.notes.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            item = val
            index = i
            i = (i + 1)
            result[index] = item
        return result

    def setSuggestedPhaseCommand(self,ph):
        self.suggestedPhaseCommand = ph

    def hasSuggestedCommand(self):
        return (self.suggestedPhaseCommand is not None)

    def getSuggestedPhaseCommand(self):
        return self.suggestedPhaseCommand

    def setNrVarPos(self,nr):
        self.varPos = nr

    def getNrVarPos(self):
        return self.varPos

    def setNrNbVarPos(self,nr):
        self.nbVarPos = nr

    def getNrNbVarPos(self):
        return self.nbVarPos

    def setInpFile(self,content):
        self.inpFile = content

    def hasInpFile(self):
        return (self.inpFile is not None)

    def getInpFile(self):
        return self.inpFile

    def setKnownFile(self,content):
        self.knownFile = content

    def hasKnownFile(self):
        return (self.knownFile is not None)

    def getKnownFile(self):
        return self.knownFile

    def setConstFile(self,content):
        self.constFile = content

    def hasConstFile(self):
        return (self.constFile is not None)

    def getConstFile(self):
        return self.constFile
    inst = None

    @staticmethod
    def instance():
        if (SeqPhase1Result.inst is None):
            SeqPhase1Result.inst = SeqPhase1Result()
        return SeqPhase1Result.inst



class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["keys"]

    def __init__(self):
        self.h = dict()

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        field1 = field
        _hx_local_0 = len(field1)
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        return float('nan') if (b == 0.0) else a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mod(a,b):
        return a % b if a >= 0 else -(-a % b)


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

def _hx_init_FastaAlignmentParser_authorizedCharacters():
    def _hx_local_0():
        _g = haxe_ds_StringMap()
        _g.h["A"] = True
        _g.h["T"] = True
        _g.h["G"] = True
        _g.h["C"] = True
        _g.h["N"] = True
        _g.h["-"] = True
        _g.h["?"] = True
        _g.h["R"] = False
        _g.h["Y"] = False
        _g.h["M"] = False
        _g.h["K"] = False
        _g.h["W"] = False
        _g.h["S"] = False
        return _g
    return _hx_local_0()
FastaAlignmentParser.authorizedCharacters = _hx_init_FastaAlignmentParser_authorizedCharacters()
def _hx_init_SeqPhase1_map1():
    def _hx_local_0():
        _g = haxe_ds_StringMap()
        _g.h["W"] = "A"
        _g.h["S"] = "C"
        _g.h["K"] = "T"
        _g.h["M"] = "A"
        _g.h["Y"] = "C"
        _g.h["R"] = "A"
        return _g
    return _hx_local_0()
SeqPhase1.map1 = _hx_init_SeqPhase1_map1()
def _hx_init_SeqPhase1_map2():
    def _hx_local_0():
        _g = haxe_ds_StringMap()
        _g.h["W"] = "T"
        _g.h["S"] = "G"
        _g.h["K"] = "G"
        _g.h["M"] = "C"
        _g.h["Y"] = "T"
        _g.h["R"] = "G"
        return _g
    return _hx_local_0()
SeqPhase1.map2 = _hx_init_SeqPhase1_map2()
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

SeqPhase1.main()