# Generated by Haxe 3.4.7
# coding: utf-8

import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import os as python_lib_Os
import builtins as python_lib_Builtins
import functools as python_lib_Functools
try:
    import msvcrt as python_lib_Msvcrt
except:
    pass
import random as python_lib_Random
import subprocess as python_lib_Subprocess
import sys as python_lib_Sys
try:
    import termios as python_lib_Termios
except:
    pass
import time as python_lib_Time
import timeit as python_lib_Timeit
try:
    import tty as python_lib_Tty
except:
    pass
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class EnumValue:
    _hx_class_name = "EnumValue"


class List:
    _hx_class_name = "List"
    __slots__ = ("h", "q", "length")
    _hx_fields = ["h", "q", "length"]
    _hx_methods = ["add", "first", "last", "pop", "isEmpty", "clear", "join"]

    def __init__(self):
        self.q = None
        self.h = None
        self.length = 0

    def add(self,item):
        x = _List_ListNode(item,None)
        if (self.h is None):
            self.h = x
        else:
            self.q.next = x
        self.q = x
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 + 1)
        _hx_local_1

    def first(self):
        if (self.h is None):
            return None
        else:
            return self.h.item

    def last(self):
        if (self.q is None):
            return None
        else:
            return self.q.item

    def pop(self):
        if (self.h is None):
            return None
        x = self.h.item
        self.h = self.h.next
        if (self.h is None):
            self.q = None
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 - 1)
        _hx_local_1
        return x

    def isEmpty(self):
        return (self.h is None)

    def clear(self):
        self.h = None
        self.q = None
        self.length = 0

    def join(self,sep):
        s_b = python_lib_io_StringIO()
        first = True
        l = self.h
        while (l is not None):
            if first:
                first = False
            else:
                s_b.write(Std.string(sep))
            s_b.write(Std.string(l.item))
            l = l.next
        return s_b.getvalue()



class _List_ListNode:
    _hx_class_name = "_List.ListNode"
    __slots__ = ("item", "next")
    _hx_fields = ["item", "next"]

    def __init__(self,item,next):
        self.item = item
        self.next = next



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g21 = _g2
                if (((((((((((_g21 == 57) or ((_g21 == 56))) or ((_g21 == 55))) or ((_g21 == 54))) or ((_g21 == 53))) or ((_g21 == 52))) or ((_g21 == 51))) or ((_g21 == 50))) or ((_g21 == 49))) or ((_g21 == 48))) or ((_g21 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["startsWith"]

    @staticmethod
    def startsWith(s,start):
        if (len(s) >= len(start)):
            return (HxString.substr(s,0,len(start)) == start)
        else:
            return False


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["fullPath"]

    @staticmethod
    def fullPath(relPath):
        return python_lib_os_Path.realpath(relPath)


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]

    def __init__(self):
        self.h = dict()



class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["environ", "time", "exit", "print", "println", "args", "getEnv", "putEnv", "environment", "sleep", "setTimeLocale", "getCwd", "setCwd", "systemName", "command", "cpuTime", "executablePath", "_programPath", "programPath", "getChar", "stdin", "stdout", "stderr"]

    @staticmethod
    def time():
        return python_lib_Time.time()

    @staticmethod
    def exit(code):
        python_lib_Sys.exit(code)

    @staticmethod
    def print(v):
        python_Lib.print(v)

    @staticmethod
    def println(v):
        python_Lib.println(v)

    @staticmethod
    def args():
        argv = python_lib_Sys.argv
        return argv[1:None]

    @staticmethod
    def getEnv(s):
        return Sys.environ.h.get(s,None)

    @staticmethod
    def putEnv(s,v):
        python_lib_Os.putenv(s,v)
        Sys.environ.h[s] = v

    @staticmethod
    def environment():
        return Sys.environ

    @staticmethod
    def sleep(seconds):
        python_lib_Time.sleep(seconds)

    @staticmethod
    def setTimeLocale(loc):
        return False

    @staticmethod
    def getCwd():
        return python_lib_Os.getcwd()

    @staticmethod
    def setCwd(s):
        python_lib_Os.chdir(s)

    @staticmethod
    def systemName():
        _g = python_lib_Sys.platform
        x = _g
        if StringTools.startsWith(x,"linux"):
            return "Linux"
        else:
            _g1 = _g
            _hx_local_0 = len(_g1)
            if (_hx_local_0 == 5):
                if (_g1 == "win32"):
                    return "Windows"
                else:
                    raise _HxException("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g1 == "cygwin"):
                    return "Windows"
                elif (_g1 == "darwin"):
                    return "Mac"
                else:
                    raise _HxException("not supported platform")
            else:
                raise _HxException("not supported platform")

    @staticmethod
    def command(cmd,args = None):
        if (args is None):
            return python_lib_Subprocess.call(cmd,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'shell': True})))
        else:
            return python_lib_Subprocess.call(([cmd] + args))

    @staticmethod
    def cpuTime():
        return python_lib_Timeit.default_timer()

    @staticmethod
    def executablePath():
        return python_internal_ArrayImpl._get(python_lib_Sys.argv, 0)

    @staticmethod
    def programPath():
        return Sys._programPath

    @staticmethod
    def getChar(echo):
        ch = None
        _g = Sys.systemName()
        _g1 = _g
        _hx_local_0 = len(_g1)
        if (_hx_local_0 == 5):
            if (_g1 == "Linux"):
                fd = python_lib_Sys.stdin.fileno()
                old = python_lib_Termios.tcgetattr(fd)
                a1 = fd
                a2 = python_lib_Termios.TCSADRAIN
                a3 = old
                def _hx_local_1():
                    python_lib_Termios.tcsetattr(a1,a2,a3)
                restore = _hx_local_1
                try:
                    python_lib_Tty.setraw(fd)
                    x = python_lib_Sys.stdin.read(1)
                    restore()
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    restore()
                    raise _HxException(e)
            else:
                x1 = _g
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        elif (_hx_local_0 == 3):
            if (_g1 == "Mac"):
                fd = python_lib_Sys.stdin.fileno()
                old = python_lib_Termios.tcgetattr(fd)
                a1 = fd
                a2 = python_lib_Termios.TCSADRAIN
                a3 = old
                def _hx_local_2():
                    python_lib_Termios.tcsetattr(a1,a2,a3)
                restore = _hx_local_2
                try:
                    python_lib_Tty.setraw(fd)
                    x = python_lib_Sys.stdin.read(1)
                    restore()
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    restore()
                    raise _HxException(e)
            else:
                x1 = _g
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        elif (_hx_local_0 == 7):
            if (_g1 == "Windows"):
                ch = HxString.charCodeAt(python_lib_Msvcrt.getch().decode("utf-8"),0)
            else:
                x1 = _g
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        else:
            x1 = _g
            raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        if echo:
            python_Lib.print("".join(map(chr,[ch])))
        return ch

    @staticmethod
    def stdin():
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

    @staticmethod
    def stdout():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stdout)

    @staticmethod
    def stderr():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stderr)


class haxe_ds__Vector_Vector_Impl_:
    _hx_class_name = "haxe.ds._Vector.Vector_Impl_"
    __slots__ = ()
    _hx_statics = ["blit"]
    length = None

    @staticmethod
    def blit(src,srcPos,dest,destPos,_hx_len):
        if (src is dest):
            if (srcPos < destPos):
                i = (srcPos + _hx_len)
                j = (destPos + _hx_len)
                _g1 = 0
                _g = _hx_len
                while (_g1 < _g):
                    k = _g1
                    _g1 = (_g1 + 1)
                    i = (i - 1)
                    j = (j - 1)
                    val = src[i]
                    src[j] = val
            elif (srcPos > destPos):
                i1 = srcPos
                j1 = destPos
                _g11 = 0
                _g2 = _hx_len
                while (_g11 < _g2):
                    k1 = _g11
                    _g11 = (_g11 + 1)
                    val1 = src[i1]
                    src[j1] = val1
                    i1 = (i1 + 1)
                    j1 = (j1 + 1)
        else:
            _g12 = 0
            _g3 = _hx_len
            while (_g12 < _g3):
                i2 = _g12
                _g12 = (_g12 + 1)
                val2 = src[(srcPos + i2)]
                dest[(destPos + i2)] = val2


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_statics = ["ofString"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    @staticmethod
    def ofString(s):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)



class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian"]

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b



class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        return "Eof"


class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "set_bigEndian", "writeFullBytes", "writeString"]

    def writeByte(self,c):
        raise _HxException("Not implemented")

    def writeBytes(self,s,pos,_hx_len):
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        b = s.b
        k = _hx_len
        while (k > 0):
            self.writeByte(b[pos])
            pos = (pos + 1)
            k = (k - 1)
        return _hx_len

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def writeFullBytes(self,s,pos,_hx_len):
        while (_hx_len > 0):
            k = self.writeBytes(s,pos,_hx_len)
            pos = (pos + k)
            _hx_len = (_hx_len - k)

    def writeString(self,s):
        b = haxe_io_Bytes.ofString(s)
        self.writeFullBytes(b,0,b.length)



class interfaces_Printer:
    _hx_class_name = "interfaces.Printer"
    __slots__ = ("countingOffset", "newline", "indent")
    _hx_fields = ["countingOffset", "newline", "indent"]
    _hx_methods = ["printString", "close"]

    def __init__(self):
        self.indent = "  "
        self.newline = "\n"
        self.countingOffset = 1


class mj_Connection:
    _hx_class_name = "mj.Connection"
    __slots__ = ("next", "connectedTo", "dist")
    _hx_fields = ["next", "connectedTo", "dist"]

    def __init__(self,conT,dist):
        self.next = None
        self.connectedTo = conT
        self.dist = dist



class mj_Delta:
    _hx_class_name = "mj.Delta"
    __slots__ = ("s1", "s2", "dist")
    _hx_fields = ["s1", "s2", "dist"]

    def __init__(self,s1,s2,dist):
        self.s1 = s1
        self.s2 = s2
        self.dist = dist



class mj_Link:
    _hx_class_name = "mj.Link"
    __slots__ = ("to", "names")
    _hx_fields = ["to", "names"]
    _hx_methods = ["countInd"]

    def __init__(self):
        self.names = None
        self.to = None

    def countInd(self):
        return self.names.length



class mj_MJ:
    _hx_class_name = "mj.MJ"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        myArgs = Sys.args()
        fr = parsing_FastaParser.parseFasta(sys_io_File.getContent((myArgs[0] if 0 < len(myArgs) else None)).upper())
        m_weights = None
        m_seqs = None
        m_seqCount = None
        m_rweights = None
        m_rdeltas = None
        m_nextSpId = None
        m_seqs = mj_Seqs()
        m_rdeltas = List()
        m_seqCount = 0
        m_nextSpId = 0
        _g_head = fr.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            e = val
            m_seqs.addSample(e.first,e.second)
            m_seqCount = (m_seqCount + 1)
        if ((myArgs[1] if 1 < len(myArgs) else None) != "-"):
            _this = (myArgs[1] if 1 < len(myArgs) else None)
            r = _this.split(";")
            this1 = [None]*len(r)
            v = this1
            _g1 = 0
            _g = len(r)
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                val1 = Std.parseFloat((r[i] if i >= 0 and i < len(r) else None))
                v[i] = val1
            m_weights = v
        if (m_seqs.size == 0):
            raise _HxException("Need at least one sequence to run the mj algorithm on ...")
        _this1 = m_seqs
        if (_this1.origSeqLen <= 1):
            raise _HxException("Need at least two sampled sequences!")
        _g11 = 0
        _g2 = _this1.origSeqLen
        while (_g11 < _g2):
            pos = _g11
            _g11 = (_g11 + 1)
            current = _this1.first.next
            while (current is not None):
                _this2 = _this1.first.origSeq
                tmp = ("" if (((pos < 0) or ((pos >= len(_this2))))) else _this2[pos])
                _this3 = current.origSeq
                if (tmp != (("" if (((pos < 0) or ((pos >= len(_this3))))) else _this3[pos]))):
                    _this1.ipos.add(pos)
                    break
                current = current.next
        current1 = _this1.first
        while (current1 is not None):
            ipos = _this1.ipos
            l = List()
            _g_head1 = ipos.h
            while (_g_head1 is not None):
                val2 = _g_head1.item
                _g_head1 = _g_head1.next
                e1 = val2
                _this4 = current1.origSeq
                l.add(("" if (((e1 < 0) or ((e1 >= len(_this4))))) else _this4[e1]))
            current1.redSeq = l.join("")
            s = current1.redSeq
            result = 7
            _g12 = 0
            _g3 = len(s)
            while (_g12 < _g3):
                pos1 = _g12
                _g12 = (_g12 + 1)
                result = ((31 * result) + HxString.charCodeAt(s,pos1))
            current1.hashCode = result
            current1 = current1.next
        this2 = [None]*(len(_this1.hashTable) << 1)
        _this1.hashTable = this2
        c = _this1.first
        while (c is not None):
            c.nextWithHash = None
            c.prevWithHash = None
            hc = c.hashCode
            index = (HxOverrides.mod(hc, len(_this1.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(_this1.hashTable)))
            if (_this1.hashTable[index] is None):
                _this1.hashTable[index] = c
            else:
                c.nextWithHash = _this1.hashTable[index]
                _this1.hashTable[index].prevWithHash = c
                _this1.hashTable[index] = c
            c = c.next
        if (m_weights is None):
            this3 = [None]*m_seqs.ipos.length
            m_rweights = this3
            _g13 = 0
            _g4 = m_seqs.ipos.length
            while (_g13 < _g4):
                i1 = _g13
                _g13 = (_g13 + 1)
                m_rweights[i1] = 1
        else:
            if (len(m_weights) != len(m_seqs.first.origSeq)):
                raise _HxException((((("Expected " + Std.string(len(m_seqs.first.origSeq))) + " weights but got ") + Std.string(len(m_weights))) + " weights!"))
            this4 = [None]*m_seqs.ipos.length
            m_rweights = this4
            iii = 0
            _g_head2 = m_seqs.ipos.h
            while (_g_head2 is not None):
                val3 = _g_head2.item
                _g_head2 = _g_head2.next
                e2 = val3
                index1 = iii
                iii = (iii + 1)
                val4 = m_weights[e2]
                m_rweights[index1] = val4
        epsilon = Std.parseFloat((myArgs[2] if 2 < len(myArgs) else None))
        if (m_seqs.size > 1):
            i2 = None
            while True:
                deltas = List()
                current2 = m_seqs.first
                while (current2 is not None):
                    current21 = current2.next
                    while (current21 is not None):
                        s1 = current2.redSeq
                        s2 = current21.redSeq
                        result1 = 0.0
                        _g14 = 0
                        _g5 = len(s1)
                        while (_g14 < _g5):
                            pos2 = _g14
                            _g14 = (_g14 + 1)
                            if ((("" if (((pos2 < 0) or ((pos2 >= len(s1))))) else s1[pos2])) != (("" if (((pos2 < 0) or ((pos2 >= len(s2))))) else s2[pos2]))):
                                result1 = (result1 + m_rweights[pos2])
                        d = mj_Delta(current2,current21,result1)
                        deltas.add(d)
                        current21 = current21.next
                    current2 = current2.next
                sortedLists = List()
                _g_head3 = deltas.h
                while (_g_head3 is not None):
                    val5 = _g_head3.item
                    _g_head3 = _g_head3.next
                    delta = val5
                    if (((sortedLists.last() is not None) and ((sortedLists.last().last() is not None))) and ((sortedLists.last().last().dist <= delta.dist))):
                        sortedLists.last().add(delta)
                    else:
                        newL = List()
                        newL.add(delta)
                        sortedLists.add(newL)
                while (sortedLists.length > 1):
                    l1 = sortedLists.pop()
                    l2 = sortedLists.pop()
                    nL = List()
                    while ((not l1.isEmpty()) and (not l2.isEmpty())):
                        if (l1.first().dist <= l2.first().dist):
                            nL.add(l1.pop())
                        else:
                            nL.add(l2.pop())
                    while (not l1.isEmpty()):
                        nL.add(l1.pop())
                    while (not l2.isEmpty()):
                        nL.add(l2.pop())
                    sortedLists.add(nL)
                deltas = sortedLists.first()
                m_rdeltas.clear()
                lastDeltaValue = -1.0
                c1 = None
                _g_head4 = deltas.h
                while (_g_head4 is not None):
                    val6 = _g_head4.item
                    _g_head4 = _g_head4.next
                    delta1 = val6
                    if (lastDeltaValue != delta1.dist):
                        lastDeltaValue = delta1.dist
                        if (c1 is not None):
                            m_rdeltas.add(c1)
                        c1 = List()
                    c1.add(delta1)
                if (c1 is not None):
                    m_rdeltas.add(c1)
                current3 = m_seqs.first
                while (current3 is not None):
                    current3.nrConnections = 0
                    current3.connectedTo = None
                    current3.visitedId = 0
                    current3 = current3.next
                nextVisitedId = 1
                _g_head5 = m_rdeltas.h
                while (_g_head5 is not None):
                    val7 = _g_head5.item
                    _g_head5 = _g_head5.next
                    deltas1 = val7
                    _g_head6 = deltas1.h
                    while (_g_head6 is not None):
                        val8 = _g_head6.item
                        _g_head6 = _g_head6.next
                        delta2 = val8
                        isConnected = False
                        l3 = List()
                        l3.add(delta2.s1)
                        delta2.s1.visitedId = nextVisitedId
                        while (not l3.isEmpty()):
                            c2 = l3.pop()
                            if (c2 == delta2.s2):
                                isConnected = True
                            p = c2.connectedTo
                            while (p is not None):
                                if ((p.connectedTo.visitedId != nextVisitedId) and ((p.dist < ((delta2.dist - epsilon))))):
                                    l3.add(p.connectedTo)
                                    p.connectedTo.visitedId = nextVisitedId
                                p = p.next
                        nextVisitedId = (nextVisitedId + 1)
                        if (not isConnected):
                            _this5 = delta2.s1
                            c3 = mj_Connection(delta2.s2,delta2.dist)
                            c3.next = _this5.connectedTo
                            _this5.connectedTo = c3
                            _this5.nrConnections = (_this5.nrConnections + 1)
                            _this6 = delta2.s2
                            c4 = mj_Connection(delta2.s1,delta2.dist)
                            c4.next = _this6.connectedTo
                            _this6.connectedTo = c4
                            _this6.nrConnections = (_this6.nrConnections + 1)
                nrRem = 0
                current4 = m_seqs.firstMed
                markDel = List()
                while (current4 is not None):
                    if (current4.nrConnections <= 2):
                        markDel.add(current4)
                        nrRem = (nrRem + 1)
                    current4 = current4.next
                _g_head7 = markDel.h
                while (_g_head7 is not None):
                    val9 = _g_head7.item
                    _g_head7 = _g_head7.next
                    current5 = val9
                    _this7 = m_seqs
                    current5.linkedTo.clear()
                    if (_this7.firstMed == current5):
                        _this7.firstMed = current5.next
                    if (_this7.last == current5):
                        _this7.last = current5.prev
                    hc1 = current5.hashCode
                    index2 = (HxOverrides.mod(hc1, len(_this7.hashTable)) if ((hc1 >= 0)) else HxOverrides.mod(-hc1, len(_this7.hashTable)))
                    if (_this7.hashTable[index2] == current5):
                        val10 = current5.nextWithHash
                        _this7.hashTable[index2] = val10
                    if (current5.next is not None):
                        current5.next.prev = current5.prev
                    if (current5.prev is not None):
                        current5.prev.next = current5.next
                    if (current5.nextWithHash is not None):
                        current5.nextWithHash.prevWithHash = current5.prevWithHash
                    if (current5.prevWithHash is not None):
                        current5.prevWithHash.nextWithHash = current5.nextWithHash
                    _this7.size = (_this7.size - 1)
                    current5.next = None
                    current5.prev = None
                    current5.nextWithHash = None
                    current5.prevWithHash = None
                i2 = nrRem
                if (i2 != 0):
                    if (not ((i2 != 0))):
                        break
                    else:
                        continue
                medLst = List()
                s11 = m_seqs.first
                while (s11 is not None):
                    s2_ = s11.connectedTo
                    while (s2_ is not None):
                        s12 = s11.redSeq
                        s21 = s2_.connectedTo.redSeq
                        result2 = 0.0
                        _g15 = 0
                        _g6 = len(s12)
                        while (_g15 < _g6):
                            pos3 = _g15
                            _g15 = (_g15 + 1)
                            if ((("" if (((pos3 < 0) or ((pos3 >= len(s12))))) else s12[pos3])) != (("" if (((pos3 < 0) or ((pos3 >= len(s21))))) else s21[pos3]))):
                                result2 = (result2 + m_rweights[pos3])
                        c12 = result2
                        s3_ = s2_.next
                        while (s3_ is not None):
                            s13 = s2_.connectedTo.redSeq
                            s22 = s3_.connectedTo.redSeq
                            result3 = 0.0
                            _g16 = 0
                            _g7 = len(s13)
                            while (_g16 < _g7):
                                pos4 = _g16
                                _g16 = (_g16 + 1)
                                if ((("" if (((pos4 < 0) or ((pos4 >= len(s13))))) else s13[pos4])) != (("" if (((pos4 < 0) or ((pos4 >= len(s22))))) else s22[pos4]))):
                                    result3 = (result3 + m_rweights[pos4])
                            c23 = result3
                            cDist = (c12 + c23)
                            medLst.add(mj_Median(s11.redSeq,s2_.connectedTo.redSeq,s3_.connectedTo.redSeq,m_rweights,cDist))
                            s3_ = s3_.next
                        s2_ = s2_.next
                    s11 = s11.next
                sortedMeds = List()
                _g_head8 = medLst.h
                while (_g_head8 is not None):
                    val11 = _g_head8.item
                    _g_head8 = _g_head8.next
                    med = val11
                    if (((sortedMeds.last() is not None) and ((sortedMeds.last().last() is not None))) and ((sortedMeds.last().last().dist <= med.dist))):
                        sortedMeds.last().add(med)
                    else:
                        l4 = List()
                        l4.add(med)
                        sortedMeds.add(l4)
                while (sortedMeds.length > 1):
                    l11 = sortedMeds.pop()
                    l21 = sortedMeds.pop()
                    nL1 = List()
                    while ((not l11.isEmpty()) and (not l21.isEmpty())):
                        if (l11.first().dist <= l21.first().dist):
                            nL1.add(l11.pop())
                        else:
                            nL1.add(l21.pop())
                    while (not l11.isEmpty()):
                        nL1.add(l11.pop())
                    while (not l21.isEmpty()):
                        nL1.add(l21.pop())
                    sortedMeds.add(nL1)
                medLst = sortedMeds.pop()
                if (medLst is None):
                    medLst = List()
                nrSeqsAdded = 0
                _hx_lambda = Math.POSITIVE_INFINITY
                _g_head9 = medLst.h
                while (_g_head9 is not None):
                    val12 = _g_head9.item
                    _g_head9 = _g_head9.next
                    med1 = val12
                    if ((med1.makesSense and ((med1.diffPos >= 1))) and ((med1.dist <= ((_hx_lambda + epsilon))))):
                        _g_head10 = med1.constructMedians().h
                        while (_g_head10 is not None):
                            val13 = _g_head10.item
                            _g_head10 = _g_head10.next
                            medV = val13
                            _this8 = m_seqs
                            result4 = False
                            result5 = 7
                            _g17 = 0
                            _g8 = len(medV)
                            while (_g17 < _g8):
                                pos5 = _g17
                                _g17 = (_g17 + 1)
                                result5 = ((31 * result5) + HxString.charCodeAt(medV,pos5))
                            hc2 = result5
                            hc3 = (HxOverrides.mod(hc2, len(_this8.hashTable)) if ((hc2 >= 0)) else HxOverrides.mod(-hc2, len(_this8.hashTable)))
                            s3 = _this8.hashTable[hc3]
                            while (s3 is not None):
                                if (s3.redSeq == medV):
                                    result4 = True
                                    break
                                s3 = s3.nextWithHash
                            if result4:
                                continue
                            b = med1.dist
                            if python_lib_Math.isnan(_hx_lambda):
                                _hx_lambda = _hx_lambda
                            elif python_lib_Math.isnan(b):
                                _hx_lambda = b
                            else:
                                _hx_lambda = min(_hx_lambda,b)
                            _this9 = m_seqs
                            result6 = False
                            result7 = 7
                            _g18 = 0
                            _g9 = len(medV)
                            while (_g18 < _g9):
                                pos6 = _g18
                                _g18 = (_g18 + 1)
                                result7 = ((31 * result7) + HxString.charCodeAt(medV,pos6))
                            hc4 = result7
                            hc5 = (HxOverrides.mod(hc4, len(_this9.hashTable)) if ((hc4 >= 0)) else HxOverrides.mod(-hc4, len(_this9.hashTable)))
                            s4 = _this9.hashTable[hc5]
                            while (s4 is not None):
                                if (s4.redSeq == medV):
                                    result6 = True
                                    break
                                s4 = s4.nextWithHash
                            if (not result6):
                                def _hx_local_10():
                                    _hx_local_9 = _this9.nextSeqId
                                    _this9.nextSeqId = (_this9.nextSeqId + 1)
                                    return _hx_local_9
                                id = _hx_local_10()
                                result8 = mj_Seq()
                                result8.id = id
                                result8.redSeq = medV
                                s5 = result8.redSeq
                                result9 = 7
                                _g19 = 0
                                _g10 = len(s5)
                                while (_g19 < _g10):
                                    pos7 = _g19
                                    _g19 = (_g19 + 1)
                                    result9 = ((31 * result9) + HxString.charCodeAt(s5,pos7))
                                result8.hashCode = result9
                                result8.isSample = False
                                s6 = result8
                                _this9.size = (_this9.size + 1)
                                if ((len(_this9.hashTable) >> 1) < _this9.size):
                                    this5 = [None]*(len(_this9.hashTable) << 1)
                                    _this9.hashTable = this5
                                    c5 = _this9.first
                                    while (c5 is not None):
                                        c5.nextWithHash = None
                                        c5.prevWithHash = None
                                        hc6 = c5.hashCode
                                        index3 = (HxOverrides.mod(hc6, len(_this9.hashTable)) if ((hc6 >= 0)) else HxOverrides.mod(-hc6, len(_this9.hashTable)))
                                        if (_this9.hashTable[index3] is None):
                                            _this9.hashTable[index3] = c5
                                        else:
                                            c5.nextWithHash = _this9.hashTable[index3]
                                            _this9.hashTable[index3].prevWithHash = c5
                                            _this9.hashTable[index3] = c5
                                        c5 = c5.next
                                s6.nextWithHash = None
                                s6.prevWithHash = None
                                hc7 = s6.hashCode
                                index4 = (HxOverrides.mod(hc7, len(_this9.hashTable)) if ((hc7 >= 0)) else HxOverrides.mod(-hc7, len(_this9.hashTable)))
                                if (_this9.hashTable[index4] is None):
                                    _this9.hashTable[index4] = s6
                                else:
                                    s6.nextWithHash = _this9.hashTable[index4]
                                    _this9.hashTable[index4].prevWithHash = s6
                                    _this9.hashTable[index4] = s6
                                if (_this9.first is None):
                                    _this9.first = s6
                                else:
                                    s6.prev = _this9.last
                                    _this9.last.next = s6
                                _this9.last = s6
                                if ((_this9.firstMed is None) and (not s6.isSample)):
                                    _this9.firstMed = s6
                            nrSeqsAdded = (nrSeqsAdded + 1)
                    else:
                        break
                i2 = nrSeqsAdded
                if (not ((i2 != 0))):
                    break
            i3 = None
            while True:
                deltas2 = List()
                current6 = m_seqs.first
                while (current6 is not None):
                    current22 = current6.next
                    while (current22 is not None):
                        s14 = current6.redSeq
                        s23 = current22.redSeq
                        result10 = 0.0
                        _g110 = 0
                        _g20 = len(s14)
                        while (_g110 < _g20):
                            pos8 = _g110
                            _g110 = (_g110 + 1)
                            if ((("" if (((pos8 < 0) or ((pos8 >= len(s14))))) else s14[pos8])) != (("" if (((pos8 < 0) or ((pos8 >= len(s23))))) else s23[pos8]))):
                                result10 = (result10 + m_rweights[pos8])
                        d1 = mj_Delta(current6,current22,result10)
                        deltas2.add(d1)
                        current22 = current22.next
                    current6 = current6.next
                sortedLists1 = List()
                _g_head11 = deltas2.h
                while (_g_head11 is not None):
                    val14 = _g_head11.item
                    _g_head11 = _g_head11.next
                    delta3 = val14
                    if (((sortedLists1.last() is not None) and ((sortedLists1.last().last() is not None))) and ((sortedLists1.last().last().dist <= delta3.dist))):
                        sortedLists1.last().add(delta3)
                    else:
                        newL1 = List()
                        newL1.add(delta3)
                        sortedLists1.add(newL1)
                while (sortedLists1.length > 1):
                    l12 = sortedLists1.pop()
                    l22 = sortedLists1.pop()
                    nL2 = List()
                    while ((not l12.isEmpty()) and (not l22.isEmpty())):
                        if (l12.first().dist <= l22.first().dist):
                            nL2.add(l12.pop())
                        else:
                            nL2.add(l22.pop())
                    while (not l12.isEmpty()):
                        nL2.add(l12.pop())
                    while (not l22.isEmpty()):
                        nL2.add(l22.pop())
                    sortedLists1.add(nL2)
                deltas2 = sortedLists1.first()
                m_rdeltas.clear()
                lastDeltaValue1 = -1.0
                c6 = None
                _g_head12 = deltas2.h
                while (_g_head12 is not None):
                    val15 = _g_head12.item
                    _g_head12 = _g_head12.next
                    delta4 = val15
                    if (lastDeltaValue1 != delta4.dist):
                        lastDeltaValue1 = delta4.dist
                        if (c6 is not None):
                            m_rdeltas.add(c6)
                        c6 = List()
                    c6.add(delta4)
                if (c6 is not None):
                    m_rdeltas.add(c6)
                current7 = m_seqs.first
                while (current7 is not None):
                    current7.nrConnections = 0
                    current7.connectedTo = None
                    current7.visitedId = 0
                    current7 = current7.next
                nextVisitedId1 = 1
                _g_head13 = m_rdeltas.h
                while (_g_head13 is not None):
                    val16 = _g_head13.item
                    _g_head13 = _g_head13.next
                    deltas3 = val16
                    _g_head14 = deltas3.h
                    while (_g_head14 is not None):
                        val17 = _g_head14.item
                        _g_head14 = _g_head14.next
                        delta5 = val17
                        isConnected1 = False
                        l5 = List()
                        l5.add(delta5.s1)
                        delta5.s1.visitedId = nextVisitedId1
                        while (not l5.isEmpty()):
                            c7 = l5.pop()
                            if (c7 == delta5.s2):
                                isConnected1 = True
                            p1 = c7.connectedTo
                            while (p1 is not None):
                                if ((p1.connectedTo.visitedId != nextVisitedId1) and ((p1.dist < delta5.dist))):
                                    l5.add(p1.connectedTo)
                                    p1.connectedTo.visitedId = nextVisitedId1
                                p1 = p1.next
                        nextVisitedId1 = (nextVisitedId1 + 1)
                        if (not isConnected1):
                            _this10 = delta5.s1
                            c8 = mj_Connection(delta5.s2,delta5.dist)
                            c8.next = _this10.connectedTo
                            _this10.connectedTo = c8
                            _this10.nrConnections = (_this10.nrConnections + 1)
                            _this11 = delta5.s2
                            c9 = mj_Connection(delta5.s1,delta5.dist)
                            c9.next = _this11.connectedTo
                            _this11.connectedTo = c9
                            _this11.nrConnections = (_this11.nrConnections + 1)
                nrRem1 = 0
                current8 = m_seqs.firstMed
                markDel1 = List()
                while (current8 is not None):
                    if (current8.nrConnections <= 2):
                        markDel1.add(current8)
                        nrRem1 = (nrRem1 + 1)
                    current8 = current8.next
                _g_head15 = markDel1.h
                while (_g_head15 is not None):
                    val18 = _g_head15.item
                    _g_head15 = _g_head15.next
                    current9 = val18
                    _this12 = m_seqs
                    current9.linkedTo.clear()
                    if (_this12.firstMed == current9):
                        _this12.firstMed = current9.next
                    if (_this12.last == current9):
                        _this12.last = current9.prev
                    hc8 = current9.hashCode
                    index5 = (HxOverrides.mod(hc8, len(_this12.hashTable)) if ((hc8 >= 0)) else HxOverrides.mod(-hc8, len(_this12.hashTable)))
                    if (_this12.hashTable[index5] == current9):
                        val19 = current9.nextWithHash
                        _this12.hashTable[index5] = val19
                    if (current9.next is not None):
                        current9.next.prev = current9.prev
                    if (current9.prev is not None):
                        current9.prev.next = current9.next
                    if (current9.nextWithHash is not None):
                        current9.nextWithHash.prevWithHash = current9.prevWithHash
                    if (current9.prevWithHash is not None):
                        current9.prevWithHash.nextWithHash = current9.nextWithHash
                    _this12.size = (_this12.size - 1)
                    current9.next = None
                    current9.prev = None
                    current9.nextWithHash = None
                    current9.prevWithHash = None
                i3 = nrRem1
                if (not ((i3 != 0))):
                    break
        _hx_list = m_seqs.first
        tmp1 = None
        if (_hx_list is None):
            tmp1 = None
        else:
            insize = 1
            nmerges = None
            psize = 0
            qsize = 0
            p2 = None
            q = None
            e3 = None
            tail = None
            while True:
                p2 = _hx_list
                _hx_list = None
                tail = None
                nmerges = 0
                while (p2 is not None):
                    nmerges = (nmerges + 1)
                    q = p2
                    psize = 0
                    _g111 = 0
                    _g21 = insize
                    while (_g111 < _g21):
                        i4 = _g111
                        _g111 = (_g111 + 1)
                        psize = (psize + 1)
                        q = q.next
                        if (q is None):
                            break
                    qsize = insize
                    while ((psize > 0) or (((qsize > 0) and ((q is not None))))):
                        if (psize == 0):
                            e3 = q
                            q = q.next
                            qsize = (qsize - 1)
                        elif (((qsize == 0) or ((q is None))) or (((q.names.length - p2.names.length) <= 0))):
                            e3 = p2
                            p2 = p2.next
                            psize = (psize - 1)
                        else:
                            e3 = q
                            q = q.next
                            qsize = (qsize - 1)
                        if (tail is not None):
                            tail.next = e3
                        else:
                            _hx_list = e3
                        e3.prev = tail
                        tail = e3
                    p2 = q
                tail.next = None
                if (nmerges <= 1):
                    break
                insize = (insize * 2)
            _hx_list.prev = tail
            tmp1 = _hx_list
        m_seqs.first = tmp1
        count = 0
        current10 = m_seqs.first
        this6 = [None]*len(current10.origSeq)
        v1 = this6
        _g112 = 0
        _g22 = len(current10.origSeq)
        while (_g112 < _g22):
            i5 = _g112
            _g112 = (_g112 + 1)
            _this13 = current10.origSeq
            val20 = ("" if (((i5 < 0) or ((i5 >= len(_this13))))) else _this13[i5])
            v1[i5] = val20
        while (current10 is not None):
            def _hx_local_26():
                nonlocal count
                count = (count + 1)
                return count
            current10.id = _hx_local_26()
            if (not current10.isSample):
                i6 = 0
                _g_head16 = m_seqs.ipos.h
                while (_g_head16 is not None):
                    val21 = _g_head16.item
                    _g_head16 = _g_head16.next
                    pos9 = val21
                    _this14 = current10.redSeq
                    index6 = i6
                    i6 = (i6 + 1)
                    val22 = ("" if (((index6 < 0) or ((index6 >= len(_this14))))) else _this14[index6])
                    v1[pos9] = val22
                b_b = python_lib_io_StringIO()
                i7 = 0
                _hx_len = len(v1)
                _g113 = 0
                _g23 = _hx_len
                while (_g113 < _g23):
                    i8 = _g113
                    _g113 = (_g113 + 1)
                    b_b.write(Std.string(Std.string(v1[i8])))
                    if (i8 < ((_hx_len - 1))):
                        b_b.write("")
                current10.origSeq = b_b.getvalue()
            current23 = current10.next
            while ((current23 is not None) and current23.isSample):
                o = current23.indNames
                result11 = List()
                _g_head17 = o.h
                while (_g_head17 is not None):
                    val23 = _g_head17.item
                    _g_head17 = _g_head17.next
                    e4 = val23
                    result12 = False
                    _g_head18 = current10.indNames.h
                    while (_g_head18 is not None):
                        val24 = _g_head18.item
                        _g_head18 = _g_head18.next
                        indName = val24
                        if (indName == e4):
                            result12 = True
                            break
                    if result12:
                        result11.add(e4)
                l6 = result11
                if ((l6 is not None) and (not l6.isEmpty())):
                    l7 = mj_Link()
                    l7.to = current23
                    l7.names = l6
                    current10.linkedTo.add(l7)
                if ((l6 is not None) and (not l6.isEmpty())):
                    l8 = mj_Link()
                    l8.to = current10
                    l8.names = l6
                    current23.linkedTo.add(l8)
                current23 = current23.next
            current10 = current10.next
        l9 = List()
        current10 = m_seqs.first
        while ((current10 is not None) and current10.isSample):
            if (current10.spId == 0):
                def _hx_local_28():
                    nonlocal m_nextSpId
                    m_nextSpId = (m_nextSpId + 1)
                    return m_nextSpId
                current10.spId = _hx_local_28()
                l9.clear()
                l9.add(current10)
                while (not l9.isEmpty()):
                    c10 = l9.pop()
                    _g_head19 = c10.linkedTo.h
                    while (_g_head19 is not None):
                        val25 = _g_head19.item
                        _g_head19 = _g_head19.next
                        n = val25
                        n1 = n.to
                        if (n1.spId == 0):
                            n1.spId = m_nextSpId
                            l9.add(n1)
                        elif (n1.spId != m_nextSpId):
                            raise _HxException("Something somewhere went terribly wrong (#1)!")
            current10 = current10.next
        printer = util_StdOutPrinter()
        printer.printString("#Calculated via HaplowebMaker version ")
        printer.printString(mj_MJAlgo.version)
        printer.printString(printer.newline)
        c11 = m_seqs.first
        while (c11 is not None):
            printer.printString(("SAMPLED_SEQUENCE" if (c11.isSample) else "MEDIAN_VECTOR"))
            printer.printString(printer.newline)
            printer.printString(printer.indent)
            printer.printString("ID ")
            printer.printString(("" + Std.string(c11.id)))
            printer.printString(printer.newline)
            if c11.isSample:
                printer.printString(printer.indent)
                printer.printString("FFR_ID ")
                printer.printString(("" + Std.string(c11.spId)))
                printer.printString(printer.newline)
            printer.printString(printer.indent)
            printer.printString("SEQUENCE ")
            printer.printString(("" + HxOverrides.stringOrNull(c11.origSeq)))
            printer.printString(printer.newline)
            if ((c11.names is not None) and ((c11.names.length > 0))):
                printer.printString(printer.indent)
                printer.printString("NB_NAMES ")
                printer.printString(("" + Std.string(c11.names.length)))
                printer.printString(printer.newline)
                printer.printString(printer.indent)
                printer.printString("NAMES")
                printer.printString(printer.newline)
                _g_head20 = c11.names.h
                while (_g_head20 is not None):
                    val26 = _g_head20.item
                    _g_head20 = _g_head20.next
                    name = val26
                    printer.printString(printer.indent)
                    printer.printString(printer.indent)
                    printer.printString(name)
                    printer.printString(printer.newline)
            if ((c11.connectedTo is not None) and ((c11.nrConnections > 0))):
                printer.printString(printer.indent)
                printer.printString("CONNECTED_TO ")
                printer.printString(printer.newline)
                con = c11.connectedTo
                while (con is not None):
                    printer.printString(printer.indent)
                    printer.printString(printer.indent)
                    printer.printString(("ID " + Std.string(con.connectedTo.id)))
                    printer.printString(((" COSTS " + Std.string(con.dist)) + " @"))
                    _g114 = 0
                    _g24 = len(c11.origSeq)
                    while (_g114 < _g24):
                        pos10 = _g114
                        _g114 = (_g114 + 1)
                        _this15 = c11.origSeq
                        tmp2 = ("" if (((pos10 < 0) or ((pos10 >= len(_this15))))) else _this15[pos10])
                        _this16 = con.connectedTo.origSeq
                        if (tmp2 != (("" if (((pos10 < 0) or ((pos10 >= len(_this16))))) else _this16[pos10]))):
                            printer.printString((" " + Std.string(((pos10 + printer.countingOffset)))))
                    printer.printString(printer.newline)
                    con = con.next
            if ((c11.linkedTo is not None) and ((c11.linkedTo.length > 0))):
                printer.printString(printer.indent)
                printer.printString("LINKED_TO ")
                printer.printString(printer.newline)
                _g_head21 = c11.linkedTo.h
                while (_g_head21 is not None):
                    val27 = _g_head21.item
                    _g_head21 = _g_head21.next
                    link = val27
                    printer.printString(printer.indent)
                    printer.printString(printer.indent)
                    printer.printString(((("ID " + Std.string(link.to.id)) + " COUNT ") + Std.string(link.names.length)))
                    printer.printString(printer.newline)
            c11 = c11.next
        printer.close()


class mj_MJAlgo:
    _hx_class_name = "mj.MJAlgo"
    __slots__ = ("seqs", "weights", "rweights", "rdeltas", "seqCount", "nextSpId")
    _hx_fields = ["seqs", "weights", "rweights", "rdeltas", "seqCount", "nextSpId"]
    _hx_methods = ["distStr", "addSequence", "finishedAddingSequences", "runMJ", "step1", "step2", "step3", "step4", "step5", "finalizeNetwork", "getNrSeqs", "getNrDifSeqs", "getSeqLength", "getNrInterestingPositions", "getNrFFRs", "countIndiv"]
    _hx_statics = ["version", "main"]

    def __init__(self):
        self.rweights = None
        self.weights = None
        self.seqs = mj_Seqs()
        self.rdeltas = List()
        self.seqCount = 0
        self.nextSpId = 0

    def distStr(self,s1,s2):
        result = 0.0
        _g1 = 0
        _g = len(s1)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            if ((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) != (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))):
                result = (result + self.rweights[pos])
        return result

    def addSequence(self,name,seq):
        self.seqs.addSample(name,seq)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.seqCount
        _hx_local_0.seqCount = (_hx_local_1 + 1)
        _hx_local_1

    def finishedAddingSequences(self):
        if (self.seqs.size == 0):
            raise _HxException("Need at least one sequence to run the mj algorithm on ...")
        _this = self.seqs
        if (_this.origSeqLen <= 1):
            raise _HxException("Need at least two sampled sequences!")
        _g1 = 0
        _g = _this.origSeqLen
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            current = _this.first.next
            while (current is not None):
                _this1 = _this.first.origSeq
                tmp = ("" if (((pos < 0) or ((pos >= len(_this1))))) else _this1[pos])
                _this2 = current.origSeq
                if (tmp != (("" if (((pos < 0) or ((pos >= len(_this2))))) else _this2[pos]))):
                    _this.ipos.add(pos)
                    break
                current = current.next
        current1 = _this.first
        while (current1 is not None):
            ipos = _this.ipos
            l = List()
            _g_head = ipos.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                e = val
                _this3 = current1.origSeq
                l.add(("" if (((e < 0) or ((e >= len(_this3))))) else _this3[e]))
            current1.redSeq = l.join("")
            s = current1.redSeq
            result = 7
            _g11 = 0
            _g2 = len(s)
            while (_g11 < _g2):
                pos1 = _g11
                _g11 = (_g11 + 1)
                result = ((31 * result) + HxString.charCodeAt(s,pos1))
            current1.hashCode = result
            current1 = current1.next
        this1 = [None]*(len(_this.hashTable) << 1)
        _this.hashTable = this1
        c = _this.first
        while (c is not None):
            c.nextWithHash = None
            c.prevWithHash = None
            hc = c.hashCode
            index = (HxOverrides.mod(hc, len(_this.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(_this.hashTable)))
            if (_this.hashTable[index] is None):
                _this.hashTable[index] = c
            else:
                c.nextWithHash = _this.hashTable[index]
                _this.hashTable[index].prevWithHash = c
                _this.hashTable[index] = c
            c = c.next
        if (self.weights is None):
            this2 = [None]*self.seqs.ipos.length
            self.rweights = this2
            _g12 = 0
            _g3 = self.seqs.ipos.length
            while (_g12 < _g3):
                i = _g12
                _g12 = (_g12 + 1)
                self.rweights[i] = 1
        else:
            if (len(self.weights) != len(self.seqs.first.origSeq)):
                raise _HxException((((("Expected " + Std.string(len(self.seqs.first.origSeq))) + " weights but got ") + Std.string(len(self.weights))) + " weights!"))
            this3 = [None]*self.seqs.ipos.length
            self.rweights = this3
            iii = 0
            _g_head1 = self.seqs.ipos.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                e1 = val1
                this4 = self.rweights
                index1 = iii
                iii = (iii + 1)
                val2 = self.weights[e1]
                this4[index1] = val2

    def runMJ(self,epsilon):
        if (self.seqs.size > 1):
            i = None
            while True:
                deltas = List()
                current = self.seqs.first
                while (current is not None):
                    current2 = current.next
                    while (current2 is not None):
                        s1 = current.redSeq
                        s2 = current2.redSeq
                        result = 0.0
                        _g1 = 0
                        _g = len(s1)
                        while (_g1 < _g):
                            pos = _g1
                            _g1 = (_g1 + 1)
                            if ((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) != (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))):
                                result = (result + self.rweights[pos])
                        d = mj_Delta(current,current2,result)
                        deltas.add(d)
                        current2 = current2.next
                    current = current.next
                sortedLists = List()
                _g_head = deltas.h
                while (_g_head is not None):
                    val = _g_head.item
                    _g_head = _g_head.next
                    delta = val
                    if (((sortedLists.last() is not None) and ((sortedLists.last().last() is not None))) and ((sortedLists.last().last().dist <= delta.dist))):
                        sortedLists.last().add(delta)
                    else:
                        newL = List()
                        newL.add(delta)
                        sortedLists.add(newL)
                while (sortedLists.length > 1):
                    l1 = sortedLists.pop()
                    l2 = sortedLists.pop()
                    nL = List()
                    while ((not l1.isEmpty()) and (not l2.isEmpty())):
                        if (l1.first().dist <= l2.first().dist):
                            nL.add(l1.pop())
                        else:
                            nL.add(l2.pop())
                    while (not l1.isEmpty()):
                        nL.add(l1.pop())
                    while (not l2.isEmpty()):
                        nL.add(l2.pop())
                    sortedLists.add(nL)
                deltas = sortedLists.first()
                self.rdeltas.clear()
                lastDeltaValue = -1.0
                c = None
                _g_head1 = deltas.h
                while (_g_head1 is not None):
                    val1 = _g_head1.item
                    _g_head1 = _g_head1.next
                    delta1 = val1
                    if (lastDeltaValue != delta1.dist):
                        lastDeltaValue = delta1.dist
                        if (c is not None):
                            self.rdeltas.add(c)
                        c = List()
                    c.add(delta1)
                if (c is not None):
                    self.rdeltas.add(c)
                current1 = self.seqs.first
                while (current1 is not None):
                    current1.nrConnections = 0
                    current1.connectedTo = None
                    current1.visitedId = 0
                    current1 = current1.next
                nextVisitedId = 1
                _g_head2 = self.rdeltas.h
                while (_g_head2 is not None):
                    val2 = _g_head2.item
                    _g_head2 = _g_head2.next
                    deltas1 = val2
                    _g_head3 = deltas1.h
                    while (_g_head3 is not None):
                        val3 = _g_head3.item
                        _g_head3 = _g_head3.next
                        delta2 = val3
                        isConnected = False
                        l = List()
                        l.add(delta2.s1)
                        delta2.s1.visitedId = nextVisitedId
                        while (not l.isEmpty()):
                            c1 = l.pop()
                            if (c1 == delta2.s2):
                                isConnected = True
                            p = c1.connectedTo
                            while (p is not None):
                                if ((p.connectedTo.visitedId != nextVisitedId) and ((p.dist < ((delta2.dist - epsilon))))):
                                    l.add(p.connectedTo)
                                    p.connectedTo.visitedId = nextVisitedId
                                p = p.next
                        nextVisitedId = (nextVisitedId + 1)
                        if (not isConnected):
                            _this = delta2.s1
                            c2 = mj_Connection(delta2.s2,delta2.dist)
                            c2.next = _this.connectedTo
                            _this.connectedTo = c2
                            _this.nrConnections = (_this.nrConnections + 1)
                            _this1 = delta2.s2
                            c3 = mj_Connection(delta2.s1,delta2.dist)
                            c3.next = _this1.connectedTo
                            _this1.connectedTo = c3
                            _this1.nrConnections = (_this1.nrConnections + 1)
                nrRem = 0
                current3 = self.seqs.firstMed
                markDel = List()
                while (current3 is not None):
                    if (current3.nrConnections <= 2):
                        markDel.add(current3)
                        nrRem = (nrRem + 1)
                    current3 = current3.next
                _g_head4 = markDel.h
                while (_g_head4 is not None):
                    val4 = _g_head4.item
                    _g_head4 = _g_head4.next
                    current4 = val4
                    _this2 = self.seqs
                    current4.linkedTo.clear()
                    if (_this2.firstMed == current4):
                        _this2.firstMed = current4.next
                    if (_this2.last == current4):
                        _this2.last = current4.prev
                    hc = current4.hashCode
                    index = (HxOverrides.mod(hc, len(_this2.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(_this2.hashTable)))
                    if (_this2.hashTable[index] == current4):
                        val5 = current4.nextWithHash
                        _this2.hashTable[index] = val5
                    if (current4.next is not None):
                        current4.next.prev = current4.prev
                    if (current4.prev is not None):
                        current4.prev.next = current4.next
                    if (current4.nextWithHash is not None):
                        current4.nextWithHash.prevWithHash = current4.prevWithHash
                    if (current4.prevWithHash is not None):
                        current4.prevWithHash.nextWithHash = current4.nextWithHash
                    _this2.size = (_this2.size - 1)
                    current4.next = None
                    current4.prev = None
                    current4.nextWithHash = None
                    current4.prevWithHash = None
                i = nrRem
                if (i != 0):
                    if (not ((i != 0))):
                        break
                    else:
                        continue
                medLst = List()
                s11 = self.seqs.first
                while (s11 is not None):
                    s2_ = s11.connectedTo
                    while (s2_ is not None):
                        s12 = s11.redSeq
                        s21 = s2_.connectedTo.redSeq
                        result1 = 0.0
                        _g11 = 0
                        _g2 = len(s12)
                        while (_g11 < _g2):
                            pos1 = _g11
                            _g11 = (_g11 + 1)
                            if ((("" if (((pos1 < 0) or ((pos1 >= len(s12))))) else s12[pos1])) != (("" if (((pos1 < 0) or ((pos1 >= len(s21))))) else s21[pos1]))):
                                result1 = (result1 + self.rweights[pos1])
                        c12 = result1
                        s3_ = s2_.next
                        while (s3_ is not None):
                            s13 = s2_.connectedTo.redSeq
                            s22 = s3_.connectedTo.redSeq
                            result2 = 0.0
                            _g12 = 0
                            _g3 = len(s13)
                            while (_g12 < _g3):
                                pos2 = _g12
                                _g12 = (_g12 + 1)
                                if ((("" if (((pos2 < 0) or ((pos2 >= len(s13))))) else s13[pos2])) != (("" if (((pos2 < 0) or ((pos2 >= len(s22))))) else s22[pos2]))):
                                    result2 = (result2 + self.rweights[pos2])
                            c23 = result2
                            cDist = (c12 + c23)
                            medLst.add(mj_Median(s11.redSeq,s2_.connectedTo.redSeq,s3_.connectedTo.redSeq,self.rweights,cDist))
                            s3_ = s3_.next
                        s2_ = s2_.next
                    s11 = s11.next
                sortedMeds = List()
                _g_head5 = medLst.h
                while (_g_head5 is not None):
                    val6 = _g_head5.item
                    _g_head5 = _g_head5.next
                    med = val6
                    if (((sortedMeds.last() is not None) and ((sortedMeds.last().last() is not None))) and ((sortedMeds.last().last().dist <= med.dist))):
                        sortedMeds.last().add(med)
                    else:
                        l3 = List()
                        l3.add(med)
                        sortedMeds.add(l3)
                while (sortedMeds.length > 1):
                    l11 = sortedMeds.pop()
                    l21 = sortedMeds.pop()
                    nL1 = List()
                    while ((not l11.isEmpty()) and (not l21.isEmpty())):
                        if (l11.first().dist <= l21.first().dist):
                            nL1.add(l11.pop())
                        else:
                            nL1.add(l21.pop())
                    while (not l11.isEmpty()):
                        nL1.add(l11.pop())
                    while (not l21.isEmpty()):
                        nL1.add(l21.pop())
                    sortedMeds.add(nL1)
                medLst = sortedMeds.pop()
                if (medLst is None):
                    medLst = List()
                nrSeqsAdded = 0
                _hx_lambda = Math.POSITIVE_INFINITY
                _g_head6 = medLst.h
                while (_g_head6 is not None):
                    val7 = _g_head6.item
                    _g_head6 = _g_head6.next
                    med1 = val7
                    if ((med1.makesSense and ((med1.diffPos >= 1))) and ((med1.dist <= ((_hx_lambda + epsilon))))):
                        _g_head7 = med1.constructMedians().h
                        while (_g_head7 is not None):
                            val8 = _g_head7.item
                            _g_head7 = _g_head7.next
                            medV = val8
                            _this3 = self.seqs
                            result3 = False
                            result4 = 7
                            _g13 = 0
                            _g4 = len(medV)
                            while (_g13 < _g4):
                                pos3 = _g13
                                _g13 = (_g13 + 1)
                                result4 = ((31 * result4) + HxString.charCodeAt(medV,pos3))
                            hc1 = result4
                            hc2 = (HxOverrides.mod(hc1, len(_this3.hashTable)) if ((hc1 >= 0)) else HxOverrides.mod(-hc1, len(_this3.hashTable)))
                            s = _this3.hashTable[hc2]
                            while (s is not None):
                                if (s.redSeq == medV):
                                    result3 = True
                                    break
                                s = s.nextWithHash
                            if result3:
                                continue
                            b = med1.dist
                            if python_lib_Math.isnan(_hx_lambda):
                                _hx_lambda = _hx_lambda
                            elif python_lib_Math.isnan(b):
                                _hx_lambda = b
                            else:
                                _hx_lambda = min(_hx_lambda,b)
                            _this4 = self.seqs
                            result5 = False
                            result6 = 7
                            _g14 = 0
                            _g5 = len(medV)
                            while (_g14 < _g5):
                                pos4 = _g14
                                _g14 = (_g14 + 1)
                                result6 = ((31 * result6) + HxString.charCodeAt(medV,pos4))
                            hc3 = result6
                            hc4 = (HxOverrides.mod(hc3, len(_this4.hashTable)) if ((hc3 >= 0)) else HxOverrides.mod(-hc3, len(_this4.hashTable)))
                            s3 = _this4.hashTable[hc4]
                            while (s3 is not None):
                                if (s3.redSeq == medV):
                                    result5 = True
                                    break
                                s3 = s3.nextWithHash
                            if (not result5):
                                def _hx_local_9():
                                    _hx_local_8 = _this4.nextSeqId
                                    _this4.nextSeqId = (_this4.nextSeqId + 1)
                                    return _hx_local_8
                                id = _hx_local_9()
                                result7 = mj_Seq()
                                result7.id = id
                                result7.redSeq = medV
                                s4 = result7.redSeq
                                result8 = 7
                                _g15 = 0
                                _g6 = len(s4)
                                while (_g15 < _g6):
                                    pos5 = _g15
                                    _g15 = (_g15 + 1)
                                    result8 = ((31 * result8) + HxString.charCodeAt(s4,pos5))
                                result7.hashCode = result8
                                result7.isSample = False
                                s5 = result7
                                _this4.size = (_this4.size + 1)
                                if ((len(_this4.hashTable) >> 1) < _this4.size):
                                    this1 = [None]*(len(_this4.hashTable) << 1)
                                    _this4.hashTable = this1
                                    c4 = _this4.first
                                    while (c4 is not None):
                                        c4.nextWithHash = None
                                        c4.prevWithHash = None
                                        hc5 = c4.hashCode
                                        index1 = (HxOverrides.mod(hc5, len(_this4.hashTable)) if ((hc5 >= 0)) else HxOverrides.mod(-hc5, len(_this4.hashTable)))
                                        if (_this4.hashTable[index1] is None):
                                            _this4.hashTable[index1] = c4
                                        else:
                                            c4.nextWithHash = _this4.hashTable[index1]
                                            _this4.hashTable[index1].prevWithHash = c4
                                            _this4.hashTable[index1] = c4
                                        c4 = c4.next
                                s5.nextWithHash = None
                                s5.prevWithHash = None
                                hc6 = s5.hashCode
                                index2 = (HxOverrides.mod(hc6, len(_this4.hashTable)) if ((hc6 >= 0)) else HxOverrides.mod(-hc6, len(_this4.hashTable)))
                                if (_this4.hashTable[index2] is None):
                                    _this4.hashTable[index2] = s5
                                else:
                                    s5.nextWithHash = _this4.hashTable[index2]
                                    _this4.hashTable[index2].prevWithHash = s5
                                    _this4.hashTable[index2] = s5
                                if (_this4.first is None):
                                    _this4.first = s5
                                else:
                                    s5.prev = _this4.last
                                    _this4.last.next = s5
                                _this4.last = s5
                                if ((_this4.firstMed is None) and (not s5.isSample)):
                                    _this4.firstMed = s5
                            nrSeqsAdded = (nrSeqsAdded + 1)
                    else:
                        break
                i = nrSeqsAdded
                if (not ((i != 0))):
                    break
            i1 = None
            while True:
                deltas2 = List()
                current5 = self.seqs.first
                while (current5 is not None):
                    current21 = current5.next
                    while (current21 is not None):
                        s14 = current5.redSeq
                        s23 = current21.redSeq
                        result9 = 0.0
                        _g16 = 0
                        _g7 = len(s14)
                        while (_g16 < _g7):
                            pos6 = _g16
                            _g16 = (_g16 + 1)
                            if ((("" if (((pos6 < 0) or ((pos6 >= len(s14))))) else s14[pos6])) != (("" if (((pos6 < 0) or ((pos6 >= len(s23))))) else s23[pos6]))):
                                result9 = (result9 + self.rweights[pos6])
                        d1 = mj_Delta(current5,current21,result9)
                        deltas2.add(d1)
                        current21 = current21.next
                    current5 = current5.next
                sortedLists1 = List()
                _g_head8 = deltas2.h
                while (_g_head8 is not None):
                    val9 = _g_head8.item
                    _g_head8 = _g_head8.next
                    delta3 = val9
                    if (((sortedLists1.last() is not None) and ((sortedLists1.last().last() is not None))) and ((sortedLists1.last().last().dist <= delta3.dist))):
                        sortedLists1.last().add(delta3)
                    else:
                        newL1 = List()
                        newL1.add(delta3)
                        sortedLists1.add(newL1)
                while (sortedLists1.length > 1):
                    l12 = sortedLists1.pop()
                    l22 = sortedLists1.pop()
                    nL2 = List()
                    while ((not l12.isEmpty()) and (not l22.isEmpty())):
                        if (l12.first().dist <= l22.first().dist):
                            nL2.add(l12.pop())
                        else:
                            nL2.add(l22.pop())
                    while (not l12.isEmpty()):
                        nL2.add(l12.pop())
                    while (not l22.isEmpty()):
                        nL2.add(l22.pop())
                    sortedLists1.add(nL2)
                deltas2 = sortedLists1.first()
                self.rdeltas.clear()
                lastDeltaValue1 = -1.0
                c5 = None
                _g_head9 = deltas2.h
                while (_g_head9 is not None):
                    val10 = _g_head9.item
                    _g_head9 = _g_head9.next
                    delta4 = val10
                    if (lastDeltaValue1 != delta4.dist):
                        lastDeltaValue1 = delta4.dist
                        if (c5 is not None):
                            self.rdeltas.add(c5)
                        c5 = List()
                    c5.add(delta4)
                if (c5 is not None):
                    self.rdeltas.add(c5)
                current6 = self.seqs.first
                while (current6 is not None):
                    current6.nrConnections = 0
                    current6.connectedTo = None
                    current6.visitedId = 0
                    current6 = current6.next
                nextVisitedId1 = 1
                _g_head10 = self.rdeltas.h
                while (_g_head10 is not None):
                    val11 = _g_head10.item
                    _g_head10 = _g_head10.next
                    deltas3 = val11
                    _g_head11 = deltas3.h
                    while (_g_head11 is not None):
                        val12 = _g_head11.item
                        _g_head11 = _g_head11.next
                        delta5 = val12
                        isConnected1 = False
                        l4 = List()
                        l4.add(delta5.s1)
                        delta5.s1.visitedId = nextVisitedId1
                        while (not l4.isEmpty()):
                            c6 = l4.pop()
                            if (c6 == delta5.s2):
                                isConnected1 = True
                            p1 = c6.connectedTo
                            while (p1 is not None):
                                if ((p1.connectedTo.visitedId != nextVisitedId1) and ((p1.dist < delta5.dist))):
                                    l4.add(p1.connectedTo)
                                    p1.connectedTo.visitedId = nextVisitedId1
                                p1 = p1.next
                        nextVisitedId1 = (nextVisitedId1 + 1)
                        if (not isConnected1):
                            _this5 = delta5.s1
                            c7 = mj_Connection(delta5.s2,delta5.dist)
                            c7.next = _this5.connectedTo
                            _this5.connectedTo = c7
                            _this5.nrConnections = (_this5.nrConnections + 1)
                            _this6 = delta5.s2
                            c8 = mj_Connection(delta5.s1,delta5.dist)
                            c8.next = _this6.connectedTo
                            _this6.connectedTo = c8
                            _this6.nrConnections = (_this6.nrConnections + 1)
                nrRem1 = 0
                current7 = self.seqs.firstMed
                markDel1 = List()
                while (current7 is not None):
                    if (current7.nrConnections <= 2):
                        markDel1.add(current7)
                        nrRem1 = (nrRem1 + 1)
                    current7 = current7.next
                _g_head12 = markDel1.h
                while (_g_head12 is not None):
                    val13 = _g_head12.item
                    _g_head12 = _g_head12.next
                    current8 = val13
                    _this7 = self.seqs
                    current8.linkedTo.clear()
                    if (_this7.firstMed == current8):
                        _this7.firstMed = current8.next
                    if (_this7.last == current8):
                        _this7.last = current8.prev
                    hc7 = current8.hashCode
                    index3 = (HxOverrides.mod(hc7, len(_this7.hashTable)) if ((hc7 >= 0)) else HxOverrides.mod(-hc7, len(_this7.hashTable)))
                    if (_this7.hashTable[index3] == current8):
                        val14 = current8.nextWithHash
                        _this7.hashTable[index3] = val14
                    if (current8.next is not None):
                        current8.next.prev = current8.prev
                    if (current8.prev is not None):
                        current8.prev.next = current8.next
                    if (current8.nextWithHash is not None):
                        current8.nextWithHash.prevWithHash = current8.prevWithHash
                    if (current8.prevWithHash is not None):
                        current8.prevWithHash.nextWithHash = current8.nextWithHash
                    _this7.size = (_this7.size - 1)
                    current8.next = None
                    current8.prev = None
                    current8.nextWithHash = None
                    current8.prevWithHash = None
                i1 = nrRem1
                if (not ((i1 != 0))):
                    break

    def step1(self):
        deltas = List()
        current = self.seqs.first
        while (current is not None):
            current2 = current.next
            while (current2 is not None):
                s1 = current.redSeq
                s2 = current2.redSeq
                result = 0.0
                _g1 = 0
                _g = len(s1)
                while (_g1 < _g):
                    pos = _g1
                    _g1 = (_g1 + 1)
                    if ((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) != (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))):
                        result = (result + self.rweights[pos])
                d = mj_Delta(current,current2,result)
                deltas.add(d)
                current2 = current2.next
            current = current.next
        sortedLists = List()
        _g_head = deltas.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            delta = val
            if (((sortedLists.last() is not None) and ((sortedLists.last().last() is not None))) and ((sortedLists.last().last().dist <= delta.dist))):
                sortedLists.last().add(delta)
            else:
                newL = List()
                newL.add(delta)
                sortedLists.add(newL)
        while (sortedLists.length > 1):
            l1 = sortedLists.pop()
            l2 = sortedLists.pop()
            nL = List()
            while ((not l1.isEmpty()) and (not l2.isEmpty())):
                if (l1.first().dist <= l2.first().dist):
                    nL.add(l1.pop())
                else:
                    nL.add(l2.pop())
            while (not l1.isEmpty()):
                nL.add(l1.pop())
            while (not l2.isEmpty()):
                nL.add(l2.pop())
            sortedLists.add(nL)
        deltas = sortedLists.first()
        self.rdeltas.clear()
        lastDeltaValue = -1.0
        c = None
        _g_head1 = deltas.h
        while (_g_head1 is not None):
            val1 = _g_head1.item
            _g_head1 = _g_head1.next
            delta1 = val1
            if (lastDeltaValue != delta1.dist):
                lastDeltaValue = delta1.dist
                if (c is not None):
                    self.rdeltas.add(c)
                c = List()
            c.add(delta1)
        if (c is not None):
            self.rdeltas.add(c)

    def step2(self,epsilon):
        current = self.seqs.first
        while (current is not None):
            current.nrConnections = 0
            current.connectedTo = None
            current.visitedId = 0
            current = current.next
        nextVisitedId = 1
        _g_head = self.rdeltas.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            deltas = val
            _g_head1 = deltas.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                delta = val1
                isConnected = False
                l = List()
                l.add(delta.s1)
                delta.s1.visitedId = nextVisitedId
                while (not l.isEmpty()):
                    c = l.pop()
                    if (c == delta.s2):
                        isConnected = True
                    p = c.connectedTo
                    while (p is not None):
                        if ((p.connectedTo.visitedId != nextVisitedId) and ((p.dist < ((delta.dist - epsilon))))):
                            l.add(p.connectedTo)
                            p.connectedTo.visitedId = nextVisitedId
                        p = p.next
                nextVisitedId = (nextVisitedId + 1)
                if (not isConnected):
                    _this = delta.s1
                    c1 = mj_Connection(delta.s2,delta.dist)
                    c1.next = _this.connectedTo
                    _this.connectedTo = c1
                    _this.nrConnections = (_this.nrConnections + 1)
                    _this1 = delta.s2
                    c2 = mj_Connection(delta.s1,delta.dist)
                    c2.next = _this1.connectedTo
                    _this1.connectedTo = c2
                    _this1.nrConnections = (_this1.nrConnections + 1)

    def step3(self):
        nrRem = 0
        current = self.seqs.firstMed
        markDel = List()
        while (current is not None):
            if (current.nrConnections <= 2):
                markDel.add(current)
                nrRem = (nrRem + 1)
            current = current.next
        _g_head = markDel.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            current1 = val
            _this = self.seqs
            current1.linkedTo.clear()
            if (_this.firstMed == current1):
                _this.firstMed = current1.next
            if (_this.last == current1):
                _this.last = current1.prev
            hc = current1.hashCode
            index = (HxOverrides.mod(hc, len(_this.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(_this.hashTable)))
            if (_this.hashTable[index] == current1):
                val1 = current1.nextWithHash
                _this.hashTable[index] = val1
            if (current1.next is not None):
                current1.next.prev = current1.prev
            if (current1.prev is not None):
                current1.prev.next = current1.next
            if (current1.nextWithHash is not None):
                current1.nextWithHash.prevWithHash = current1.prevWithHash
            if (current1.prevWithHash is not None):
                current1.prevWithHash.nextWithHash = current1.nextWithHash
            _this.size = (_this.size - 1)
            current1.next = None
            current1.prev = None
            current1.nextWithHash = None
            current1.prevWithHash = None
        return nrRem

    def step4(self,epsilon):
        medLst = List()
        s1 = self.seqs.first
        while (s1 is not None):
            s2_ = s1.connectedTo
            while (s2_ is not None):
                s11 = s1.redSeq
                s2 = s2_.connectedTo.redSeq
                result = 0.0
                _g1 = 0
                _g = len(s11)
                while (_g1 < _g):
                    pos = _g1
                    _g1 = (_g1 + 1)
                    if ((("" if (((pos < 0) or ((pos >= len(s11))))) else s11[pos])) != (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))):
                        result = (result + self.rweights[pos])
                c12 = result
                s3_ = s2_.next
                while (s3_ is not None):
                    s12 = s2_.connectedTo.redSeq
                    s21 = s3_.connectedTo.redSeq
                    result1 = 0.0
                    _g11 = 0
                    _g2 = len(s12)
                    while (_g11 < _g2):
                        pos1 = _g11
                        _g11 = (_g11 + 1)
                        if ((("" if (((pos1 < 0) or ((pos1 >= len(s12))))) else s12[pos1])) != (("" if (((pos1 < 0) or ((pos1 >= len(s21))))) else s21[pos1]))):
                            result1 = (result1 + self.rweights[pos1])
                    c23 = result1
                    cDist = (c12 + c23)
                    medLst.add(mj_Median(s1.redSeq,s2_.connectedTo.redSeq,s3_.connectedTo.redSeq,self.rweights,cDist))
                    s3_ = s3_.next
                s2_ = s2_.next
            s1 = s1.next
        sortedMeds = List()
        _g_head = medLst.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            med = val
            if (((sortedMeds.last() is not None) and ((sortedMeds.last().last() is not None))) and ((sortedMeds.last().last().dist <= med.dist))):
                sortedMeds.last().add(med)
            else:
                l = List()
                l.add(med)
                sortedMeds.add(l)
        while (sortedMeds.length > 1):
            l1 = sortedMeds.pop()
            l2 = sortedMeds.pop()
            nL = List()
            while ((not l1.isEmpty()) and (not l2.isEmpty())):
                if (l1.first().dist <= l2.first().dist):
                    nL.add(l1.pop())
                else:
                    nL.add(l2.pop())
            while (not l1.isEmpty()):
                nL.add(l1.pop())
            while (not l2.isEmpty()):
                nL.add(l2.pop())
            sortedMeds.add(nL)
        medLst = sortedMeds.pop()
        if (medLst is None):
            medLst = List()
        nrSeqsAdded = 0
        _hx_lambda = Math.POSITIVE_INFINITY
        _g_head1 = medLst.h
        while (_g_head1 is not None):
            val1 = _g_head1.item
            _g_head1 = _g_head1.next
            med1 = val1
            if ((med1.makesSense and ((med1.diffPos >= 1))) and ((med1.dist <= ((_hx_lambda + epsilon))))):
                _g_head2 = med1.constructMedians().h
                while (_g_head2 is not None):
                    val2 = _g_head2.item
                    _g_head2 = _g_head2.next
                    medV = val2
                    _this = self.seqs
                    result2 = False
                    result3 = 7
                    _g12 = 0
                    _g3 = len(medV)
                    while (_g12 < _g3):
                        pos2 = _g12
                        _g12 = (_g12 + 1)
                        result3 = ((31 * result3) + HxString.charCodeAt(medV,pos2))
                    hc = result3
                    hc1 = (HxOverrides.mod(hc, len(_this.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(_this.hashTable)))
                    s = _this.hashTable[hc1]
                    while (s is not None):
                        if (s.redSeq == medV):
                            result2 = True
                            break
                        s = s.nextWithHash
                    if result2:
                        continue
                    b = med1.dist
                    if python_lib_Math.isnan(_hx_lambda):
                        _hx_lambda = _hx_lambda
                    elif python_lib_Math.isnan(b):
                        _hx_lambda = b
                    else:
                        _hx_lambda = min(_hx_lambda,b)
                    _this1 = self.seqs
                    result4 = False
                    result5 = 7
                    _g13 = 0
                    _g4 = len(medV)
                    while (_g13 < _g4):
                        pos3 = _g13
                        _g13 = (_g13 + 1)
                        result5 = ((31 * result5) + HxString.charCodeAt(medV,pos3))
                    hc2 = result5
                    hc3 = (HxOverrides.mod(hc2, len(_this1.hashTable)) if ((hc2 >= 0)) else HxOverrides.mod(-hc2, len(_this1.hashTable)))
                    s3 = _this1.hashTable[hc3]
                    while (s3 is not None):
                        if (s3.redSeq == medV):
                            result4 = True
                            break
                        s3 = s3.nextWithHash
                    if (not result4):
                        def _hx_local_3():
                            _hx_local_2 = _this1.nextSeqId
                            _this1.nextSeqId = (_this1.nextSeqId + 1)
                            return _hx_local_2
                        id = _hx_local_3()
                        result6 = mj_Seq()
                        result6.id = id
                        result6.redSeq = medV
                        s4 = result6.redSeq
                        result7 = 7
                        _g14 = 0
                        _g5 = len(s4)
                        while (_g14 < _g5):
                            pos4 = _g14
                            _g14 = (_g14 + 1)
                            result7 = ((31 * result7) + HxString.charCodeAt(s4,pos4))
                        result6.hashCode = result7
                        result6.isSample = False
                        s5 = result6
                        _this1.size = (_this1.size + 1)
                        if ((len(_this1.hashTable) >> 1) < _this1.size):
                            this1 = [None]*(len(_this1.hashTable) << 1)
                            _this1.hashTable = this1
                            c = _this1.first
                            while (c is not None):
                                c.nextWithHash = None
                                c.prevWithHash = None
                                hc4 = c.hashCode
                                index = (HxOverrides.mod(hc4, len(_this1.hashTable)) if ((hc4 >= 0)) else HxOverrides.mod(-hc4, len(_this1.hashTable)))
                                if (_this1.hashTable[index] is None):
                                    _this1.hashTable[index] = c
                                else:
                                    c.nextWithHash = _this1.hashTable[index]
                                    _this1.hashTable[index].prevWithHash = c
                                    _this1.hashTable[index] = c
                                c = c.next
                        s5.nextWithHash = None
                        s5.prevWithHash = None
                        hc5 = s5.hashCode
                        index1 = (HxOverrides.mod(hc5, len(_this1.hashTable)) if ((hc5 >= 0)) else HxOverrides.mod(-hc5, len(_this1.hashTable)))
                        if (_this1.hashTable[index1] is None):
                            _this1.hashTable[index1] = s5
                        else:
                            s5.nextWithHash = _this1.hashTable[index1]
                            _this1.hashTable[index1].prevWithHash = s5
                            _this1.hashTable[index1] = s5
                        if (_this1.first is None):
                            _this1.first = s5
                        else:
                            s5.prev = _this1.last
                            _this1.last.next = s5
                        _this1.last = s5
                        if ((_this1.firstMed is None) and (not s5.isSample)):
                            _this1.firstMed = s5
                    nrSeqsAdded = (nrSeqsAdded + 1)
            else:
                break
        return nrSeqsAdded

    def step5(self):
        i = None
        while True:
            deltas = List()
            current = self.seqs.first
            while (current is not None):
                current2 = current.next
                while (current2 is not None):
                    s1 = current.redSeq
                    s2 = current2.redSeq
                    result = 0.0
                    _g1 = 0
                    _g = len(s1)
                    while (_g1 < _g):
                        pos = _g1
                        _g1 = (_g1 + 1)
                        if ((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) != (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))):
                            result = (result + self.rweights[pos])
                    d = mj_Delta(current,current2,result)
                    deltas.add(d)
                    current2 = current2.next
                current = current.next
            sortedLists = List()
            _g_head = deltas.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                delta = val
                if (((sortedLists.last() is not None) and ((sortedLists.last().last() is not None))) and ((sortedLists.last().last().dist <= delta.dist))):
                    sortedLists.last().add(delta)
                else:
                    newL = List()
                    newL.add(delta)
                    sortedLists.add(newL)
            while (sortedLists.length > 1):
                l1 = sortedLists.pop()
                l2 = sortedLists.pop()
                nL = List()
                while ((not l1.isEmpty()) and (not l2.isEmpty())):
                    if (l1.first().dist <= l2.first().dist):
                        nL.add(l1.pop())
                    else:
                        nL.add(l2.pop())
                while (not l1.isEmpty()):
                    nL.add(l1.pop())
                while (not l2.isEmpty()):
                    nL.add(l2.pop())
                sortedLists.add(nL)
            deltas = sortedLists.first()
            self.rdeltas.clear()
            lastDeltaValue = -1.0
            c = None
            _g_head1 = deltas.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                delta1 = val1
                if (lastDeltaValue != delta1.dist):
                    lastDeltaValue = delta1.dist
                    if (c is not None):
                        self.rdeltas.add(c)
                    c = List()
                c.add(delta1)
            if (c is not None):
                self.rdeltas.add(c)
            current1 = self.seqs.first
            while (current1 is not None):
                current1.nrConnections = 0
                current1.connectedTo = None
                current1.visitedId = 0
                current1 = current1.next
            nextVisitedId = 1
            _g_head2 = self.rdeltas.h
            while (_g_head2 is not None):
                val2 = _g_head2.item
                _g_head2 = _g_head2.next
                deltas1 = val2
                _g_head3 = deltas1.h
                while (_g_head3 is not None):
                    val3 = _g_head3.item
                    _g_head3 = _g_head3.next
                    delta2 = val3
                    isConnected = False
                    l = List()
                    l.add(delta2.s1)
                    delta2.s1.visitedId = nextVisitedId
                    while (not l.isEmpty()):
                        c1 = l.pop()
                        if (c1 == delta2.s2):
                            isConnected = True
                        p = c1.connectedTo
                        while (p is not None):
                            if ((p.connectedTo.visitedId != nextVisitedId) and ((p.dist < delta2.dist))):
                                l.add(p.connectedTo)
                                p.connectedTo.visitedId = nextVisitedId
                            p = p.next
                    nextVisitedId = (nextVisitedId + 1)
                    if (not isConnected):
                        _this = delta2.s1
                        c2 = mj_Connection(delta2.s2,delta2.dist)
                        c2.next = _this.connectedTo
                        _this.connectedTo = c2
                        _this.nrConnections = (_this.nrConnections + 1)
                        _this1 = delta2.s2
                        c3 = mj_Connection(delta2.s1,delta2.dist)
                        c3.next = _this1.connectedTo
                        _this1.connectedTo = c3
                        _this1.nrConnections = (_this1.nrConnections + 1)
            nrRem = 0
            current3 = self.seqs.firstMed
            markDel = List()
            while (current3 is not None):
                if (current3.nrConnections <= 2):
                    markDel.add(current3)
                    nrRem = (nrRem + 1)
                current3 = current3.next
            _g_head4 = markDel.h
            while (_g_head4 is not None):
                val4 = _g_head4.item
                _g_head4 = _g_head4.next
                current4 = val4
                _this2 = self.seqs
                current4.linkedTo.clear()
                if (_this2.firstMed == current4):
                    _this2.firstMed = current4.next
                if (_this2.last == current4):
                    _this2.last = current4.prev
                hc = current4.hashCode
                index = (HxOverrides.mod(hc, len(_this2.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(_this2.hashTable)))
                if (_this2.hashTable[index] == current4):
                    val5 = current4.nextWithHash
                    _this2.hashTable[index] = val5
                if (current4.next is not None):
                    current4.next.prev = current4.prev
                if (current4.prev is not None):
                    current4.prev.next = current4.next
                if (current4.nextWithHash is not None):
                    current4.nextWithHash.prevWithHash = current4.prevWithHash
                if (current4.prevWithHash is not None):
                    current4.prevWithHash.nextWithHash = current4.nextWithHash
                _this2.size = (_this2.size - 1)
                current4.next = None
                current4.prev = None
                current4.nextWithHash = None
                current4.prevWithHash = None
            i = nrRem
            if (not ((i != 0))):
                break

    def finalizeNetwork(self):
        _hx_list = self.seqs.first
        tmp = None
        if (_hx_list is None):
            tmp = None
        else:
            insize = 1
            nmerges = None
            psize = 0
            qsize = 0
            p = None
            q = None
            e = None
            tail = None
            while True:
                p = _hx_list
                _hx_list = None
                tail = None
                nmerges = 0
                while (p is not None):
                    nmerges = (nmerges + 1)
                    q = p
                    psize = 0
                    _g1 = 0
                    _g = insize
                    while (_g1 < _g):
                        i = _g1
                        _g1 = (_g1 + 1)
                        psize = (psize + 1)
                        q = q.next
                        if (q is None):
                            break
                    qsize = insize
                    while ((psize > 0) or (((qsize > 0) and ((q is not None))))):
                        if (psize == 0):
                            e = q
                            q = q.next
                            qsize = (qsize - 1)
                        elif (((qsize == 0) or ((q is None))) or (((q.names.length - p.names.length) <= 0))):
                            e = p
                            p = p.next
                            psize = (psize - 1)
                        else:
                            e = q
                            q = q.next
                            qsize = (qsize - 1)
                        if (tail is not None):
                            tail.next = e
                        else:
                            _hx_list = e
                        e.prev = tail
                        tail = e
                    p = q
                tail.next = None
                if (nmerges <= 1):
                    break
                insize = (insize * 2)
            _hx_list.prev = tail
            tmp = _hx_list
        self.seqs.first = tmp
        count = 0
        current = self.seqs.first
        this1 = [None]*len(current.origSeq)
        v = this1
        _g11 = 0
        _g2 = len(current.origSeq)
        while (_g11 < _g2):
            i1 = _g11
            _g11 = (_g11 + 1)
            _this = current.origSeq
            val = ("" if (((i1 < 0) or ((i1 >= len(_this))))) else _this[i1])
            v[i1] = val
        while (current is not None):
            def _hx_local_7():
                nonlocal count
                count = (count + 1)
                return count
            current.id = _hx_local_7()
            if (not current.isSample):
                i2 = 0
                _g_head = self.seqs.ipos.h
                while (_g_head is not None):
                    val1 = _g_head.item
                    _g_head = _g_head.next
                    pos = val1
                    _this1 = current.redSeq
                    index = i2
                    i2 = (i2 + 1)
                    val2 = ("" if (((index < 0) or ((index >= len(_this1))))) else _this1[index])
                    v[pos] = val2
                b_b = python_lib_io_StringIO()
                i3 = 0
                _hx_len = len(v)
                _g12 = 0
                _g3 = _hx_len
                while (_g12 < _g3):
                    i4 = _g12
                    _g12 = (_g12 + 1)
                    b_b.write(Std.string(Std.string(v[i4])))
                    if (i4 < ((_hx_len - 1))):
                        b_b.write("")
                current.origSeq = b_b.getvalue()
            current2 = current.next
            while ((current2 is not None) and current2.isSample):
                o = current2.indNames
                result = List()
                _g_head1 = o.h
                while (_g_head1 is not None):
                    val3 = _g_head1.item
                    _g_head1 = _g_head1.next
                    e1 = val3
                    result1 = False
                    _g_head2 = current.indNames.h
                    while (_g_head2 is not None):
                        val4 = _g_head2.item
                        _g_head2 = _g_head2.next
                        indName = val4
                        if (indName == e1):
                            result1 = True
                            break
                    if result1:
                        result.add(e1)
                l = result
                if ((l is not None) and (not l.isEmpty())):
                    l1 = mj_Link()
                    l1.to = current2
                    l1.names = l
                    current.linkedTo.add(l1)
                if ((l is not None) and (not l.isEmpty())):
                    l2 = mj_Link()
                    l2.to = current
                    l2.names = l
                    current2.linkedTo.add(l2)
                current2 = current2.next
            current = current.next
        l3 = List()
        current = self.seqs.first
        while ((current is not None) and current.isSample):
            if (current.spId == 0):
                _hx_local_8 = self
                _hx_local_9 = _hx_local_8.nextSpId
                _hx_local_8.nextSpId = (_hx_local_9 + 1)
                _hx_local_9
                current.spId = self.nextSpId
                l3.clear()
                l3.add(current)
                while (not l3.isEmpty()):
                    c = l3.pop()
                    _g_head3 = c.linkedTo.h
                    while (_g_head3 is not None):
                        val5 = _g_head3.item
                        _g_head3 = _g_head3.next
                        n = val5
                        n1 = n.to
                        if (n1.spId == 0):
                            n1.spId = self.nextSpId
                            l3.add(n1)
                        elif (n1.spId != self.nextSpId):
                            raise _HxException("Something somewhere went terribly wrong (#1)!")
            current = current.next
        return self.seqs

    def getNrSeqs(self):
        return self.seqCount

    def getNrDifSeqs(self):
        return self.seqs.size

    def getSeqLength(self):
        return self.seqs.origSeqLen

    def getNrInterestingPositions(self):
        return self.seqs.ipos

    def getNrFFRs(self):
        return self.nextSpId

    def countIndiv(self):
        l = List()
        current = self.seqs.first
        inLst = False
        while ((current is not None) and current.isSample):
            _g_head = current.indNames.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                indName = val
                inLst = False
                _g_head1 = l.h
                while (_g_head1 is not None):
                    val1 = _g_head1.item
                    _g_head1 = _g_head1.next
                    name = val1
                    if (name == indName):
                        inLst = True
                        break
                if (not inLst):
                    l.add(indName)
            current = current.next
        return l.length

    @staticmethod
    def main():
        pass



class mj_Median:
    _hx_class_name = "mj.Median"
    __slots__ = ("s1", "s2", "s3", "dist", "diffPos", "meds", "makesSense")
    _hx_fields = ["s1", "s2", "s3", "dist", "diffPos", "meds", "makesSense"]
    _hx_methods = ["continueMedians", "constructMediansOld", "constructMedians"]

    def __init__(self,s1,s2,s3,w,cDist):
        self.makesSense = False
        self.s1 = s1
        self.s2 = s2
        self.s3 = s3
        self.dist = 0
        self.diffPos = 0
        self.meds = 1
        _g1 = 0
        _g = len(s1)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            if (((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) == (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))) and (((("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos])) == (("" if (((pos < 0) or ((pos >= len(s3))))) else s3[pos]))))):
                continue
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.diffPos
            _hx_local_0.diffPos = (_hx_local_1 + 1)
            _hx_local_1
            if ((((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) != (("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos]))) and (((("" if (((pos < 0) or ((pos >= len(s2))))) else s2[pos])) != (("" if (((pos < 0) or ((pos >= len(s3))))) else s3[pos]))))) and (((("" if (((pos < 0) or ((pos >= len(s1))))) else s1[pos])) != (("" if (((pos < 0) or ((pos >= len(s3))))) else s3[pos]))))):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.dist
                _hx_local_2.dist = (_hx_local_3 + ((2 * w[pos])))
                _hx_local_2.dist
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.meds
                _hx_local_4.meds = (_hx_local_5 * 3)
                _hx_local_4.meds
                continue
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.dist
            _hx_local_6.dist = (_hx_local_7 + w[pos])
            _hx_local_6.dist
        self.makesSense = True

    def continueMedians(self,l,c,pos):
        _g_head = l.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            e = val
            e[pos] = c

    def constructMediansOld(self):
        presult = List()
        this1 = [None]*len(self.s1)
        presult.add(this1)
        _g1 = 0
        _g = len(self.s1)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            _this = self.s1
            tmp = ("" if (((pos < 0) or ((pos >= len(_this))))) else _this[pos])
            _this1 = self.s2
            if (tmp == (("" if (((pos < 0) or ((pos >= len(_this1))))) else _this1[pos]))):
                _this2 = self.s1
                c = ("" if (((pos < 0) or ((pos >= len(_this2))))) else _this2[pos])
                _g_head = presult.h
                while (_g_head is not None):
                    val = _g_head.item
                    _g_head = _g_head.next
                    e = val
                    e[pos] = c
                continue
            _this3 = self.s1
            tmp1 = ("" if (((pos < 0) or ((pos >= len(_this3))))) else _this3[pos])
            _this4 = self.s3
            if (tmp1 == (("" if (((pos < 0) or ((pos >= len(_this4))))) else _this4[pos]))):
                _this5 = self.s1
                c1 = ("" if (((pos < 0) or ((pos >= len(_this5))))) else _this5[pos])
                _g_head1 = presult.h
                while (_g_head1 is not None):
                    val1 = _g_head1.item
                    _g_head1 = _g_head1.next
                    e1 = val1
                    e1[pos] = c1
                continue
            _this6 = self.s2
            tmp2 = ("" if (((pos < 0) or ((pos >= len(_this6))))) else _this6[pos])
            _this7 = self.s3
            if (tmp2 == (("" if (((pos < 0) or ((pos >= len(_this7))))) else _this7[pos]))):
                _this8 = self.s2
                c2 = ("" if (((pos < 0) or ((pos >= len(_this8))))) else _this8[pos])
                _g_head2 = presult.h
                while (_g_head2 is not None):
                    val2 = _g_head2.item
                    _g_head2 = _g_head2.next
                    e2 = val2
                    e2[pos] = c2
                continue
            limit = presult.length
            _g2 = 0
            while (_g2 < 2):
                zzzzz = _g2
                _g2 = (_g2 + 1)
                i = 0
                _g3_head = presult.h
                while (_g3_head is not None):
                    val3 = _g3_head.item
                    _g3_head = _g3_head.next
                    ele = val3
                    if (i < limit):
                        i = (i + 1)
                    else:
                        break
                    this2 = [None]*len(ele)
                    r = this2
                    haxe_ds__Vector_Vector_Impl_.blit(ele,0,r,0,len(ele))
                    presult.add(r)
            pp = 0
            _g2_head = presult.h
            while (_g2_head is not None):
                val4 = _g2_head.item
                _g2_head = _g2_head.next
                ele1 = val4
                c3 = None
                if (pp < limit):
                    _this9 = self.s1
                    if ((pos < 0) or ((pos >= len(_this9)))):
                        c3 = ""
                    else:
                        c3 = _this9[pos]
                elif (pp < ((limit << 1))):
                    _this10 = self.s2
                    if ((pos < 0) or ((pos >= len(_this10)))):
                        c3 = ""
                    else:
                        c3 = _this10[pos]
                else:
                    _this11 = self.s3
                    if ((pos < 0) or ((pos >= len(_this11)))):
                        c3 = ""
                    else:
                        c3 = _this11[pos]
                ele1[pos] = c3
                pp = (pp + 1)
        result = List()
        _g_head3 = presult.h
        while (_g_head3 is not None):
            val5 = _g_head3.item
            _g_head3 = _g_head3.next
            s = val5
            b_b = python_lib_io_StringIO()
            i1 = 0
            _hx_len = len(s)
            _g11 = 0
            _g3 = _hx_len
            while (_g11 < _g3):
                i2 = _g11
                _g11 = (_g11 + 1)
                b_b.write(Std.string(Std.string(s[i2])))
                if (i2 < ((_hx_len - 1))):
                    b_b.write("")
            result.add(b_b.getvalue())
        return result

    def constructMedians(self):
        if (self.meds <= 3):
            presult = List()
            this1 = [None]*len(self.s1)
            presult.add(this1)
            _g1 = 0
            _g = len(self.s1)
            while (_g1 < _g):
                pos = _g1
                _g1 = (_g1 + 1)
                _this = self.s1
                tmp = ("" if (((pos < 0) or ((pos >= len(_this))))) else _this[pos])
                _this1 = self.s2
                if (tmp == (("" if (((pos < 0) or ((pos >= len(_this1))))) else _this1[pos]))):
                    _this2 = self.s1
                    c = ("" if (((pos < 0) or ((pos >= len(_this2))))) else _this2[pos])
                    _g_head = presult.h
                    while (_g_head is not None):
                        val = _g_head.item
                        _g_head = _g_head.next
                        e = val
                        e[pos] = c
                    continue
                _this3 = self.s1
                tmp1 = ("" if (((pos < 0) or ((pos >= len(_this3))))) else _this3[pos])
                _this4 = self.s3
                if (tmp1 == (("" if (((pos < 0) or ((pos >= len(_this4))))) else _this4[pos]))):
                    _this5 = self.s1
                    c1 = ("" if (((pos < 0) or ((pos >= len(_this5))))) else _this5[pos])
                    _g_head1 = presult.h
                    while (_g_head1 is not None):
                        val1 = _g_head1.item
                        _g_head1 = _g_head1.next
                        e1 = val1
                        e1[pos] = c1
                    continue
                _this6 = self.s2
                tmp2 = ("" if (((pos < 0) or ((pos >= len(_this6))))) else _this6[pos])
                _this7 = self.s3
                if (tmp2 == (("" if (((pos < 0) or ((pos >= len(_this7))))) else _this7[pos]))):
                    _this8 = self.s2
                    c2 = ("" if (((pos < 0) or ((pos >= len(_this8))))) else _this8[pos])
                    _g_head2 = presult.h
                    while (_g_head2 is not None):
                        val2 = _g_head2.item
                        _g_head2 = _g_head2.next
                        e2 = val2
                        e2[pos] = c2
                    continue
                limit = presult.length
                _g2 = 0
                while (_g2 < 2):
                    zzzzz = _g2
                    _g2 = (_g2 + 1)
                    i = 0
                    _g3_head = presult.h
                    while (_g3_head is not None):
                        val3 = _g3_head.item
                        _g3_head = _g3_head.next
                        ele = val3
                        if (i < limit):
                            i = (i + 1)
                        else:
                            break
                        this2 = [None]*len(ele)
                        r = this2
                        haxe_ds__Vector_Vector_Impl_.blit(ele,0,r,0,len(ele))
                        presult.add(r)
                pp = 0
                _g2_head = presult.h
                while (_g2_head is not None):
                    val4 = _g2_head.item
                    _g2_head = _g2_head.next
                    ele1 = val4
                    c3 = None
                    if (pp < limit):
                        _this9 = self.s1
                        if ((pos < 0) or ((pos >= len(_this9)))):
                            c3 = ""
                        else:
                            c3 = _this9[pos]
                    elif (pp < ((limit << 1))):
                        _this10 = self.s2
                        if ((pos < 0) or ((pos >= len(_this10)))):
                            c3 = ""
                        else:
                            c3 = _this10[pos]
                    else:
                        _this11 = self.s3
                        if ((pos < 0) or ((pos >= len(_this11)))):
                            c3 = ""
                        else:
                            c3 = _this11[pos]
                    ele1[pos] = c3
                    pp = (pp + 1)
            result = List()
            _g_head3 = presult.h
            while (_g_head3 is not None):
                val5 = _g_head3.item
                _g_head3 = _g_head3.next
                s = val5
                b_b = python_lib_io_StringIO()
                i1 = 0
                _hx_len = len(s)
                _g11 = 0
                _g3 = _hx_len
                while (_g11 < _g3):
                    i2 = _g11
                    _g11 = (_g11 + 1)
                    b_b.write(Std.string(Std.string(s[i2])))
                    if (i2 < ((_hx_len - 1))):
                        b_b.write("")
                result.add(b_b.getvalue())
            return result
        this3 = [None]*len(self.s1)
        s1v = this3
        this4 = [None]*len(self.s1)
        s2v = this4
        this5 = [None]*len(self.s1)
        s3v = this5
        _g12 = 0
        _g4 = len(self.s1)
        while (_g12 < _g4):
            pos1 = _g12
            _g12 = (_g12 + 1)
            tmp3 = None
            tmp4 = None
            _this12 = self.s1
            tmp5 = ("" if (((pos1 < 0) or ((pos1 >= len(_this12))))) else _this12[pos1])
            _this13 = self.s2
            if (tmp5 == (("" if (((pos1 < 0) or ((pos1 >= len(_this13))))) else _this13[pos1]))):
                _this14 = self.s2
                tmp6 = ("" if (((pos1 < 0) or ((pos1 >= len(_this14))))) else _this14[pos1])
                _this15 = self.s3
                tmp4 = (tmp6 == (("" if (((pos1 < 0) or ((pos1 >= len(_this15))))) else _this15[pos1])))
            else:
                tmp4 = False
            if (not tmp4):
                tmp7 = None
                _this16 = self.s1
                tmp8 = ("" if (((pos1 < 0) or ((pos1 >= len(_this16))))) else _this16[pos1])
                _this17 = self.s2
                if (tmp8 != (("" if (((pos1 < 0) or ((pos1 >= len(_this17))))) else _this17[pos1]))):
                    _this18 = self.s2
                    tmp9 = ("" if (((pos1 < 0) or ((pos1 >= len(_this18))))) else _this18[pos1])
                    _this19 = self.s3
                    tmp7 = (tmp9 != (("" if (((pos1 < 0) or ((pos1 >= len(_this19))))) else _this19[pos1])))
                else:
                    tmp7 = False
                if tmp7:
                    _this20 = self.s1
                    tmp10 = ("" if (((pos1 < 0) or ((pos1 >= len(_this20))))) else _this20[pos1])
                    _this21 = self.s3
                    tmp3 = (tmp10 != (("" if (((pos1 < 0) or ((pos1 >= len(_this21))))) else _this21[pos1])))
                else:
                    tmp3 = False
            else:
                tmp3 = True
            if tmp3:
                _this22 = self.s1
                val6 = ("" if (((pos1 < 0) or ((pos1 >= len(_this22))))) else _this22[pos1])
                s1v[pos1] = val6
                _this23 = self.s2
                val7 = ("" if (((pos1 < 0) or ((pos1 >= len(_this23))))) else _this23[pos1])
                s2v[pos1] = val7
                _this24 = self.s3
                val8 = ("" if (((pos1 < 0) or ((pos1 >= len(_this24))))) else _this24[pos1])
                s3v[pos1] = val8
                continue
            c4 = ""
            _this25 = self.s1
            tmp11 = ("" if (((pos1 < 0) or ((pos1 >= len(_this25))))) else _this25[pos1])
            _this26 = self.s2
            if (tmp11 == (("" if (((pos1 < 0) or ((pos1 >= len(_this26))))) else _this26[pos1]))):
                _this27 = self.s1
                if ((pos1 < 0) or ((pos1 >= len(_this27)))):
                    c4 = ""
                else:
                    c4 = _this27[pos1]
            else:
                _this28 = self.s2
                tmp12 = ("" if (((pos1 < 0) or ((pos1 >= len(_this28))))) else _this28[pos1])
                _this29 = self.s3
                if (tmp12 == (("" if (((pos1 < 0) or ((pos1 >= len(_this29))))) else _this29[pos1]))):
                    _this30 = self.s2
                    if ((pos1 < 0) or ((pos1 >= len(_this30)))):
                        c4 = ""
                    else:
                        c4 = _this30[pos1]
                else:
                    _this31 = self.s3
                    if ((pos1 < 0) or ((pos1 >= len(_this31)))):
                        c4 = ""
                    else:
                        c4 = _this31[pos1]
            s1v[pos1] = c4
            s2v[pos1] = c4
            s3v[pos1] = c4
        result1 = List()
        b_b1 = python_lib_io_StringIO()
        i3 = 0
        len1 = len(s1v)
        _g13 = 0
        _g5 = len1
        while (_g13 < _g5):
            i4 = _g13
            _g13 = (_g13 + 1)
            b_b1.write(Std.string(Std.string(s1v[i4])))
            if (i4 < ((len1 - 1))):
                b_b1.write("")
        result1.add(b_b1.getvalue())
        b_b2 = python_lib_io_StringIO()
        i5 = 0
        len2 = len(s2v)
        _g14 = 0
        _g6 = len2
        while (_g14 < _g6):
            i6 = _g14
            _g14 = (_g14 + 1)
            b_b2.write(Std.string(Std.string(s2v[i6])))
            if (i6 < ((len2 - 1))):
                b_b2.write("")
        result1.add(b_b2.getvalue())
        b_b3 = python_lib_io_StringIO()
        i7 = 0
        len3 = len(s3v)
        _g15 = 0
        _g7 = len3
        while (_g15 < _g7):
            i8 = _g15
            _g15 = (_g15 + 1)
            b_b3.write(Std.string(Std.string(s3v[i8])))
            if (i8 < ((len3 - 1))):
                b_b3.write("")
        result1.add(b_b3.getvalue())
        return result1



class mj_Seq:
    _hx_class_name = "mj.Seq"
    __slots__ = ("next", "prev", "hashCode", "nextWithHash", "prevWithHash", "names", "indNames", "origSeq", "redSeq", "isSample", "id", "spId", "visitedId", "connectedTo", "nrConnections", "linkedTo")
    _hx_fields = ["next", "prev", "hashCode", "nextWithHash", "prevWithHash", "names", "indNames", "origSeq", "redSeq", "isSample", "id", "spId", "visitedId", "connectedTo", "nrConnections", "linkedTo"]
    _hx_methods = ["calcHashForOrig", "calcHashForRed", "addName", "hasIndIdentifier", "cmpIndIdentifiers", "reduceSequence", "constructSeq", "addConnection", "clearConnections", "addLinkTo", "addLinkBySeq"]
    _hx_statics = ["delimiter", "calcHash", "getIndIdentifier", "createSample", "createMedian"]

    def __init__(self):
        self.nrConnections = None
        self.connectedTo = None
        self.visitedId = None
        self.id = None
        self.isSample = None
        self.redSeq = None
        self.origSeq = None
        self.prevWithHash = None
        self.nextWithHash = None
        self.hashCode = None
        self.prev = None
        self.next = None
        self.names = List()
        self.indNames = List()
        self.linkedTo = List()
        self.spId = 0

    def calcHashForOrig(self):
        s = self.origSeq
        result = 7
        _g1 = 0
        _g = len(s)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result = ((31 * result) + HxString.charCodeAt(s,pos))
        self.hashCode = result

    def calcHashForRed(self):
        s = self.redSeq
        result = 7
        _g1 = 0
        _g = len(s)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result = ((31 * result) + HxString.charCodeAt(s,pos))
        self.hashCode = result

    def addName(self,s):
        if ((s is not None) and ((s != ""))):
            self.names.add(s)
            result = s
            if (s is not None):
                _hx_str = mj_Seq.delimiter
                pos = s.rfind(_hx_str, 0, len(s))
                if (pos != -1):
                    result = HxString.substr(s,0,pos)
            indId = result
            result1 = False
            _g_head = self.indNames.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                indName = val
                if (indName == indId):
                    result1 = True
                    break
            if (not result1):
                self.indNames.add(indId)

    def hasIndIdentifier(self,s):
        result = False
        _g_head = self.indNames.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            indName = val
            if (indName == s):
                result = True
                break
        return result

    def cmpIndIdentifiers(self,o):
        result = List()
        _g_head = o.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            e = val
            result1 = False
            _g_head1 = self.indNames.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                indName = val1
                if (indName == e):
                    result1 = True
                    break
            if result1:
                result.add(e)
        return result

    def reduceSequence(self,ipos):
        l = List()
        _g_head = ipos.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            e = val
            _this = self.origSeq
            l.add(("" if (((e < 0) or ((e >= len(_this))))) else _this[e]))
        self.redSeq = l.join("")

    def constructSeq(self,s,ipos):
        i = 0
        _g_head = ipos.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            pos = val
            _this = self.redSeq
            index = i
            i = (i + 1)
            val1 = ("" if (((index < 0) or ((index >= len(_this))))) else _this[index])
            s[pos] = val1
        b_b = python_lib_io_StringIO()
        i1 = 0
        _hx_len = len(s)
        _g1 = 0
        _g = _hx_len
        while (_g1 < _g):
            i2 = _g1
            _g1 = (_g1 + 1)
            b_b.write(Std.string(Std.string(s[i2])))
            if (i2 < ((_hx_len - 1))):
                b_b.write("")
        self.origSeq = b_b.getvalue()

    def addConnection(self,c):
        c.next = self.connectedTo
        self.connectedTo = c
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.nrConnections
        _hx_local_0.nrConnections = (_hx_local_1 + 1)
        _hx_local_1

    def clearConnections(self):
        self.nrConnections = 0
        self.connectedTo = None

    def addLinkTo(self,o,names):
        if ((names is not None) and (not names.isEmpty())):
            l = mj_Link()
            l.to = o
            l.names = names
            self.linkedTo.add(l)

    def addLinkBySeq(self,os):
        o = os.indNames
        result = List()
        _g_head = o.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            e = val
            result1 = False
            _g_head1 = self.indNames.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                indName = val1
                if (indName == e):
                    result1 = True
                    break
            if result1:
                result.add(e)
        l = result
        if ((l is not None) and (not l.isEmpty())):
            l1 = mj_Link()
            l1.to = os
            l1.names = l
            self.linkedTo.add(l1)
        if ((l is not None) and (not l.isEmpty())):
            l2 = mj_Link()
            l2.to = self
            l2.names = l
            os.linkedTo.add(l2)

    @staticmethod
    def calcHash(s):
        result = 7
        _g1 = 0
        _g = len(s)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result = ((31 * result) + HxString.charCodeAt(s,pos))
        return result

    @staticmethod
    def getIndIdentifier(s):
        result = s
        if (s is not None):
            _hx_str = mj_Seq.delimiter
            pos = s.rfind(_hx_str, 0, len(s))
            if (pos != -1):
                result = HxString.substr(s,0,pos)
        return result

    @staticmethod
    def createSample(id,name,seq):
        result = mj_Seq()
        result.id = id
        if ((name is not None) and ((name != ""))):
            result.names.add(name)
            result1 = name
            if (name is not None):
                _hx_str = mj_Seq.delimiter
                pos = name.rfind(_hx_str, 0, len(name))
                if (pos != -1):
                    result1 = HxString.substr(name,0,pos)
            indId = result1
            result2 = False
            _g_head = result.indNames.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                indName = val
                if (indName == indId):
                    result2 = True
                    break
            if (not result2):
                result.indNames.add(indId)
        result.origSeq = seq
        s = result.origSeq
        result3 = 7
        _g1 = 0
        _g = len(s)
        while (_g1 < _g):
            pos1 = _g1
            _g1 = (_g1 + 1)
            result3 = ((31 * result3) + HxString.charCodeAt(s,pos1))
        result.hashCode = result3
        result.isSample = True
        return result

    @staticmethod
    def createMedian(id,seq):
        result = mj_Seq()
        result.id = id
        result.redSeq = seq
        s = result.redSeq
        result1 = 7
        _g1 = 0
        _g = len(s)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result1 = ((31 * result1) + HxString.charCodeAt(s,pos))
        result.hashCode = result1
        result.isSample = False
        return result



class mj_Seqs:
    _hx_class_name = "mj.Seqs"
    __slots__ = ("first", "firstMed", "last", "size", "hashTable", "nextSeqId", "origSeqLen", "ipos")
    _hx_fields = ["first", "firstMed", "last", "size", "hashTable", "nextSeqId", "origSeqLen", "ipos"]
    _hx_methods = ["hashCodeToIndex", "rehash", "addSeqToHashtable", "addSeq", "addSample", "containsMed", "addMedian", "removeMed", "finishedAddingSamples", "printTxt", "printOldTxt"]

    def __init__(self):
        self.last = None
        self.firstMed = None
        self.first = None
        this1 = [None]*100
        self.hashTable = this1
        self.nextSeqId = 1
        self.origSeqLen = -1
        self.ipos = List()
        self.size = 0

    def hashCodeToIndex(self,hc):
        if (hc >= 0):
            return HxOverrides.mod(hc, len(self.hashTable))
        else:
            return HxOverrides.mod(-hc, len(self.hashTable))

    def rehash(self,newSize):
        this1 = [None]*newSize
        self.hashTable = this1
        c = self.first
        while (c is not None):
            c.nextWithHash = None
            c.prevWithHash = None
            hc = c.hashCode
            index = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
            if (self.hashTable[index] is None):
                self.hashTable[index] = c
            else:
                c.nextWithHash = self.hashTable[index]
                self.hashTable[index].prevWithHash = c
                self.hashTable[index] = c
            c = c.next

    def addSeqToHashtable(self,s):
        s.nextWithHash = None
        s.prevWithHash = None
        hc = s.hashCode
        index = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
        if (self.hashTable[index] is None):
            self.hashTable[index] = s
        else:
            s.nextWithHash = self.hashTable[index]
            self.hashTable[index].prevWithHash = s
            self.hashTable[index] = s

    def addSeq(self,s):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.size
        _hx_local_0.size = (_hx_local_1 + 1)
        _hx_local_1
        if ((len(self.hashTable) >> 1) < self.size):
            this1 = [None]*(len(self.hashTable) << 1)
            self.hashTable = this1
            c = self.first
            while (c is not None):
                c.nextWithHash = None
                c.prevWithHash = None
                hc = c.hashCode
                index = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
                if (self.hashTable[index] is None):
                    self.hashTable[index] = c
                else:
                    c.nextWithHash = self.hashTable[index]
                    self.hashTable[index].prevWithHash = c
                    self.hashTable[index] = c
                c = c.next
        s.nextWithHash = None
        s.prevWithHash = None
        hc1 = s.hashCode
        index1 = (HxOverrides.mod(hc1, len(self.hashTable)) if ((hc1 >= 0)) else HxOverrides.mod(-hc1, len(self.hashTable)))
        if (self.hashTable[index1] is None):
            self.hashTable[index1] = s
        else:
            s.nextWithHash = self.hashTable[index1]
            self.hashTable[index1].prevWithHash = s
            self.hashTable[index1] = s
        if (self.first is None):
            self.first = s
        else:
            s.prev = self.last
            self.last.next = s
        self.last = s
        if ((self.firstMed is None) and (not s.isSample)):
            self.firstMed = s

    def addSample(self,name,seq):
        if ((self.origSeqLen != -1) and ((self.origSeqLen != len(seq)))):
            raise _HxException("Sequence differentiate in length! Please align sequences first!")
        elif (len(seq) == 0):
            raise _HxException("Cannot add empty string!")
        self.origSeqLen = len(seq)
        result = 7
        _g1 = 0
        _g = len(seq)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result = ((31 * result) + HxString.charCodeAt(seq,pos))
        hc = result
        hc1 = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
        s = self.hashTable[hc1]
        while (s is not None):
            if (s.origSeq == seq):
                if ((name is not None) and ((name != ""))):
                    s.names.add(name)
                    result1 = name
                    if (name is not None):
                        _hx_str = mj_Seq.delimiter
                        pos1 = name.rfind(_hx_str, 0, len(name))
                        if (pos1 != -1):
                            result1 = HxString.substr(name,0,pos1)
                    indId = result1
                    result2 = False
                    _g_head = s.indNames.h
                    while (_g_head is not None):
                        val = _g_head.item
                        _g_head = _g_head.next
                        indName = val
                        if (indName == indId):
                            result2 = True
                            break
                    if (not result2):
                        s.indNames.add(indId)
                return
            s = s.nextWithHash
        id = self.nextSeqId
        self.nextSeqId = (self.nextSeqId + 1)
        result3 = mj_Seq()
        result3.id = id
        if ((name is not None) and ((name != ""))):
            result3.names.add(name)
            result4 = name
            if (name is not None):
                str1 = mj_Seq.delimiter
                pos2 = name.rfind(str1, 0, len(name))
                if (pos2 != -1):
                    result4 = HxString.substr(name,0,pos2)
            indId1 = result4
            result5 = False
            _g_head1 = result3.indNames.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                indName1 = val1
                if (indName1 == indId1):
                    result5 = True
                    break
            if (not result5):
                result3.indNames.add(indId1)
        result3.origSeq = seq
        s1 = result3.origSeq
        result6 = 7
        _g11 = 0
        _g2 = len(s1)
        while (_g11 < _g2):
            pos3 = _g11
            _g11 = (_g11 + 1)
            result6 = ((31 * result6) + HxString.charCodeAt(s1,pos3))
        result3.hashCode = result6
        result3.isSample = True
        s2 = result3
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.size
        _hx_local_0.size = (_hx_local_1 + 1)
        _hx_local_1
        if ((len(self.hashTable) >> 1) < self.size):
            this1 = [None]*(len(self.hashTable) << 1)
            self.hashTable = this1
            c = self.first
            while (c is not None):
                c.nextWithHash = None
                c.prevWithHash = None
                hc2 = c.hashCode
                index = (HxOverrides.mod(hc2, len(self.hashTable)) if ((hc2 >= 0)) else HxOverrides.mod(-hc2, len(self.hashTable)))
                if (self.hashTable[index] is None):
                    self.hashTable[index] = c
                else:
                    c.nextWithHash = self.hashTable[index]
                    self.hashTable[index].prevWithHash = c
                    self.hashTable[index] = c
                c = c.next
        s2.nextWithHash = None
        s2.prevWithHash = None
        hc3 = s2.hashCode
        index1 = (HxOverrides.mod(hc3, len(self.hashTable)) if ((hc3 >= 0)) else HxOverrides.mod(-hc3, len(self.hashTable)))
        if (self.hashTable[index1] is None):
            self.hashTable[index1] = s2
        else:
            s2.nextWithHash = self.hashTable[index1]
            self.hashTable[index1].prevWithHash = s2
            self.hashTable[index1] = s2
        if (self.first is None):
            self.first = s2
        else:
            s2.prev = self.last
            self.last.next = s2
        self.last = s2
        if ((self.firstMed is None) and (not s2.isSample)):
            self.firstMed = s2

    def containsMed(self,seq):
        result = False
        result1 = 7
        _g1 = 0
        _g = len(seq)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result1 = ((31 * result1) + HxString.charCodeAt(seq,pos))
        hc = result1
        hc1 = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
        s = self.hashTable[hc1]
        while (s is not None):
            if (s.redSeq == seq):
                result = True
                break
            s = s.nextWithHash
        return result

    def addMedian(self,seq):
        result = False
        result1 = 7
        _g1 = 0
        _g = len(seq)
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            result1 = ((31 * result1) + HxString.charCodeAt(seq,pos))
        hc = result1
        hc1 = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
        s = self.hashTable[hc1]
        while (s is not None):
            if (s.redSeq == seq):
                result = True
                break
            s = s.nextWithHash
        if (not result):
            id = self.nextSeqId
            self.nextSeqId = (self.nextSeqId + 1)
            result2 = mj_Seq()
            result2.id = id
            result2.redSeq = seq
            s1 = result2.redSeq
            result3 = 7
            _g11 = 0
            _g2 = len(s1)
            while (_g11 < _g2):
                pos1 = _g11
                _g11 = (_g11 + 1)
                result3 = ((31 * result3) + HxString.charCodeAt(s1,pos1))
            result2.hashCode = result3
            result2.isSample = False
            s2 = result2
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.size
            _hx_local_0.size = (_hx_local_1 + 1)
            _hx_local_1
            if ((len(self.hashTable) >> 1) < self.size):
                this1 = [None]*(len(self.hashTable) << 1)
                self.hashTable = this1
                c = self.first
                while (c is not None):
                    c.nextWithHash = None
                    c.prevWithHash = None
                    hc2 = c.hashCode
                    index = (HxOverrides.mod(hc2, len(self.hashTable)) if ((hc2 >= 0)) else HxOverrides.mod(-hc2, len(self.hashTable)))
                    if (self.hashTable[index] is None):
                        self.hashTable[index] = c
                    else:
                        c.nextWithHash = self.hashTable[index]
                        self.hashTable[index].prevWithHash = c
                        self.hashTable[index] = c
                    c = c.next
            s2.nextWithHash = None
            s2.prevWithHash = None
            hc3 = s2.hashCode
            index1 = (HxOverrides.mod(hc3, len(self.hashTable)) if ((hc3 >= 0)) else HxOverrides.mod(-hc3, len(self.hashTable)))
            if (self.hashTable[index1] is None):
                self.hashTable[index1] = s2
            else:
                s2.nextWithHash = self.hashTable[index1]
                self.hashTable[index1].prevWithHash = s2
                self.hashTable[index1] = s2
            if (self.first is None):
                self.first = s2
            else:
                s2.prev = self.last
                self.last.next = s2
            self.last = s2
            if ((self.firstMed is None) and (not s2.isSample)):
                self.firstMed = s2

    def removeMed(self,s):
        s.linkedTo.clear()
        if (self.firstMed == s):
            self.firstMed = s.next
        if (self.last == s):
            self.last = s.prev
        hc = s.hashCode
        index = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
        if (self.hashTable[index] == s):
            val = s.nextWithHash
            self.hashTable[index] = val
        if (s.next is not None):
            s.next.prev = s.prev
        if (s.prev is not None):
            s.prev.next = s.next
        if (s.nextWithHash is not None):
            s.nextWithHash.prevWithHash = s.prevWithHash
        if (s.prevWithHash is not None):
            s.prevWithHash.nextWithHash = s.nextWithHash
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.size
        _hx_local_0.size = (_hx_local_1 - 1)
        _hx_local_1
        s.next = None
        s.prev = None
        s.nextWithHash = None
        s.prevWithHash = None

    def finishedAddingSamples(self):
        if (self.origSeqLen <= 1):
            raise _HxException("Need at least two sampled sequences!")
        _g1 = 0
        _g = self.origSeqLen
        while (_g1 < _g):
            pos = _g1
            _g1 = (_g1 + 1)
            current = self.first.next
            while (current is not None):
                _this = self.first.origSeq
                tmp = ("" if (((pos < 0) or ((pos >= len(_this))))) else _this[pos])
                _this1 = current.origSeq
                if (tmp != (("" if (((pos < 0) or ((pos >= len(_this1))))) else _this1[pos]))):
                    self.ipos.add(pos)
                    break
                current = current.next
        current1 = self.first
        while (current1 is not None):
            ipos = self.ipos
            l = List()
            _g_head = ipos.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                e = val
                _this2 = current1.origSeq
                l.add(("" if (((e < 0) or ((e >= len(_this2))))) else _this2[e]))
            current1.redSeq = l.join("")
            s = current1.redSeq
            result = 7
            _g11 = 0
            _g2 = len(s)
            while (_g11 < _g2):
                pos1 = _g11
                _g11 = (_g11 + 1)
                result = ((31 * result) + HxString.charCodeAt(s,pos1))
            current1.hashCode = result
            current1 = current1.next
        this1 = [None]*(len(self.hashTable) << 1)
        self.hashTable = this1
        c = self.first
        while (c is not None):
            c.nextWithHash = None
            c.prevWithHash = None
            hc = c.hashCode
            index = (HxOverrides.mod(hc, len(self.hashTable)) if ((hc >= 0)) else HxOverrides.mod(-hc, len(self.hashTable)))
            if (self.hashTable[index] is None):
                self.hashTable[index] = c
            else:
                c.nextWithHash = self.hashTable[index]
                self.hashTable[index].prevWithHash = c
                self.hashTable[index] = c
            c = c.next

    def printTxt(self,printer):
        printer.printString("#Calculated via HaplowebMaker version ")
        printer.printString(mj_MJAlgo.version)
        printer.printString(printer.newline)
        c = self.first
        while (c is not None):
            printer.printString(("SAMPLED_SEQUENCE" if (c.isSample) else "MEDIAN_VECTOR"))
            printer.printString(printer.newline)
            printer.printString(printer.indent)
            printer.printString("ID ")
            printer.printString(("" + Std.string(c.id)))
            printer.printString(printer.newline)
            if c.isSample:
                printer.printString(printer.indent)
                printer.printString("FFR_ID ")
                printer.printString(("" + Std.string(c.spId)))
                printer.printString(printer.newline)
            printer.printString(printer.indent)
            printer.printString("SEQUENCE ")
            printer.printString(("" + HxOverrides.stringOrNull(c.origSeq)))
            printer.printString(printer.newline)
            if ((c.names is not None) and ((c.names.length > 0))):
                printer.printString(printer.indent)
                printer.printString("NB_NAMES ")
                printer.printString(("" + Std.string(c.names.length)))
                printer.printString(printer.newline)
                printer.printString(printer.indent)
                printer.printString("NAMES")
                printer.printString(printer.newline)
                _g_head = c.names.h
                while (_g_head is not None):
                    val = _g_head.item
                    _g_head = _g_head.next
                    name = val
                    printer.printString(printer.indent)
                    printer.printString(printer.indent)
                    printer.printString(name)
                    printer.printString(printer.newline)
            if ((c.connectedTo is not None) and ((c.nrConnections > 0))):
                printer.printString(printer.indent)
                printer.printString("CONNECTED_TO ")
                printer.printString(printer.newline)
                con = c.connectedTo
                while (con is not None):
                    printer.printString(printer.indent)
                    printer.printString(printer.indent)
                    printer.printString(("ID " + Std.string(con.connectedTo.id)))
                    printer.printString(((" COSTS " + Std.string(con.dist)) + " @"))
                    _g1 = 0
                    _g = len(c.origSeq)
                    while (_g1 < _g):
                        pos = _g1
                        _g1 = (_g1 + 1)
                        _this = c.origSeq
                        tmp = ("" if (((pos < 0) or ((pos >= len(_this))))) else _this[pos])
                        _this1 = con.connectedTo.origSeq
                        if (tmp != (("" if (((pos < 0) or ((pos >= len(_this1))))) else _this1[pos]))):
                            printer.printString((" " + Std.string(((pos + printer.countingOffset)))))
                    printer.printString(printer.newline)
                    con = con.next
            if ((c.linkedTo is not None) and ((c.linkedTo.length > 0))):
                printer.printString(printer.indent)
                printer.printString("LINKED_TO ")
                printer.printString(printer.newline)
                _g_head1 = c.linkedTo.h
                while (_g_head1 is not None):
                    val1 = _g_head1.item
                    _g_head1 = _g_head1.next
                    link = val1
                    printer.printString(printer.indent)
                    printer.printString(printer.indent)
                    printer.printString(((("ID " + Std.string(link.to.id)) + " COUNT ") + Std.string(link.names.length)))
                    printer.printString(printer.newline)
            c = c.next
        printer.close()

    def printOldTxt(self,printer):
        printer.printString("+")
        _g_head = self.ipos.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            e = val
            printer.printString((" " + Std.string(e)))
        printer.printString(printer.newline)
        c = self.first
        while (c is not None):
            printer.printString(((("+NODE " + Std.string(((c.id - 1)))) + " ") + Std.string(((0 if ((c.names is None)) else c.names.length)))))
            printer.printString(printer.newline)
            if ((c.names is not None) and ((c.names.length > 0))):
                _g_head1 = c.names.h
                while (_g_head1 is not None):
                    val1 = _g_head1.item
                    _g_head1 = _g_head1.next
                    name = val1
                    printer.printString("NAME ")
                    printer.printString(name)
                    printer.printString(printer.newline)
            printer.printString(("SEQ " + HxOverrides.stringOrNull(c.origSeq)))
            printer.printString(printer.newline)
            c = c.next
        c1 = self.first
        while (c1 is not None):
            if ((c1.connectedTo is not None) and ((c1.nrConnections > 0))):
                con = c1.connectedTo
                while (con is not None):
                    if (c1.id < con.connectedTo.id):
                        l = List()
                        _g1 = 0
                        _g = len(c1.origSeq)
                        while (_g1 < _g):
                            pos = _g1
                            _g1 = (_g1 + 1)
                            _this = c1.origSeq
                            tmp = ("" if (((pos < 0) or ((pos >= len(_this))))) else _this[pos])
                            _this1 = con.connectedTo.origSeq
                            if (tmp != (("" if (((pos < 0) or ((pos >= len(_this1))))) else _this1[pos]))):
                                l.add(pos)
                        printer.printString(((((((("+CON " + Std.string(((c1.id - 1)))) + " ") + Std.string(((con.connectedTo.id - 1)))) + " ") + Std.string(con.dist)) + " ") + Std.string(l.length)))
                        printer.printString(printer.newline)
                        printer.printString("POS")
                        _g_head2 = l.h
                        while (_g_head2 is not None):
                            val2 = _g_head2.item
                            _g_head2 = _g_head2.next
                            e1 = val2
                            printer.printString((" " + Std.string(e1)))
                        printer.printString(printer.newline)
                    con = con.next
            if ((c1.linkedTo is not None) and ((c1.linkedTo.length > 0))):
                _g_head3 = c1.linkedTo.h
                while (_g_head3 is not None):
                    val3 = _g_head3.item
                    _g_head3 = _g_head3.next
                    link = val3
                    if ((c1.id - 1) > ((link.to.id - 1))):
                        printer.printString(((((((((("+LINK " + Std.string(((c1.id - 1)))) + " ") + Std.string(((link.to.id - 1)))) + " ") + Std.string(link.names.length)) + " ") + Std.string(link.names.length)) + " ") + Std.string(link.names.length)))
                        printer.printString(printer.newline)
            c1 = c1.next



class parsing_FastaParser:
    _hx_class_name = "parsing.FastaParser"
    __slots__ = ()
    _hx_statics = ["parseFasta", "main"]

    @staticmethod
    def parseFasta(fileContent):
        faSeqs = List()
        lines = fileContent.split("\n")
        header = None
        content = None
        lineNo = 0
        _g = 0
        while (_g < len(lines)):
            line = (lines[_g] if _g >= 0 and _g < len(lines) else None)
            _g = (_g + 1)
            lineNo = (lineNo + 1)
            end = len(line)
            while True:
                line1 = None
                if (end > 0):
                    cCode = HxString.charCodeAt(line,(end - 1))
                    result = False
                    _g1 = 0
                    _g11 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g1 < len(_g11)):
                        ele = (_g11[_g1] if _g1 >= 0 and _g1 < len(_g11) else None)
                        _g1 = (_g1 + 1)
                        if (ele == cCode):
                            result = True
                            break
                    line1 = result
                else:
                    line1 = False
                if (not line1):
                    break
                end = (end - 1)
            s = HxString.substring(line,0,end)
            begin = 0
            sLen = len(s)
            while True:
                line2 = None
                if (begin < sLen):
                    cCode1 = HxString.charCodeAt(s,begin)
                    result1 = False
                    _g2 = 0
                    _g12 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g2 < len(_g12)):
                        ele1 = (_g12[_g2] if _g2 >= 0 and _g2 < len(_g12) else None)
                        _g2 = (_g2 + 1)
                        if (ele1 == cCode1):
                            result1 = True
                            break
                    line2 = result1
                else:
                    line2 = False
                if (not line2):
                    break
                begin = (begin + 1)
            line = HxString.substr(s,begin,None)
            if ((((line is None) or ((line == ""))) or (((("" if ((0 >= len(line))) else line[0])) == ";"))) or (((("" if ((0 >= len(line))) else line[0])) == "#"))):
                continue
            if ((("" if ((0 >= len(line))) else line[0])) == ">"):
                if (header is not None):
                    if (content is None):
                        raise _HxException(((("Missing content for sequence \"" + ("null" if header is None else header)) + "\" in line ") + Std.string(lineNo)))
                    faSeqs.add(util_Pair(header,content))
                elif (content is not None):
                    raise _HxException(("Missing header for content previous to line " + Std.string(lineNo)))
                s1 = HxString.substr(line,1,None)
                begin1 = 0
                sLen1 = len(s1)
                while True:
                    header1 = None
                    if (begin1 < sLen1):
                        cCode2 = HxString.charCodeAt(s1,begin1)
                        result2 = False
                        _g3 = 0
                        _g13 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                        while (_g3 < len(_g13)):
                            ele2 = (_g13[_g3] if _g3 >= 0 and _g3 < len(_g13) else None)
                            _g3 = (_g3 + 1)
                            if (ele2 == cCode2):
                                result2 = True
                                break
                        header1 = result2
                    else:
                        header1 = False
                    if (not header1):
                        break
                    begin1 = (begin1 + 1)
                header = HxString.substr(s1,begin1,None)
                content = None
            elif (content is None):
                content = line
            else:
                content = (("null" if content is None else content) + ("null" if line is None else line))
        if (header is not None):
            if (content is None):
                raise _HxException(((("Missing content for sequence \"" + ("null" if header is None else header)) + "\" in line ") + Std.string(lineNo)))
            faSeqs.add(util_Pair(header,content))
        return faSeqs

    @staticmethod
    def main():
        pass


class parsing_Parse:
    _hx_class_name = "parsing.Parse"
    __slots__ = ()
    _hx_statics = ["startsWith", "isWhitespace", "stripStringBegin", "stripStringEnd", "stripString"]

    @staticmethod
    def startsWith(t,s):
        return (HxString.substr(t,0,len(s)) == s)

    @staticmethod
    def isWhitespace(s,pos):
        cCode = HxString.charCodeAt(s,pos)
        result = False
        _g = 0
        _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
        while (_g < len(_g1)):
            ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (ele == cCode):
                result = True
                break
        return result

    @staticmethod
    def stripStringBegin(s):
        begin = 0
        sLen = len(s)
        while True:
            tmp = None
            if (begin < sLen):
                cCode = HxString.charCodeAt(s,begin)
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            begin = (begin + 1)
        return HxString.substr(s,begin,None)

    @staticmethod
    def stripStringEnd(s):
        end = len(s)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(s,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        return HxString.substring(s,0,end)

    @staticmethod
    def stripString(s):
        end = len(s)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(s,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        s1 = HxString.substring(s,0,end)
        begin = 0
        sLen = len(s1)
        while True:
            tmp1 = None
            if (begin < sLen):
                cCode1 = HxString.charCodeAt(s1,begin)
                result1 = False
                _g2 = 0
                _g11 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g2 < len(_g11)):
                    ele1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                    _g2 = (_g2 + 1)
                    if (ele1 == cCode1):
                        result1 = True
                        break
                tmp1 = result1
            else:
                tmp1 = False
            if (not tmp1):
                break
            begin = (begin + 1)
        return HxString.substr(s1,begin,None)


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        field1 = field
        _hx_local_0 = len(field1)
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        this1 = python_Lib.anonAsDict(d)
        return this1


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["print", "println", "anonToDict", "anonAsDict", "dictAsAnon"]

    @staticmethod
    def print(v):
        _hx_str = Std.string(v)
        python_lib_Sys.stdout.buffer.write(_hx_str.encode("utf-8", "strict"))
        python_lib_Sys.stdout.flush()

    @staticmethod
    def println(v):
        _hx_str = Std.string(v)
        python_lib_Sys.stdout.buffer.write((("" + ("null" if _hx_str is None else _hx_str)) + "\n").encode("utf-8", "strict"))
        python_lib_Sys.stdout.flush()

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None

    @staticmethod
    def dictAsAnon(d):
        return _hx_AnonObject(d)


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        return float('nan') if (b == 0.0) else a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mod(a,b):
        return a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mapKwArgs(a,v):
        a1 = python_Lib.dictAsAnon(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if hasattr(a1,k1):
                x = getattr(a1,k1)
                setattr(a1,val,x)
                delattr(a1,k1)
        return a1


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self.wasEof = None
        self.stream = s
        self.set_bigEndian(False)
        self.wasEof = False
        if (not self.stream.readable()):
            raise _HxException("Write-only stream")



class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian"]


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        self.stream = None
        self.set_bigEndian(False)
        self.stream = stream
        if (not stream.writable()):
            raise _HxException("Read only stream")



class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "writeFullBytes", "writeString"]


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeByte"]
    _hx_statics = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        super().__init__(stream)
        if (not stream.writable()):
            raise _HxException("Read only stream")

    def writeByte(self,c):
        self.stream.write("".join(map(chr,[c])))



class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText", "createFileOutputFromText"]

    @staticmethod
    def createFileInputFromText(t):
        return sys_io_FileInput(python_io_FileTextInput(t))

    @staticmethod
    def createFileOutputFromText(t):
        return sys_io_FileOutput(python_io_FileTextOutput(t))


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["getContent"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian"]
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)



class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "writeFullBytes", "writeString"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def writeByte(self,c):
        self.impl.writeByte(c)

    def writeBytes(self,s,pos,_hx_len):
        return self.impl.writeBytes(s,pos,_hx_len)

    def writeFullBytes(self,s,pos,_hx_len):
        self.impl.writeFullBytes(s,pos,_hx_len)

    def writeString(self,s):
        self.impl.writeString(s)



class util_Pair:
    _hx_class_name = "util.Pair"
    __slots__ = ("first", "second")
    _hx_fields = ["first", "second"]
    _hx_methods = ["swapFirst", "swapSecond", "swap"]

    def __init__(self,u,v):
        self.second = None
        self.first = None
        self.first = u
        self.second = v

    def swapFirst(self,p):
        tmp = self.first
        self.first = p.first
        p.first = tmp

    def swapSecond(self,p):
        tmp = self.second
        self.second = p.second
        p.second = tmp

    def swap(self,p):
        self.swapFirst(p)
        self.swapSecond(p)



class util_StdOutPrinter:
    _hx_class_name = "util.StdOutPrinter"
    __slots__ = ("countingOffset", "newline", "indent")
    _hx_fields = ["countingOffset", "newline", "indent"]
    _hx_methods = ["printString", "close"]

    def __init__(self):
        self.indent = "  "
        self.newline = "\n"
        self.countingOffset = 1

    def printString(self,s):
        Sys.stdout().writeString(s)

    def close(self):
        pass


Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

def _hx_init_Sys_environ():
    def _hx_local_0():
        Sys.environ = haxe_ds_StringMap()
        env = python_lib_Os.environ
        key = python_HaxeIterator(iter(env.keys()))
        while key.hasNext():
            key1 = key.next()
            _this = Sys.environ
            value = env.get(key1,None)
            _this.h[key1] = value
        return Sys.environ
    return _hx_local_0()
Sys.environ = _hx_init_Sys_environ()
Sys._programPath = sys_FileSystem.fullPath(python_lib_Inspect.getsourcefile(Sys))
mj_MJAlgo.version = "1.0.2"
mj_Seq.delimiter = "_"
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

mj_MJ.main()