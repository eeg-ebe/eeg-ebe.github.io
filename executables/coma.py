# Generated by Haxe 3.4.2 (git build master @ 890f8c7)
# coding: utf-8

import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import os as python_lib_Os
import builtins as python_lib_Builtins
import functools as python_lib_Functools
try:
    import msvcrt as python_lib_Msvcrt
except:
    pass
import random as python_lib_Random
import subprocess as python_lib_Subprocess
import sys as python_lib_Sys
try:
    import termios as python_lib_Termios
except:
    pass
import time as python_lib_Time
import timeit as python_lib_Timeit
try:
    import tty as python_lib_Tty
except:
    pass


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class CoMa:
    _hx_class_name = "CoMa"
    __slots__ = ()
    _hx_statics = ["cToCol", "runComaJS", "runComa", "runComaFromPartition", "parsePartitionFile", "main"]

    @staticmethod
    def cToCol(v,maxV,minV):
        divVal = ((maxV - minV) if ((maxV != minV)) else 0.01)
        h = HxOverrides.modf(((240. - (((((v - minV)) / divVal) * -120.0)))), 360)
        s = 0.5
        l = 0.5
        r = -1
        g = -1
        b = -1
        c = (((1 - Reflect.field(Math,"fabs")(((l * 2) - 1)))) * s)
        h_ = (h / 60)
        x = (c * ((1 - Reflect.field(Math,"fabs")((HxOverrides.modf(h_, 2) - 1)))))
        m = (l - ((c / 2)))
        if ((0 <= h_) and ((h_ <= 1))):
            r = c
            g = x
            b = 0
        elif ((1 <= h_) and ((h_ <= 2))):
            r = x
            g = c
            b = 0
        elif ((2 <= h_) and ((h_ <= 3))):
            r = 0
            g = c
            b = x
        elif ((3 <= h_) and ((h_ <= 4))):
            r = 0
            g = x
            b = c
        elif ((4 <= h_) and ((h_ <= 5))):
            r = x
            g = 0
            b = c
        elif ((5 <= h_) and ((h_ <= 6))):
            r = c
            g = 0
            b = x
        r = (((r + m)) * 256)
        g = (((g + m)) * 256)
        b = (((b + m)) * 256)
        tmp = None
        try:
            tmp = int(r)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            tmp = None
        tmp1 = (("rgb(" + Std.string(tmp)) + ",")
        tmp2 = None
        try:
            tmp2 = int(g)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            tmp2 = None
        tmp3 = ((("null" if tmp1 is None else tmp1) + Std.string(tmp2)) + ",")
        tmp4 = None
        try:
            tmp4 = int(b)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e2 = _hx_e1
            tmp4 = None
        return ((("null" if tmp3 is None else tmp3) + Std.string(tmp4)) + ")")

    @staticmethod
    def runComaJS(a,printer,printer2,printer3,namesOfMarkerFiles):
        l = List()
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            l.add(parsing_LstParser.parseLst((a[i] if i >= 0 and i < len(a) else None)))
        CoMa.runComa(l,printer,printer2,printer3,namesOfMarkerFiles)

    @staticmethod
    def runComa(l,printer,printer2,printer3,namesOfMarkerFiles):
        comaIndL = List()
        index = 0
        _g_head = l.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            lp = val
            _g_head1 = lp.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                p = val1
                found = False
                _g_head2 = comaIndL.h
                while (_g_head2 is not None):
                    val2 = _g_head2.item
                    _g_head2 = _g_head2.next
                    comaInd = val2
                    if (comaInd.indName == p.first):
                        comaInd.setSpResultOf(index,Std.parseInt(p.second))
                        found = True
                        break
                if (not found):
                    newCoMaInd = CoMaInd(p.first,l.length)
                    newCoMaInd.setSpResultOf(index,Std.parseInt(p.second))
                    comaIndL.add(newCoMaInd)
            index = (index + 1)
        printer3.printString("Individual")
        _g1 = 0
        _g = len(comaIndL.first().vals)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            printer3.printString("\t")
            printer3.printString((namesOfMarkerFiles[i] if i >= 0 and i < len(namesOfMarkerFiles) else None))
        printer3.printString("\n")
        _g_head3 = comaIndL.h
        while (_g_head3 is not None):
            val3 = _g_head3.item
            _g_head3 = _g_head3.next
            ind = val3
            printer3.printString(ind.indName)
            _g2 = 0
            _g11 = ind.vals
            while (_g2 < len(_g11)):
                val4 = _g11[_g2]
                _g2 = (_g2 + 1)
                printer3.printString(("\t" + Std.string(val4)))
            printer3.printString("\n")
        printer3.close()
        CoMa.runComaFromPartition(comaIndL,printer,printer2)

    @staticmethod
    def runComaFromPartition(comaIndL,printer,printer2):
        orderedL = List()
        highestVal = Math.NEGATIVE_INFINITY
        lowestVal = Math.POSITIVE_INFINITY
        if (comaIndL.length == 0):
            highestVal = 0
            lowestVal = 0
        elif (comaIndL.length == 1):
            orderedL.add(comaIndL.pop())
            highestVal = 0
            lowestVal = 0
        elif (comaIndL.length == 2):
            orderedL.add(comaIndL.pop())
            orderedL.add(comaIndL.pop())
            highestVal = orderedL.first().compare(orderedL.last())
            lowestVal = highestVal
        else:
            bestDist = Math.NEGATIVE_INFINITY
            bestE1 = None
            bestE2 = None
            _g_head = comaIndL.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                e1 = val
                _g_head1 = comaIndL.h
                while (_g_head1 is not None):
                    val1 = _g_head1.item
                    _g_head1 = _g_head1.next
                    e2 = val1
                    dist = e1.compare(e2)
                    if (e1 != e2):
                        if (dist > bestDist):
                            bestDist = dist
                            bestE1 = e1
                            bestE2 = e2
                    if python_lib_Math.isnan(highestVal):
                        highestVal = highestVal
                    elif python_lib_Math.isnan(dist):
                        highestVal = dist
                    else:
                        highestVal = max(highestVal,dist)
                    if python_lib_Math.isnan(lowestVal):
                        lowestVal = lowestVal
                    elif python_lib_Math.isnan(dist):
                        lowestVal = dist
                    else:
                        lowestVal = min(lowestVal,dist)
            comaIndL.remove(bestE1)
            comaIndL.remove(bestE2)
            orderedL.add(bestE1)
            orderedL.add(bestE2)
            while (not comaIndL.isEmpty()):
                bestDistFirst = Math.NEGATIVE_INFINITY
                bestDistLast = Math.NEGATIVE_INFINITY
                bestEFirst = None
                bestELast = None
                _g_head2 = comaIndL.h
                while (_g_head2 is not None):
                    val2 = _g_head2.item
                    _g_head2 = _g_head2.next
                    e = val2
                    distFirst = e.compare(orderedL.first())
                    distLast = e.compare(orderedL.last())
                    if (distFirst > bestDistFirst):
                        bestDistFirst = distFirst
                        bestEFirst = e
                    if (distLast > bestDistLast):
                        bestDistLast = distLast
                        bestELast = e
                if (bestDistFirst > bestDistLast):
                    comaIndL.remove(bestEFirst)
                    orderedL.push(bestEFirst)
                else:
                    comaIndL.remove(bestELast)
                    orderedL.add(bestELast)
        _g_head3 = orderedL.h
        while (_g_head3 is not None):
            val3 = _g_head3.item
            _g_head3 = _g_head3.next
            e3 = val3
            printer2.printString(("\t" + HxOverrides.stringOrNull(e3.indName)))
        printer2.printString("\n")
        _g_head4 = orderedL.h
        while (_g_head4 is not None):
            val4 = _g_head4.item
            _g_head4 = _g_head4.next
            e11 = val4
            printer2.printString(e11.indName)
            _g_head5 = orderedL.h
            while (_g_head5 is not None):
                val5 = _g_head5.item
                _g_head5 = _g_head5.next
                e21 = val5
                dist1 = e11.compare(e21)
                printer2.printString(("\t" + Std.string(dist1)))
            printer2.printString("\n")
        width = ((100 + ((orderedL.length * 20))) + 5)
        height = ((100 + ((orderedL.length * 20))) + 5)
        printer.printString((((("<svg version=\"1.1\" baseProfile=\"full\" width=\"" + Std.string(width)) + "\" height=\"") + Std.string(height)) + "\" xmlns=\"http://www.w3.org/2000/svg\">"))
        printer.printString("<g style=\"font-family:serif;font-size:16\">")
        index = 0
        _g_head6 = orderedL.h
        while (_g_head6 is not None):
            val6 = _g_head6.item
            _g_head6 = _g_head6.next
            e4 = val6
            printer.printString((((("<text x=\"5\" y=\"" + Std.string((((100 + ((20 * index))) + 15)))) + "\">") + HxOverrides.stringOrNull(e4.indName)) + "</text>"))
            printer.printString((((((("<text x=\"" + Std.string((((100 + ((20 * index))) + 15)))) + "\" y=\"5\" transform=\"rotate(90 ") + Std.string((((100 + ((20 * index))) + 7)))) + " 5)\">") + HxOverrides.stringOrNull(e4.indName)) + "</text>"))
            index = (index + 1)
        printer.printString("</g>")
        i = 0
        j = 0
        _g_head7 = orderedL.h
        while (_g_head7 is not None):
            val7 = _g_head7.item
            _g_head7 = _g_head7.next
            e12 = val7
            _g_head8 = orderedL.h
            while (_g_head8 is not None):
                val8 = _g_head8.item
                _g_head8 = _g_head8.next
                e22 = val8
                dist2 = e12.compare(e22)
                printer.printString((((((("<rect x=\"" + Std.string(((100 + ((20 * i)))))) + "\" y=\"") + Std.string(((100 + ((20 * j)))))) + "\" width=\"20\" height=\"20\" fill=\"") + HxOverrides.stringOrNull(CoMa.cToCol(dist2,highestVal,lowestVal))) + "\"/>"))
                j = (j + 1)
            j = 0
            i = (i + 1)
        printer.printString("</svg>")
        printer.close()
        printer2.close()

    @staticmethod
    def parsePartitionFile(fileContent):
        comaIndL = List()
        lines = fileContent.split("\n")
        lineNo = 0
        _g = 0
        while (_g < len(lines)):
            line = (lines[_g] if _g >= 0 and _g < len(lines) else None)
            _g = (_g + 1)
            lineNo = (lineNo + 1)
            parts = line.split("\t")
            if (((line is None) or ((line == ""))) or ((lineNo == 1))):
                continue
            newCoMaInd = CoMaInd((parts[0] if 0 < len(parts) else None),(len(parts) - 1))
            _g2 = 1
            _g1 = len(parts)
            while (_g2 < _g1):
                index = _g2
                _g2 = (_g2 + 1)
                newCoMaInd.setSpResultOf((index - 1),Std.parseInt((parts[index] if index >= 0 and index < len(parts) else None)))
            comaIndL.add(newCoMaInd)
        return comaIndL

    @staticmethod
    def main():
        myArgs = Sys.args()
        if (len(myArgs) == 0):
            print("Please specify at least one file")
        elif (len(myArgs) == 1):
            fileContent = sys_io_File.getContent((myArgs[0] if 0 < len(myArgs) else None))
            comaIndL = CoMa.parsePartitionFile(fileContent)
            printer2 = util_NullPrinter()
            printer = util_StdOutPrinter()
            CoMa.runComaFromPartition(comaIndL,printer,printer2)
        else:
            l = List()
            namesOfMarkerFiles = list()
            _g1 = 0
            _g = len(myArgs)
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                fileContent1 = sys_io_File.getContent((myArgs[i] if i >= 0 and i < len(myArgs) else None))
                listOfPairs = List()
                lines = fileContent1.split("\n")
                lineNo = 0
                _g2 = 0
                while (_g2 < len(lines)):
                    line = (lines[_g2] if _g2 >= 0 and _g2 < len(lines) else None)
                    _g2 = (_g2 + 1)
                    lineNo = (lineNo + 1)
                    parts = line.split("\t")
                    if ((line is None) or ((line == ""))):
                        continue
                    listOfPairs.add(util_Pair((parts[0] if 0 < len(parts) else None),(parts[1] if 1 < len(parts) else None)))
                l.add(listOfPairs)
                namesOfMarkerFiles.append("")
            printer21 = util_NullPrinter()
            printer3 = util_NullPrinter()
            printer1 = util_StdOutPrinter()
            CoMa.runComa(l,printer1,printer21,printer3,namesOfMarkerFiles)


class CoMaInd:
    _hx_class_name = "CoMaInd"
    __slots__ = ("indName", "vals")
    _hx_fields = ["indName", "vals"]
    _hx_methods = ["setSpResultOf", "compare"]

    def __init__(self,s,l):
        self.indName = s
        this1 = [None]*l
        self.vals = this1
        _g1 = 0
        _g = l
        while (_g1 < _g):
            index = _g1
            _g1 = (_g1 + 1)
            self.vals[index] = -1

    def setSpResultOf(self,i,sp):
        self.vals[i] = sp

    def compare(self,other):
        result = 0
        _g1 = 0
        _g = len(self.vals)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if ((self.vals[i] == -1) or ((other.vals[i] == -1))):
                continue
            if (self.vals[i] == other.vals[i]):
                result = (result + 1)
            else:
                result = (result - 1)
        return result



class EnumValue:
    _hx_class_name = "EnumValue"


class List:
    _hx_class_name = "List"
    __slots__ = ("h", "q", "length")
    _hx_fields = ["h", "q", "length"]
    _hx_methods = ["add", "push", "first", "last", "pop", "isEmpty", "remove"]

    def __init__(self):
        self.q = None
        self.h = None
        self.length = 0

    def add(self,item):
        x = _List_ListNode(item,None)
        if (self.h is None):
            self.h = x
        else:
            self.q.next = x
        self.q = x
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 + 1)
        _hx_local_1

    def push(self,item):
        x = _List_ListNode(item,self.h)
        self.h = x
        if (self.q is None):
            self.q = x
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 + 1)
        _hx_local_1

    def first(self):
        if (self.h is None):
            return None
        else:
            return self.h.item

    def last(self):
        if (self.q is None):
            return None
        else:
            return self.q.item

    def pop(self):
        if (self.h is None):
            return None
        x = self.h.item
        self.h = self.h.next
        if (self.h is None):
            self.q = None
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 - 1)
        _hx_local_1
        return x

    def isEmpty(self):
        return (self.h is None)

    def remove(self,v):
        prev = None
        l = self.h
        while (l is not None):
            if (l.item == v):
                if (prev is None):
                    self.h = l.next
                else:
                    prev.next = l.next
                if (self.q == l):
                    self.q = prev
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.length
                _hx_local_0.length = (_hx_local_1 - 1)
                _hx_local_1
                return True
            prev = l
            l = l.next
        return False



class _List_ListNode:
    _hx_class_name = "_List.ListNode"
    __slots__ = ("item", "next")
    _hx_fields = ["item", "next"]

    def __init__(self,item,next):
        self.item = item
        self.next = next



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                prefix = HxString.substr(x,0,2).lower()
                if (prefix == "0x"):
                    return int(x,16)
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                if (r is None):
                    r1 = Std.shortenPossibleNumber(x)
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g21 = _g2
                if (((((((((((_g21 == 57) or ((_g21 == 56))) or ((_g21 == 55))) or ((_g21 == 54))) or ((_g21 == 53))) or ((_g21 == 52))) or ((_g21 == 51))) or ((_g21 == 50))) or ((_g21 == 49))) or ((_g21 == 48))) or ((_g21 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["startsWith"]

    @staticmethod
    def startsWith(s,start):
        if (len(s) >= len(start)):
            return (HxString.substr(s,0,len(start)) == start)
        else:
            return False


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["fullPath"]

    @staticmethod
    def fullPath(relPath):
        return python_lib_os_Path.realpath(relPath)


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]

    def __init__(self):
        self.h = dict()



class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["environ", "time", "exit", "print", "println", "args", "getEnv", "putEnv", "environment", "sleep", "setTimeLocale", "getCwd", "setCwd", "systemName", "command", "cpuTime", "executablePath", "_programPath", "programPath", "getChar", "stdin", "stdout", "stderr"]

    @staticmethod
    def time():
        return python_lib_Time.time()

    @staticmethod
    def exit(code):
        python_lib_Sys.exit(code)

    @staticmethod
    def print(v):
        python_Lib.print(v)

    @staticmethod
    def println(v):
        python_Lib.println(v)

    @staticmethod
    def args():
        argv = python_lib_Sys.argv
        return argv[1:None]

    @staticmethod
    def getEnv(s):
        return Sys.environ.h.get(s,None)

    @staticmethod
    def putEnv(s,v):
        python_lib_Os.putenv(s,v)
        Sys.environ.h[s] = v

    @staticmethod
    def environment():
        return Sys.environ

    @staticmethod
    def sleep(seconds):
        python_lib_Time.sleep(seconds)

    @staticmethod
    def setTimeLocale(loc):
        return False

    @staticmethod
    def getCwd():
        return python_lib_Os.getcwd()

    @staticmethod
    def setCwd(s):
        python_lib_Os.chdir(s)

    @staticmethod
    def systemName():
        _g = python_lib_Sys.platform
        x = _g
        if StringTools.startsWith(x,"linux"):
            return "Linux"
        else:
            _g1 = _g
            _hx_local_0 = len(_g1)
            if (_hx_local_0 == 5):
                if (_g1 == "win32"):
                    return "Windows"
                else:
                    raise _HxException("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g1 == "cygwin"):
                    return "Windows"
                elif (_g1 == "darwin"):
                    return "Mac"
                else:
                    raise _HxException("not supported platform")
            else:
                raise _HxException("not supported platform")

    @staticmethod
    def command(cmd,args = None):
        if (args is None):
            return python_lib_Subprocess.call(cmd,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'shell': True})))
        else:
            return python_lib_Subprocess.call(([cmd] + args))

    @staticmethod
    def cpuTime():
        return python_lib_Timeit.default_timer()

    @staticmethod
    def executablePath():
        return python_internal_ArrayImpl._get(python_lib_Sys.argv, 0)

    @staticmethod
    def programPath():
        return Sys._programPath

    @staticmethod
    def getChar(echo):
        ch = None
        _g = Sys.systemName()
        _g1 = _g
        _hx_local_0 = len(_g1)
        if (_hx_local_0 == 5):
            if (_g1 == "Linux"):
                fd = python_lib_Sys.stdin.fileno()
                old = python_lib_Termios.tcgetattr(fd)
                a1 = fd
                a2 = python_lib_Termios.TCSADRAIN
                a3 = old
                def _hx_local_1():
                    python_lib_Termios.tcsetattr(a1,a2,a3)
                restore = _hx_local_1
                try:
                    python_lib_Tty.setraw(fd)
                    x = python_lib_Sys.stdin.read(1)
                    restore()
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    restore()
                    raise _HxException(e)
            else:
                x1 = _g
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        elif (_hx_local_0 == 3):
            if (_g1 == "Mac"):
                fd = python_lib_Sys.stdin.fileno()
                old = python_lib_Termios.tcgetattr(fd)
                a1 = fd
                a2 = python_lib_Termios.TCSADRAIN
                a3 = old
                def _hx_local_2():
                    python_lib_Termios.tcsetattr(a1,a2,a3)
                restore = _hx_local_2
                try:
                    python_lib_Tty.setraw(fd)
                    x = python_lib_Sys.stdin.read(1)
                    restore()
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    restore()
                    raise _HxException(e)
            else:
                x1 = _g
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        elif (_hx_local_0 == 7):
            if (_g1 == "Windows"):
                ch = HxString.charCodeAt(python_lib_Msvcrt.getch().decode("utf-8"),0)
            else:
                x1 = _g
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        else:
            x1 = _g
            raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        if echo:
            python_Lib.print("".join(map(chr,[ch])))
        return ch

    @staticmethod
    def stdin():
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

    @staticmethod
    def stdout():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stdout)

    @staticmethod
    def stderr():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stderr)


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_statics = ["ofString"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    @staticmethod
    def ofString(s):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)



class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian"]

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b



class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def toString(self):
        return "Eof"


class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "set_bigEndian", "writeFullBytes", "writeString"]

    def writeByte(self,c):
        raise _HxException("Not implemented")

    def writeBytes(self,s,pos,_hx_len):
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        b = s.b
        k = _hx_len
        while (k > 0):
            self.writeByte(b[pos])
            pos = (pos + 1)
            k = (k - 1)
        return _hx_len

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def writeFullBytes(self,s,pos,_hx_len):
        while (_hx_len > 0):
            k = self.writeBytes(s,pos,_hx_len)
            pos = (pos + k)
            _hx_len = (_hx_len - k)

    def writeString(self,s):
        b = haxe_io_Bytes.ofString(s)
        self.writeFullBytes(b,0,b.length)



class interfaces_Printer:
    _hx_class_name = "interfaces.Printer"
    __slots__ = ("countingOffset", "newline", "indent")
    _hx_fields = ["countingOffset", "newline", "indent"]
    _hx_methods = ["printString", "close"]

    def __init__(self):
        self.indent = "  "
        self.newline = "\n"
        self.countingOffset = 1


class parsing_LstParser:
    _hx_class_name = "parsing.LstParser"
    __slots__ = ()
    _hx_statics = ["parseLst"]

    @staticmethod
    def parseLst(fileContent):
        result = List()
        lines = fileContent.split("\n")
        lineNo = 0
        _g = 0
        while (_g < len(lines)):
            line = (lines[_g] if _g >= 0 and _g < len(lines) else None)
            _g = (_g + 1)
            lineNo = (lineNo + 1)
            if (((line is None) or ((line == ""))) or (((("" if ((0 >= len(line))) else line[0])) == "#"))):
                continue
            pos = line.rfind("\t", 0, len(line))
            if (pos == -1):
                raise _HxException(("Missing tab character in line " + Std.string(lineNo)))
            name = HxString.substring(line,0,pos)
            end = len(name)
            while True:
                name1 = None
                if (end > 0):
                    cCode = HxString.charCodeAt(name,(end - 1))
                    result1 = False
                    _g1 = 0
                    _g11 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g1 < len(_g11)):
                        ele = (_g11[_g1] if _g1 >= 0 and _g1 < len(_g11) else None)
                        _g1 = (_g1 + 1)
                        if (ele == cCode):
                            result1 = True
                            break
                    name1 = result1
                else:
                    name1 = False
                if (not name1):
                    break
                end = (end - 1)
            s = HxString.substring(name,0,end)
            begin = 0
            sLen = len(s)
            while True:
                name2 = None
                if (begin < sLen):
                    cCode1 = HxString.charCodeAt(s,begin)
                    result2 = False
                    _g2 = 0
                    _g12 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g2 < len(_g12)):
                        ele1 = (_g12[_g2] if _g2 >= 0 and _g2 < len(_g12) else None)
                        _g2 = (_g2 + 1)
                        if (ele1 == cCode1):
                            result2 = True
                            break
                    name2 = result2
                else:
                    name2 = False
                if (not name2):
                    break
                begin = (begin + 1)
            name = HxString.substr(s,begin,None)
            _hx_chr = HxString.substring(line,(pos + 1),None)
            end1 = len(_hx_chr)
            while True:
                chr1 = None
                if (end1 > 0):
                    cCode2 = HxString.charCodeAt(_hx_chr,(end1 - 1))
                    result3 = False
                    _g3 = 0
                    _g13 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g3 < len(_g13)):
                        ele2 = (_g13[_g3] if _g3 >= 0 and _g3 < len(_g13) else None)
                        _g3 = (_g3 + 1)
                        if (ele2 == cCode2):
                            result3 = True
                            break
                    chr1 = result3
                else:
                    chr1 = False
                if (not chr1):
                    break
                end1 = (end1 - 1)
            s1 = HxString.substring(_hx_chr,0,end1)
            begin1 = 0
            sLen1 = len(s1)
            while True:
                chr2 = None
                if (begin1 < sLen1):
                    cCode3 = HxString.charCodeAt(s1,begin1)
                    result4 = False
                    _g4 = 0
                    _g14 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                    while (_g4 < len(_g14)):
                        ele3 = (_g14[_g4] if _g4 >= 0 and _g4 < len(_g14) else None)
                        _g4 = (_g4 + 1)
                        if (ele3 == cCode3):
                            result4 = True
                            break
                    chr2 = result4
                else:
                    chr2 = False
                if (not chr2):
                    break
                begin1 = (begin1 + 1)
            _hx_chr = HxString.substr(s1,begin1,None)
            if ((((name is None) or ((name == ""))) or ((_hx_chr is None))) or ((_hx_chr == ""))):
                raise _HxException(("Error in line " + Std.string(lineNo)))
            result.add(util_Pair(name,_hx_chr))
        return result


class parsing_Parse:
    _hx_class_name = "parsing.Parse"
    __slots__ = ()
    _hx_statics = ["startsWith", "isWhitespace", "stripStringBegin", "stripStringEnd", "stripString"]

    @staticmethod
    def startsWith(t,s):
        return (HxString.substr(t,0,len(s)) == s)

    @staticmethod
    def isWhitespace(s,pos):
        cCode = HxString.charCodeAt(s,pos)
        result = False
        _g = 0
        _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
        while (_g < len(_g1)):
            ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (ele == cCode):
                result = True
                break
        return result

    @staticmethod
    def stripStringBegin(s):
        begin = 0
        sLen = len(s)
        while True:
            tmp = None
            if (begin < sLen):
                cCode = HxString.charCodeAt(s,begin)
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            begin = (begin + 1)
        return HxString.substr(s,begin,None)

    @staticmethod
    def stripStringEnd(s):
        end = len(s)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(s,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        return HxString.substring(s,0,end)

    @staticmethod
    def stripString(s):
        end = len(s)
        while True:
            tmp = None
            if (end > 0):
                cCode = HxString.charCodeAt(s,(end - 1))
                result = False
                _g = 0
                _g1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g < len(_g1)):
                    ele = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (ele == cCode):
                        result = True
                        break
                tmp = result
            else:
                tmp = False
            if (not tmp):
                break
            end = (end - 1)
        s1 = HxString.substring(s,0,end)
        begin = 0
        sLen = len(s1)
        while True:
            tmp1 = None
            if (begin < sLen):
                cCode1 = HxString.charCodeAt(s1,begin)
                result1 = False
                _g2 = 0
                _g11 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288, 6158, 8203, 8204, 8205, 8288, 65279]
                while (_g2 < len(_g11)):
                    ele1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                    _g2 = (_g2 + 1)
                    if (ele1 == cCode1):
                        result1 = True
                        break
                tmp1 = result1
            else:
                tmp1 = False
            if (not tmp1):
                break
            begin = (begin + 1)
        return HxString.substr(s1,begin,None)


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        field1 = field
        _hx_local_0 = len(field1)
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        this1 = python_Lib.anonAsDict(d)
        return this1


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["print", "println", "anonToDict", "anonAsDict", "dictAsAnon"]

    @staticmethod
    def print(v):
        _hx_str = Std.string(v)
        python_lib_Sys.stdout.buffer.write(_hx_str.encode("utf-8", "strict"))
        python_lib_Sys.stdout.flush()

    @staticmethod
    def println(v):
        _hx_str = Std.string(v)
        python_lib_Sys.stdout.buffer.write((("" + ("null" if _hx_str is None else _hx_str)) + "\n").encode("utf-8", "strict"))
        python_lib_Sys.stdout.flush()

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None

    @staticmethod
    def dictAsAnon(d):
        return _hx_AnonObject(d)


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        return float('nan') if (b == 0.0) else a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mod(a,b):
        return a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mapKwArgs(a,v):
        a1 = python_Lib.dictAsAnon(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if hasattr(a1,k1):
                x = getattr(a1,k1)
                setattr(a1,val,x)
                delattr(a1,k1)
        return a1


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self.wasEof = None
        self.stream = s
        self.set_bigEndian(False)
        self.wasEof = False
        if (not self.stream.readable()):
            raise _HxException("Write-only stream")



class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian"]


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        self.stream = None
        self.set_bigEndian(False)
        self.stream = stream
        if (not stream.writable()):
            raise _HxException("Read only stream")



class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "writeFullBytes", "writeString"]


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeByte"]
    _hx_statics = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        super().__init__(stream)
        if (not stream.writable()):
            raise _HxException("Read only stream")

    def writeByte(self,c):
        self.stream.write("".join(map(chr,[c])))



class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText", "createFileOutputFromText"]

    @staticmethod
    def createFileInputFromText(t):
        return sys_io_FileInput(python_io_FileTextInput(t))

    @staticmethod
    def createFileOutputFromText(t):
        return sys_io_FileOutput(python_io_FileTextOutput(t))


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["getContent"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian"]
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)



class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "writeFullBytes", "writeString"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def writeByte(self,c):
        self.impl.writeByte(c)

    def writeBytes(self,s,pos,_hx_len):
        return self.impl.writeBytes(s,pos,_hx_len)

    def writeFullBytes(self,s,pos,_hx_len):
        self.impl.writeFullBytes(s,pos,_hx_len)

    def writeString(self,s):
        self.impl.writeString(s)



class util_NullPrinter:
    _hx_class_name = "util.NullPrinter"
    __slots__ = ("countingOffset", "newline", "indent")
    _hx_fields = ["countingOffset", "newline", "indent"]
    _hx_methods = ["printString", "close"]

    def __init__(self):
        self.indent = "  "
        self.newline = "\n"
        self.countingOffset = 1

    def printString(self,s):
        pass

    def close(self):
        pass



class util_Pair:
    _hx_class_name = "util.Pair"
    __slots__ = ("first", "second")
    _hx_fields = ["first", "second"]
    _hx_methods = ["swapFirst", "swapSecond", "swap"]

    def __init__(self,u,v):
        self.second = None
        self.first = None
        self.first = u
        self.second = v

    def swapFirst(self,p):
        tmp = self.first
        self.first = p.first
        p.first = tmp

    def swapSecond(self,p):
        tmp = self.second
        self.second = p.second
        p.second = tmp

    def swap(self,p):
        self.swapFirst(p)
        self.swapSecond(p)



class util_StdOutPrinter:
    _hx_class_name = "util.StdOutPrinter"
    __slots__ = ("countingOffset", "newline", "indent")
    _hx_fields = ["countingOffset", "newline", "indent"]
    _hx_methods = ["printString", "close"]

    def __init__(self):
        self.indent = "  "
        self.newline = "\n"
        self.countingOffset = 1

    def printString(self,s):
        Sys.stdout().writeString(s)

    def close(self):
        pass


Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

def _hx_init_Sys_environ():
    def _hx_local_0():
        Sys.environ = haxe_ds_StringMap()
        env = python_lib_Os.environ
        key = python_HaxeIterator(iter(env.keys()))
        while key.hasNext():
            key1 = key.next()
            _this = Sys.environ
            value = env.get(key1,None)
            _this.h[key1] = value
        return Sys.environ
    return _hx_local_0()
Sys.environ = _hx_init_Sys_environ()
Sys._programPath = sys_FileSystem.fullPath(python_lib_Inspect.getsourcefile(Sys))
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

CoMa.main()