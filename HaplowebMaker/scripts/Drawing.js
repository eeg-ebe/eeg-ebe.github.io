// Generated by Haxe 3.4.2
"use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(a[i] === obj) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(a[i] === obj) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCharCode(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js_Boot.getClass(o);
	}
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return e[0];
};
Type.enumParameters = function(e) {
	return e.slice(2);
};
Type.enumIndex = function(e) {
	return e[1];
};
Type.allEnums = function(e) {
	return e.__empty_constructs__;
};
var draw_Connection = function(id,n1,n2,l) {
	this.id = id;
	this.n1 = n1;
	this.n2 = n2;
	this.l = l;
	this.expLength = this.n1.radius + this.n2.radius + this.l.length * 100;
	this.strokeColor = "grey";
	this.strokeWidth = 3;
	this.dashedArray = new List();
	this.drawMutsByLine = false;
	this.drawMutsByText = false;
	this.drawMutsByDots = false;
	this.drawMutsLineDashedArray = new List();
	this.drawMutsDotsDashedArray = new List();
};
$hxClasses["draw.Connection"] = draw_Connection;
draw_Connection.__name__ = ["draw","Connection"];
draw_Connection.prototype = {
	id: null
	,n1: null
	,n2: null
	,l: null
	,expLength: null
	,strokeColor: null
	,strokeWidth: null
	,dashedArray: null
	,drawMutsByLine: null
	,drawMutsLineStrokeColor: null
	,drawMutsLineWidth: null
	,drawMutsLineLen: null
	,drawMutsLineDashedArray: null
	,drawMutsByText: null
	,drawMutsTextFont: null
	,drawMutsTextSize: null
	,drawMutsTextColor: null
	,drawMutsTextPX: null
	,drawMutsTextPY: null
	,drawMutsByDots: null
	,drawMutsDotsSize: null
	,drawMutsDotsColor: null
	,drawMutsDotsDashedArray: null
	,getNodeSvg: function() {
		var result = new List();
		result.add("<line x1='");
		result.add(this.n1.xPos + "' y1='");
		result.add(this.n1.yPos + "' x2='");
		result.add(this.n2.xPos + "' y2='");
		result.add(this.n2.yPos + "' stroke='");
		result.add(this.strokeColor + "' stroke-width='");
		result.add(this.strokeWidth + "' ");
		if(!this.dashedArray.isEmpty()) {
			result.add("stroke-dasharray='");
			result.add(this.dashedArray.join(","));
			result.add("' ");
		}
		result.add("/>");
		if(this.drawMutsByLine || this.drawMutsByText || this.drawMutsByDots) {
			var vX = this.n1.xPos - this.n2.xPos;
			var vY = this.n1.yPos - this.n2.yPos;
			var vL = Math.sqrt(vX * vX + vY * vY);
			var eVX = vX / vL;
			var eVY = vY / vL;
			var startX = this.n2.xPos + eVX * this.n2.radius;
			var startY = this.n2.yPos + eVY * this.n2.radius;
			var endX = this.n2.xPos + vX - eVX * this.n1.radius;
			var endY = this.n2.yPos + vY - eVY * this.n1.radius;
			vX = (endX - startX) / (this.l.length + 1);
			vY = (endY - startY) / (this.l.length + 1);
			var iii = 0;
			var _g_head = this.l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var text = val;
				++iii;
				var x = startX + vX * iii;
				var y = startY + vY * iii;
				if(this.drawMutsByDots) {
					result.add("<circle cx='");
					result.add(x + "' cy='");
					result.add(y + "' r='");
					result.add(this.drawMutsDotsSize + " fill='");
					result.add(this.drawMutsDotsColor);
					if(!this.drawMutsDotsDashedArray.isEmpty()) {
						result.add(" stroke-dasharray='");
						result.add(this.drawMutsDotsDashedArray.join(","));
						result.add("'");
					}
					result.add("/>");
				}
				if(this.drawMutsByLine) {
					var x1 = x - eVY * this.drawMutsLineLen;
					var y1 = y + eVX * this.drawMutsLineLen;
					var x2 = x + eVY * this.drawMutsLineLen;
					var y2 = y - eVX * this.drawMutsLineLen;
					result.add("<line x1='");
					result.add(x1 + "' y1='");
					result.add(y1 + "' x2='");
					result.add(x2 + "' y2='");
					result.add(y2 + "' stroke='");
					result.add(this.drawMutsLineStrokeColor + "' stroke-width='");
					result.add(this.drawMutsLineWidth + "'");
					if(!this.drawMutsLineDashedArray.isEmpty()) {
						result.add(" stroke-dasharray='");
						result.add(this.drawMutsLineDashedArray.join(","));
						result.add("'");
					}
					result.add("/>");
				}
				if(this.drawMutsByText) {
					result.add("<text x='");
					result.add(x + this.drawMutsTextPX + "' y='");
					result.add(y + this.drawMutsTextSize / 2 + this.drawMutsTextPY + "' fill='");
					result.add(this.drawMutsTextColor + "' font-family='");
					result.add(this.drawMutsTextFont + "' font-size='");
					result.add(this.drawMutsTextSize + "'");
					result.add(">" + text + "</text>");
				}
			}
		}
		return result.join("");
	}
	,__class__: draw_Connection
};
var draw_Drawer = function() { };
$hxClasses["draw.Drawer"] = draw_Drawer;
draw_Drawer.__name__ = ["draw","Drawer"];
draw_Drawer.main = function() {
	var lines = "".split("\n");
	var result = new List();
	var lineNo = 0;
	var currentNode = null;
	var readNames = false;
	var readCons = false;
	var readLinks = false;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		++lineNo;
		var end = line.length;
		while(true) {
			var tmp;
			if(end > 0) {
				var cCode = HxOverrides.cca(line,end - 1);
				var result1 = false;
				var _g1 = 0;
				var _g11 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g1 < _g11.length) {
					var ele = _g11[_g1];
					++_g1;
					if(ele == cCode) {
						result1 = true;
						break;
					}
				}
				tmp = result1;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--end;
		}
		var s = line.substring(0,end);
		var begin = 0;
		var sLen = s.length;
		while(true) {
			var tmp1;
			if(begin < sLen) {
				var cCode1 = HxOverrides.cca(s,begin);
				var result2 = false;
				var _g2 = 0;
				var _g12 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g2 < _g12.length) {
					var ele1 = _g12[_g2];
					++_g2;
					if(ele1 == cCode1) {
						result2 = true;
						break;
					}
				}
				tmp1 = result2;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			++begin;
		}
		var line_ = HxOverrides.substr(s,begin,null);
		if(line_ == null || line_ == "" || line_.charAt(0) == "#") {
			continue;
		}
		var result3 = 0;
		while(true) {
			var cCode2 = HxOverrides.cca(line,result3);
			var result4 = false;
			var _g3 = 0;
			var _g13 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g3 < _g13.length) {
				var ele2 = _g13[_g3];
				++_g3;
				if(ele2 == cCode2) {
					result4 = true;
					break;
				}
			}
			if(!result4) {
				break;
			}
			++result3;
		}
		var indents = result3;
		if(indents == 0 && (line_ == "SAMPLED_SEQUENCE" || line_ == "MEDIAN_VECTOR")) {
			if(currentNode != null) {
				result.add(currentNode);
			}
			currentNode = new parsing_Node();
			currentNode.type = line_ == "SAMPLED_SEQUENCE" ? parsing_SEQ_$TYPE.SAMPLED_SEQUENCE : parsing_SEQ_$TYPE.MEDIAN_VECTOR;
			readNames = false;
			readCons = false;
			readLinks = false;
			continue;
		}
		if(currentNode == null) {
			throw new js__$Boot_HaxeError("Expected SAMPLED_SEQUENCE or MEDIAN_VECTOR in line " + lineNo + "!");
		}
		if(indents == 2 && HxOverrides.substr(line_,0,"ID".length) == "ID") {
			currentNode.id = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"FFR_ID".length) == "FFR_ID") {
			currentNode.spId = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"SEQUENCE".length) == "SEQUENCE") {
			currentNode.seq = line_.split(" ")[1];
		} else if(!(indents == 2 && HxOverrides.substr(line_,0,"NB_NAMES".length) == "NB_NAMES")) {
			if(indents == 2 && HxOverrides.substr(line_,0,"NAMES".length) == "NAMES") {
				readNames = true;
				readCons = false;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"CONNECTED_TO".length) == "CONNECTED_TO") {
				readNames = false;
				readCons = true;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"LINKED_TO".length) == "LINKED_TO") {
				readNames = false;
				readCons = false;
				readLinks = true;
			} else if(indents == 4 && (readNames || readCons || readLinks)) {
				if(readNames) {
					currentNode.names.add(line_);
				} else if(readCons) {
					var d = line_.split(" ");
					var l = new List();
					var _g21 = 5;
					var _g14 = d.length;
					while(_g21 < _g14) {
						var i = _g21++;
						l.add(Std.parseInt(d[i]));
					}
					currentNode.cons.add(new util_Pair(Std.parseInt(d[1]),l));
				} else if(readLinks) {
					var d1 = line_.split(" ");
					currentNode.links.add(new util_Pair(Std.parseInt(d1[1]),Std.parseInt(d1[3])));
				}
			} else {
				throw new js__$Boot_HaxeError("Unexpected expression in line " + lineNo + "!");
			}
		}
	}
	if(currentNode != null) {
		result.add(currentNode);
	}
	var net = result;
	var g_nodes;
	var g_links;
	var g_drawCurves;
	var g_drawCons;
	var g_drawCircles;
	var g_drawCenter;
	var g_drawBezierPoints;
	var g_drawAngles;
	var g_cons;
	g_drawCircles = true;
	g_drawCons = true;
	g_drawCurves = true;
	g_drawBezierPoints = false;
	g_drawCenter = false;
	g_drawAngles = false;
	g_drawCircles = true;
	g_drawCons = true;
	g_drawCurves = true;
	g_drawBezierPoints = false;
	g_drawCenter = false;
	g_drawAngles = false;
	g_nodes = new List();
	g_cons = new List();
	g_links = new List();
	var _g_head = net.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var e = val;
		g_nodes.add(new draw_NodePos(e));
	}
	var nextConId = 0;
	var _g_head1 = g_nodes.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node1 = val1;
		var _g_head2 = g_nodes.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var node2 = val2;
			if(node1.node.id > node2.node.id) {
				var _g_head3 = node2.node.cons.h;
				while(_g_head3 != null) {
					var val3 = _g_head3.item;
					_g_head3 = _g_head3.next;
					var con = val3;
					if(con.first == node1.node.id) {
						g_cons.add(new draw_Connection(nextConId++,node1,node2,con.second));
						break;
					}
				}
				var _g_head4 = node2.node.links.h;
				while(_g_head4 != null) {
					var val4 = _g_head4.item;
					_g_head4 = _g_head4.next;
					var con1 = val4;
					if(con1.first == node1.node.id) {
						g_links.add(new draw_Link(node1,node2,con1.second));
						break;
					}
				}
			}
		}
	}
	var _g_head5 = g_nodes.h;
	while(_g_head5 != null) {
		var val5 = _g_head5.item;
		_g_head5 = _g_head5.next;
		var node = val5;
		var n = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
		node.valid = false;
		node.xPos = n;
		var n1 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
		node.valid = false;
		node.yPos = n1;
	}
	var _g_head6 = g_nodes.h;
	while(_g_head6 != null) {
		var val6 = _g_head6.item;
		_g_head6 = _g_head6.next;
		var node11 = val6;
		var needCheck = true;
		while(needCheck) {
			needCheck = false;
			var _g_head7 = g_nodes.h;
			while(_g_head7 != null) {
				var val7 = _g_head7.item;
				_g_head7 = _g_head7.next;
				var node21 = val7;
				if(node11.node.id > node21.node.id && node11.xPos == node21.xPos && node21.yPos == node21.yPos) {
					var n2 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
					node11.valid = false;
					node11.xPos = n2;
					var n3 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
					node11.valid = false;
					node11.yPos = n3;
					needCheck = true;
					break;
				}
			}
		}
	}
	var _g_head8 = g_nodes.h;
	while(_g_head8 != null) {
		var val8 = _g_head8.item;
		_g_head8 = _g_head8.next;
		var node3 = val8;
		node3.velocityX = 0;
		node3.velocityY = 0;
	}
	var tE = 0;
	var xDif;
	var yDif;
	var r;
	var stepCount = 0;
	var stopCritSteps;
	while(true) {
		++stepCount;
		stopCritSteps = false;
		tE = 0;
		var _g_head9 = g_nodes.h;
		while(_g_head9 != null) {
			var val9 = _g_head9.item;
			_g_head9 = _g_head9.next;
			var node4 = val9;
			node4.forceX = 0;
			node4.forceY = 0;
			var _g_head10 = g_nodes.h;
			while(_g_head10 != null) {
				var val10 = _g_head10.item;
				_g_head10 = _g_head10.next;
				var oNode = val10;
				if(node4 != oNode) {
					xDif = node4.xPos - oNode.xPos;
					yDif = node4.yPos - oNode.yPos;
					r = Math.sqrt(xDif * xDif + yDif * yDif);
					if(r > 1) {
						node4.forceX += 500.0 * xDif / (r * r);
						node4.forceY += 500.0 * yDif / (r * r);
					} else {
						r += 0.1;
						node4.forceX += 500.0 * (xDif + 10 * Math.random() * (Math.random() > 0.5 ? 1 : -1)) / (r * r);
						node4.forceY += 500.0 * (yDif + 10 * Math.random() * (Math.random() > 0.5 ? 1 : -1)) / (r * r);
					}
				}
			}
			var _g_head11 = g_cons.h;
			while(_g_head11 != null) {
				var val11 = _g_head11.item;
				_g_head11 = _g_head11.next;
				var con2 = val11;
				if(con2.n1 == node4) {
					xDif = con2.n2.xPos - con2.n1.xPos;
					yDif = con2.n2.yPos - con2.n1.yPos;
				} else if(con2.n2 == node4) {
					xDif = con2.n1.xPos - con2.n2.xPos;
					yDif = con2.n1.yPos - con2.n2.yPos;
				} else {
					continue;
				}
				r = Math.sqrt(xDif * xDif + yDif * yDif);
				var displacement = r - con2.expLength;
				xDif /= r;
				yDif /= r;
				node4.forceX += 0.1 * displacement * xDif;
				node4.forceY += 0.1 * displacement * yDif;
			}
		}
		var _g_head12 = g_nodes.h;
		while(_g_head12 != null) {
			var val12 = _g_head12.item;
			_g_head12 = _g_head12.next;
			var node5 = val12;
			node5.velocityX = (node5.velocityX + node5.forceX) * 0.6;
			node5.velocityY = (node5.velocityY + node5.forceY) * 0.6;
			node5.valid = false;
			node5.xPos += node5.velocityX;
			node5.valid = false;
			node5.yPos += node5.velocityY;
			var l1 = Math.sqrt(node5.velocityX * node5.velocityX + node5.velocityY * node5.velocityY);
			tE += l1 * l1;
		}
		if(stepCount > 10000) {
			stopCritSteps = true;
		}
		if(!(tE > 0.5 && !stopCritSteps)) {
			break;
		}
	}
	var rx = 0;
	var _g_head13 = g_nodes.h;
	while(_g_head13 != null) {
		var val13 = _g_head13.item;
		_g_head13 = _g_head13.next;
		var node6 = val13;
		rx += node6.xPos;
	}
	var cx = rx / g_nodes.length;
	var ry = 0;
	var _g_head14 = g_nodes.h;
	while(_g_head14 != null) {
		var val14 = _g_head14.item;
		_g_head14 = _g_head14.next;
		var node7 = val14;
		ry += node7.yPos;
	}
	var cy = ry / g_nodes.length;
	var _g_head15 = g_nodes.h;
	while(_g_head15 != null) {
		var val15 = _g_head15.item;
		_g_head15 = _g_head15.next;
		var node8 = val15;
		node8.valid = false;
		node8.xPos -= cx;
		node8.valid = false;
		node8.yPos -= cy;
	}
	var rx1 = 0;
	var _g_head16 = g_nodes.h;
	while(_g_head16 != null) {
		var val16 = _g_head16.item;
		_g_head16 = _g_head16.next;
		var node9 = val16;
		rx1 += node9.xPos;
	}
	var cx1 = rx1 / g_nodes.length;
	var ry1 = 0;
	var _g_head17 = g_nodes.h;
	while(_g_head17 != null) {
		var val17 = _g_head17.item;
		_g_head17 = _g_head17.next;
		var node10 = val17;
		ry1 += node10.yPos;
	}
	var cy1 = ry1 / g_nodes.length;
	var _g_head18 = g_nodes.h;
	while(_g_head18 != null) {
		var val18 = _g_head18.item;
		_g_head18 = _g_head18.next;
		var node12 = val18;
		node12.valid = false;
		node12.xPos -= cx1;
		node12.valid = false;
		node12.yPos -= cy1;
	}
	var rx2 = 0;
	var _g_head19 = g_nodes.h;
	while(_g_head19 != null) {
		var val19 = _g_head19.item;
		_g_head19 = _g_head19.next;
		var node13 = val19;
		rx2 += node13.xPos;
	}
	var cx2 = rx2 / g_nodes.length;
	var ry2 = 0;
	var _g_head20 = g_nodes.h;
	while(_g_head20 != null) {
		var val20 = _g_head20.item;
		_g_head20 = _g_head20.next;
		var node14 = val20;
		ry2 += node14.yPos;
	}
	var cy2 = ry2 / g_nodes.length;
	var _g_head21 = g_nodes.h;
	while(_g_head21 != null) {
		var val21 = _g_head21.item;
		_g_head21 = _g_head21.next;
		var node15 = val21;
		var vX = node15.xPos - cx2;
		var vY = node15.yPos - cy2;
		vX *= 0.01;
		vY *= 0.01;
		node15.valid = false;
		node15.xPos = cx2 + vX;
		node15.valid = false;
		node15.yPos = cy2 + vY;
	}
	var l2 = new List();
	var _g_head22 = g_links.h;
	while(_g_head22 != null) {
		var val22 = _g_head22.item;
		_g_head22 = _g_head22.next;
		var link = val22;
		link.xPos = NaN;
		link.yPos = NaN;
		var vX1 = link.n1.xPos - link.n2.xPos;
		var vY1 = link.n1.yPos - link.n2.yPos;
		var vrX = -vY1 / 8;
		var vrY = vX1 / 8;
		var mX = link.n2.xPos + vX1 / 2;
		var mY = link.n2.yPos + vY1 / 2;
		link.x1 = mX - vrX;
		link.y1 = mY - vrY;
		link.x2 = mX + vrX;
		link.y2 = mY + vrY;
		link.e1 = 0;
		link.e2 = 0;
		var _g_head23 = g_nodes.h;
		while(_g_head23 != null) {
			var val23 = _g_head23.item;
			_g_head23 = _g_head23.next;
			var node16 = val23;
			var dX = node16.xPos - link.x1;
			var dY = node16.yPos - link.y1;
			link.e1 += 1 / Math.sqrt(dX * dX + dY * dY);
			var dX1 = node16.xPos - link.x2;
			var dY1 = node16.yPos - link.y2;
			link.e2 += 1 / Math.sqrt(dX1 * dX1 + dY1 * dY1);
		}
		l2.add(link);
	}
	while(!l2.isEmpty()) {
		var bestEDiff = -1.0;
		var bestLink = null;
		var _g_head24 = l2.h;
		while(_g_head24 != null) {
			var val24 = _g_head24.item;
			_g_head24 = _g_head24.next;
			var link1 = val24;
			var eDiff = Math.abs(link1.e1 - link1.e2);
			if(eDiff > bestEDiff || bestEDiff == -1) {
				bestEDiff = eDiff;
				bestLink = link1;
			}
		}
		bestLink.xPos = bestLink.e1 < bestLink.e2 ? bestLink.x1 : bestLink.x2;
		bestLink.yPos = bestLink.e1 < bestLink.e2 ? bestLink.y1 : bestLink.y2;
		l2.remove(bestLink);
	}
	var _this_newline;
	var _this_indent;
	var _this_countingOffset = 1;
	_this_newline = "\n";
	_this_indent = "  ";
	var maxX = -Infinity;
	var maxY = -Infinity;
	var minX = Infinity;
	var minY = Infinity;
	var _g_head25 = g_nodes.h;
	while(_g_head25 != null) {
		var val25 = _g_head25.item;
		_g_head25 = _g_head25.next;
		var node17 = val25;
		maxX = Math.max(maxX,node17.xPos + node17.radius);
		maxY = Math.max(maxY,node17.yPos + node17.radius);
		minX = Math.min(minX,node17.xPos - node17.radius);
		minY = Math.min(minY,node17.yPos - node17.radius);
	}
	var _g_head26 = g_links.h;
	while(_g_head26 != null) {
		var val26 = _g_head26.item;
		_g_head26 = _g_head26.next;
		var link2 = val26;
		var tMax = 0;
		var bX = 2 * link2.xPos - (link2.n1.xPos + link2.n2.xPos) / 2;
		if(2 * bX - link2.n1.xPos - link2.n2.xPos != 0) {
			tMax = (bX - link2.n1.xPos) / (2 * bX - link2.n1.xPos - link2.n2.xPos);
		}
		if(0 <= tMax && tMax <= 1) {
			tMax = tMax;
		} else {
			tMax = 0;
		}
		var x = (1 - tMax) * ((1 - tMax) * link2.n1.xPos + tMax * bX) + tMax * ((1 - tMax) * bX + tMax * link2.n2.xPos);
		var tMax1 = 0;
		var bY = 2 * link2.yPos - (link2.n1.yPos + link2.n2.yPos) / 2;
		if(2 * bY - link2.n1.yPos - link2.n2.yPos != 0) {
			tMax1 = (bY - link2.n1.yPos) / (2 * bY - link2.n1.yPos - link2.n2.yPos);
		}
		if(0 <= tMax1 && tMax1 <= 1) {
			tMax1 = tMax1;
		} else {
			tMax1 = 0;
		}
		var y = (1 - tMax1) * ((1 - tMax1) * link2.n1.yPos + tMax1 * bY) + tMax1 * ((1 - tMax1) * bY + tMax1 * link2.n2.yPos);
		maxX = Math.max(maxX,x);
		maxY = Math.max(maxY,y);
		minX = Math.min(minX,x);
		minY = Math.min(minY,y);
	}
	var width = maxX - minX + 30;
	var height = maxY - minY + 30;
	var result5 = new List();
	result5.add("<svg version='1.1' baseProfile='full' width='" + width);
	result5.add("' height='" + height);
	result5.add("' viewBox='" + (minX - 15) + "," + (minY - 15) + "," + width + "," + height + "' xmlns='http://www.w3.org/2000/svg'>");
	if(g_drawCons) {
		var _g_head27 = g_cons.h;
		while(_g_head27 != null) {
			var val27 = _g_head27.item;
			_g_head27 = _g_head27.next;
			var con3 = val27;
			var result6 = new List();
			result6.add("<line x1='");
			result6.add(con3.n1.xPos + "' y1='");
			result6.add(con3.n1.yPos + "' x2='");
			result6.add(con3.n2.xPos + "' y2='");
			result6.add(con3.n2.yPos + "' stroke='");
			result6.add(con3.strokeColor + "' stroke-width='");
			result6.add(con3.strokeWidth + "' ");
			if(!con3.dashedArray.isEmpty()) {
				result6.add("stroke-dasharray='");
				result6.add(con3.dashedArray.join(","));
				result6.add("' ");
			}
			result6.add("/>");
			if(con3.drawMutsByLine || con3.drawMutsByText || con3.drawMutsByDots) {
				var vX2 = con3.n1.xPos - con3.n2.xPos;
				var vY2 = con3.n1.yPos - con3.n2.yPos;
				var vL = Math.sqrt(vX2 * vX2 + vY2 * vY2);
				var eVX = vX2 / vL;
				var eVY = vY2 / vL;
				var startX = con3.n2.xPos + eVX * con3.n2.radius;
				var startY = con3.n2.yPos + eVY * con3.n2.radius;
				var endX = con3.n2.xPos + vX2 - eVX * con3.n1.radius;
				var endY = con3.n2.yPos + vY2 - eVY * con3.n1.radius;
				vX2 = (endX - startX) / (con3.l.length + 1);
				vY2 = (endY - startY) / (con3.l.length + 1);
				var iii = 0;
				var _g_head28 = con3.l.h;
				while(_g_head28 != null) {
					var val28 = _g_head28.item;
					_g_head28 = _g_head28.next;
					var text = val28;
					++iii;
					var x1 = startX + vX2 * iii;
					var y1 = startY + vY2 * iii;
					if(con3.drawMutsByDots) {
						result6.add("<circle cx='");
						result6.add(x1 + "' cy='");
						result6.add(y1 + "' r='");
						result6.add(con3.drawMutsDotsSize + " fill='");
						result6.add(con3.drawMutsDotsColor);
						if(!con3.drawMutsDotsDashedArray.isEmpty()) {
							result6.add(" stroke-dasharray='");
							result6.add(con3.drawMutsDotsDashedArray.join(","));
							result6.add("'");
						}
						result6.add("/>");
					}
					if(con3.drawMutsByLine) {
						var x11 = x1 - eVY * con3.drawMutsLineLen;
						var y11 = y1 + eVX * con3.drawMutsLineLen;
						var x2 = x1 + eVY * con3.drawMutsLineLen;
						var y2 = y1 - eVX * con3.drawMutsLineLen;
						result6.add("<line x1='");
						result6.add(x11 + "' y1='");
						result6.add(y11 + "' x2='");
						result6.add(x2 + "' y2='");
						result6.add(y2 + "' stroke='");
						result6.add(con3.drawMutsLineStrokeColor + "' stroke-width='");
						result6.add(con3.drawMutsLineWidth + "'");
						if(!con3.drawMutsLineDashedArray.isEmpty()) {
							result6.add(" stroke-dasharray='");
							result6.add(con3.drawMutsLineDashedArray.join(","));
							result6.add("'");
						}
						result6.add("/>");
					}
					if(con3.drawMutsByText) {
						result6.add("<text x='");
						result6.add(x1 + con3.drawMutsTextPX + "' y='");
						result6.add(y1 + con3.drawMutsTextSize / 2 + con3.drawMutsTextPY + "' fill='");
						result6.add(con3.drawMutsTextColor + "' font-family='");
						result6.add(con3.drawMutsTextFont + "' font-size='");
						result6.add(con3.drawMutsTextSize + "'");
						result6.add(">" + text + "</text>");
					}
				}
			}
			result5.add(result6.join(""));
		}
	}
	if(g_drawCurves) {
		result5.add("<g fill='none'>");
		var _g_head29 = g_links.h;
		while(_g_head29 != null) {
			var val29 = _g_head29.item;
			_g_head29 = _g_head29.next;
			var link3 = val29;
			var result7 = new List();
			result7.add("<path d='M");
			result7.add(link3.n1.xPos + " ");
			result7.add(link3.n1.yPos + " Q");
			result7.add(" " + (2 * link3.xPos - (link3.n1.xPos + link3.n2.xPos) / 2));
			result7.add(" " + (2 * link3.yPos - (link3.n1.yPos + link3.n2.yPos) / 2));
			result7.add(" " + link3.n2.xPos);
			result7.add(" " + link3.n2.yPos);
			result7.add("' stroke='");
			result7.add(link3.strokeColor);
			result7.add("' stroke-width='");
			result7.add(link3.strokeWidth + "' ");
			if(!link3.dashedArray.isEmpty()) {
				result7.add("stroke-dasharray='");
				result7.add(link3.dashedArray.join(","));
				result7.add("' ");
			}
			result7.add("/>");
			result5.add(result7.join(""));
		}
		result5.add("</g>");
	}
	if(g_drawCircles) {
		var _g_head30 = g_nodes.h;
		while(_g_head30 != null) {
			var val30 = _g_head30.item;
			_g_head30 = _g_head30.next;
			var node18 = val30;
			var tmp2;
			if(node18.valid) {
				tmp2 = node18.svg;
			} else {
				var result8 = new List();
				node18.pie = node18.pie.filter(function(t) {
					if(t.first != null && t.first != "") {
						return t.second > 0;
					} else {
						return false;
					}
				});
				var needArcs = false;
				result8.add("<circle id='");
				result8.add("n" + node18.node.id);
				result8.add("' ");
				result8.add("stroke='");
				result8.add(node18.strokeColor);
				result8.add("' ");
				result8.add("stroke-width='");
				result8.add("" + node18.strokeWidth);
				result8.add("' ");
				if(!node18.dashedArray.isEmpty()) {
					result8.add("stroke-dasharray='");
					result8.add(node18.dashedArray.join(","));
					result8.add("' ");
				}
				result8.add("cx='");
				result8.add("" + node18.xPos);
				result8.add("' ");
				result8.add("cy='");
				result8.add("" + node18.yPos);
				result8.add("' ");
				result8.add("r='");
				result8.add("" + node18.radius);
				result8.add("' ");
				if(node18.pie.isEmpty()) {
					result8.add("fill='");
					result8.add("blue");
				} else if(node18.pie.length == 1) {
					result8.add("fill='");
					result8.add(node18.pie.first().first);
				} else {
					needArcs = true;
				}
				result8.add("' ");
				result8.add("/>");
				if(needArcs) {
					var summe = 0;
					var _g_head31 = node18.pie.h;
					while(_g_head31 != null) {
						var val31 = _g_head31.item;
						_g_head31 = _g_head31.next;
						var p = val31;
						summe += p.second;
					}
					var cs = 0;
					var _g_head32 = node18.pie.h;
					while(_g_head32 != null) {
						var val32 = _g_head32.item;
						_g_head32 = _g_head32.next;
						var p1 = val32;
						var color = p1.first;
						var perc = p1.second / summe;
						var pX1 = Math.sin(cs / summe * 2 * Math.PI) * node18.radius + node18.xPos;
						var pY1 = -Math.cos(cs / summe * 2 * Math.PI) * node18.radius + node18.xPos;
						cs += p1.second;
						var pX2 = Math.sin(cs / summe * 2 * Math.PI) * node18.radius + node18.xPos;
						var pY2 = -Math.cos(cs / summe * 2 * Math.PI) * node18.radius + node18.xPos;
						var arcFlag = perc < 0.5 ? 0 : 1;
						result8.add("<path fill='" + color + "' d='M" + node18.xPos + "," + node18.yPos + " L" + pX1 + "," + pY1 + " A" + node18.radius + "," + node18.radius + " 1 " + arcFlag + ",1 " + pX2 + ", " + pY2 + " z'/>");
					}
				}
				node18.svg = result8.join("");
				node18.valid = true;
				tmp2 = node18.svg;
			}
			result5.add(tmp2);
		}
	}
	if(g_drawAngles) {
		var _g_head33 = g_cons.h;
		while(_g_head33 != null) {
			var val33 = _g_head33.item;
			_g_head33 = _g_head33.next;
			var c1 = val33;
			var _g_head34 = g_cons.h;
			while(_g_head34 != null) {
				var val34 = _g_head34.item;
				_g_head34 = _g_head34.next;
				var c2 = val34;
				if(c1.id > c2.id) {
					var nA = null;
					var nB = null;
					var nC = null;
					if(c1.n1 == c2.n1) {
						nA = c1.n2;
						nB = c2.n2;
						nC = c1.n1;
					} else if(c1.n1 == c2.n2) {
						nA = c1.n2;
						nB = c2.n1;
						nC = c1.n1;
					} else if(c1.n2 == c2.n1) {
						nA = c1.n1;
						nB = c2.n2;
						nC = c1.n2;
					} else if(c1.n2 == c2.n2) {
						nA = c1.n1;
						nB = c2.n1;
						nC = c1.n2;
					}
					if(nC != null) {
						var v1X = nA.xPos - nC.xPos;
						var v1Y = nA.yPos - nC.yPos;
						var v2X = nB.xPos - nC.xPos;
						var v2Y = nB.yPos - nC.yPos;
						var l11 = Math.sqrt(v1X * v1X + v1Y * v1Y);
						var l21 = Math.sqrt(v2X * v2X + v2Y * v2Y);
						var c = v1X * v2X + v1Y * v2Y;
						var wXV = v1X / l11 + v2X / l21;
						var wYV = v1Y / l11 + v2Y / l21;
						var wL = Math.sqrt(wXV * wXV + wYV * wYV);
						var xx = nC.xPos + wXV / wL * (nC.radius + 20);
						var yy = nC.yPos + wYV / wL * (nC.radius + 20);
						var txt = HxOverrides.substr("" + Math.acos(c / (l11 * l21)) * 360 / (2 * Math.PI),0,6);
						result5.add("<text x='" + xx + "' y='" + yy + "' text-anchor='middle'>" + txt + "</text>");
					}
				}
			}
		}
	}
	if(g_drawBezierPoints) {
		var _g_head35 = g_links.h;
		while(_g_head35 != null) {
			var val35 = _g_head35.item;
			_g_head35 = _g_head35.next;
			var link4 = val35;
			result5.add("<circle cx='" + link4.xPos + "' cy='" + link4.yPos + "' r='5' fill='" + link4.strokeColor + "' />");
		}
	}
	if(g_drawCenter) {
		var rx3 = 0;
		var _g_head36 = g_nodes.h;
		while(_g_head36 != null) {
			var val36 = _g_head36.item;
			_g_head36 = _g_head36.next;
			var node19 = val36;
			rx3 += node19.xPos;
		}
		var x3 = rx3 / g_nodes.length;
		var ry3 = 0;
		var _g_head37 = g_nodes.h;
		while(_g_head37 != null) {
			var val37 = _g_head37.item;
			_g_head37 = _g_head37.next;
			var node20 = val37;
			ry3 += node20.yPos;
		}
		var y3 = ry3 / g_nodes.length;
		result5.add("<line x1='" + x3 + "' y1='" + minY + "' x2='" + x3 + "' y2='" + maxY + "' stroke='green' stroke-dasharray='3 3' />");
		result5.add("<line x1='" + minX + "' y1='" + y3 + "' x2='" + maxX + "' y2='" + y3 + "' stroke='green' stroke-dasharray='3 3' />");
		var rx4 = 0;
		var _g_head38 = g_nodes.h;
		while(_g_head38 != null) {
			var val38 = _g_head38.item;
			_g_head38 = _g_head38.next;
			var node22 = val38;
			rx4 += node22.xPos;
		}
		var tmp3 = "<circle cx='" + rx4 / g_nodes.length + "' cy='";
		var ry4 = 0;
		var _g_head39 = g_nodes.h;
		while(_g_head39 != null) {
			var val39 = _g_head39.item;
			_g_head39 = _g_head39.next;
			var node23 = val39;
			ry4 += node23.yPos;
		}
		result5.add(tmp3 + ry4 / g_nodes.length + "' r='5' fill='green' />");
	}
	result5.add("</svg>");
	var s1 = result5.join("");
	haxe_Log.trace(s1,{ fileName : "StdOutPrinter.hx", lineNumber : 15, className : "util.StdOutPrinter", methodName : "printString"});
	var rx5 = 0;
	var _g_head40 = g_nodes.h;
	while(_g_head40 != null) {
		var val40 = _g_head40.item;
		_g_head40 = _g_head40.next;
		var node24 = val40;
		rx5 += node24.xPos;
	}
	var cx3 = rx5 / g_nodes.length;
	var ry5 = 0;
	var _g_head41 = g_nodes.h;
	while(_g_head41 != null) {
		var val41 = _g_head41.item;
		_g_head41 = _g_head41.next;
		var node25 = val41;
		ry5 += node25.yPos;
	}
	var cy3 = ry5 / g_nodes.length;
	var _g_head42 = g_nodes.h;
	while(_g_head42 != null) {
		var val42 = _g_head42.item;
		_g_head42 = _g_head42.next;
		var node26 = val42;
		node26.valid = false;
		node26.xPos -= cx3;
		node26.valid = false;
		node26.yPos -= cy3;
	}
	var rx6 = 0;
	var _g_head43 = g_nodes.h;
	while(_g_head43 != null) {
		var val43 = _g_head43.item;
		_g_head43 = _g_head43.next;
		var node27 = val43;
		rx6 += node27.xPos;
	}
	var cx4 = rx6 / g_nodes.length;
	var ry6 = 0;
	var _g_head44 = g_nodes.h;
	while(_g_head44 != null) {
		var val44 = _g_head44.item;
		_g_head44 = _g_head44.next;
		var node28 = val44;
		ry6 += node28.yPos;
	}
	var cy4 = ry6 / g_nodes.length;
	var _g_head45 = g_nodes.h;
	while(_g_head45 != null) {
		var val45 = _g_head45.item;
		_g_head45 = _g_head45.next;
		var node29 = val45;
		var vX3 = node29.xPos - cx4;
		var vY3 = node29.yPos - cy4;
		vX3 = vX3 * Math.cos(0.1) - vY3 * Math.sin(0.1);
		vY3 = vX3 * Math.sin(0.1) + vY3 * Math.cos(0.1);
		node29.valid = false;
		node29.xPos = cx4 + vX3;
		node29.valid = false;
		node29.yPos = cy4 + vY3;
	}
	var _g_head46 = g_links.h;
	while(_g_head46 != null) {
		var val46 = _g_head46.item;
		_g_head46 = _g_head46.next;
		var link5 = val46;
		var vX4 = link5.xPos - cx4;
		var vY4 = link5.yPos - cy4;
		vX4 = vX4 * Math.cos(0.1) - vY4 * Math.sin(0.1);
		vY4 = vX4 * Math.sin(0.1) + vY4 * Math.cos(0.1);
		link5.xPos = cx4 + vX4;
		link5.yPos = cy4 + vY4;
	}
	var rx7 = 0;
	var _g_head47 = g_nodes.h;
	while(_g_head47 != null) {
		var val47 = _g_head47.item;
		_g_head47 = _g_head47.next;
		var node30 = val47;
		rx7 += node30.xPos;
	}
	var cx5 = rx7 / g_nodes.length;
	var ry7 = 0;
	var _g_head48 = g_nodes.h;
	while(_g_head48 != null) {
		var val48 = _g_head48.item;
		_g_head48 = _g_head48.next;
		var node31 = val48;
		ry7 += node31.yPos;
	}
	var cy5 = ry7 / g_nodes.length;
	var _g_head49 = g_nodes.h;
	while(_g_head49 != null) {
		var val49 = _g_head49.item;
		_g_head49 = _g_head49.next;
		var node32 = val49;
		node32.valid = false;
		node32.xPos -= cx5;
		node32.valid = false;
		node32.yPos -= cy5;
	}
	var l3 = new List();
	var _g_head50 = g_links.h;
	while(_g_head50 != null) {
		var val50 = _g_head50.item;
		_g_head50 = _g_head50.next;
		var link6 = val50;
		link6.xPos = NaN;
		link6.yPos = NaN;
		var vX5 = link6.n1.xPos - link6.n2.xPos;
		var vY5 = link6.n1.yPos - link6.n2.yPos;
		var vrX1 = -vY5 / 8;
		var vrY1 = vX5 / 8;
		var mX1 = link6.n2.xPos + vX5 / 2;
		var mY1 = link6.n2.yPos + vY5 / 2;
		link6.x1 = mX1 - vrX1;
		link6.y1 = mY1 - vrY1;
		link6.x2 = mX1 + vrX1;
		link6.y2 = mY1 + vrY1;
		link6.e1 = 0;
		link6.e2 = 0;
		var _g_head51 = g_nodes.h;
		while(_g_head51 != null) {
			var val51 = _g_head51.item;
			_g_head51 = _g_head51.next;
			var node33 = val51;
			var dX2 = node33.xPos - link6.x1;
			var dY2 = node33.yPos - link6.y1;
			link6.e1 += 1 / Math.sqrt(dX2 * dX2 + dY2 * dY2);
			var dX3 = node33.xPos - link6.x2;
			var dY3 = node33.yPos - link6.y2;
			link6.e2 += 1 / Math.sqrt(dX3 * dX3 + dY3 * dY3);
		}
		l3.add(link6);
	}
	while(!l3.isEmpty()) {
		var bestEDiff1 = -1.0;
		var bestLink1 = null;
		var _g_head52 = l3.h;
		while(_g_head52 != null) {
			var val52 = _g_head52.item;
			_g_head52 = _g_head52.next;
			var link7 = val52;
			var eDiff1 = Math.abs(link7.e1 - link7.e2);
			if(eDiff1 > bestEDiff1 || bestEDiff1 == -1) {
				bestEDiff1 = eDiff1;
				bestLink1 = link7;
			}
		}
		bestLink1.xPos = bestLink1.e1 < bestLink1.e2 ? bestLink1.x1 : bestLink1.x2;
		bestLink1.yPos = bestLink1.e1 < bestLink1.e2 ? bestLink1.y1 : bestLink1.y2;
		l3.remove(bestLink1);
	}
	var _this_newline1;
	var _this_indent1;
	var _this_countingOffset1 = 1;
	_this_newline1 = "\n";
	_this_indent1 = "  ";
	var maxX1 = -Infinity;
	var maxY1 = -Infinity;
	var minX1 = Infinity;
	var minY1 = Infinity;
	var _g_head53 = g_nodes.h;
	while(_g_head53 != null) {
		var val53 = _g_head53.item;
		_g_head53 = _g_head53.next;
		var node34 = val53;
		maxX1 = Math.max(maxX1,node34.xPos + node34.radius);
		maxY1 = Math.max(maxY1,node34.yPos + node34.radius);
		minX1 = Math.min(minX1,node34.xPos - node34.radius);
		minY1 = Math.min(minY1,node34.yPos - node34.radius);
	}
	var _g_head54 = g_links.h;
	while(_g_head54 != null) {
		var val54 = _g_head54.item;
		_g_head54 = _g_head54.next;
		var link8 = val54;
		var tMax2 = 0;
		var bX1 = 2 * link8.xPos - (link8.n1.xPos + link8.n2.xPos) / 2;
		if(2 * bX1 - link8.n1.xPos - link8.n2.xPos != 0) {
			tMax2 = (bX1 - link8.n1.xPos) / (2 * bX1 - link8.n1.xPos - link8.n2.xPos);
		}
		if(0 <= tMax2 && tMax2 <= 1) {
			tMax2 = tMax2;
		} else {
			tMax2 = 0;
		}
		var x4 = (1 - tMax2) * ((1 - tMax2) * link8.n1.xPos + tMax2 * bX1) + tMax2 * ((1 - tMax2) * bX1 + tMax2 * link8.n2.xPos);
		var tMax3 = 0;
		var bY1 = 2 * link8.yPos - (link8.n1.yPos + link8.n2.yPos) / 2;
		if(2 * bY1 - link8.n1.yPos - link8.n2.yPos != 0) {
			tMax3 = (bY1 - link8.n1.yPos) / (2 * bY1 - link8.n1.yPos - link8.n2.yPos);
		}
		if(0 <= tMax3 && tMax3 <= 1) {
			tMax3 = tMax3;
		} else {
			tMax3 = 0;
		}
		var y4 = (1 - tMax3) * ((1 - tMax3) * link8.n1.yPos + tMax3 * bY1) + tMax3 * ((1 - tMax3) * bY1 + tMax3 * link8.n2.yPos);
		maxX1 = Math.max(maxX1,x4);
		maxY1 = Math.max(maxY1,y4);
		minX1 = Math.min(minX1,x4);
		minY1 = Math.min(minY1,y4);
	}
	var width1 = maxX1 - minX1 + 30;
	var height1 = maxY1 - minY1 + 30;
	var result9 = new List();
	result9.add("<svg version='1.1' baseProfile='full' width='" + width1);
	result9.add("' height='" + height1);
	result9.add("' viewBox='" + (minX1 - 15) + "," + (minY1 - 15) + "," + width1 + "," + height1 + "' xmlns='http://www.w3.org/2000/svg'>");
	if(g_drawCons) {
		var _g_head55 = g_cons.h;
		while(_g_head55 != null) {
			var val55 = _g_head55.item;
			_g_head55 = _g_head55.next;
			var con4 = val55;
			var result10 = new List();
			result10.add("<line x1='");
			result10.add(con4.n1.xPos + "' y1='");
			result10.add(con4.n1.yPos + "' x2='");
			result10.add(con4.n2.xPos + "' y2='");
			result10.add(con4.n2.yPos + "' stroke='");
			result10.add(con4.strokeColor + "' stroke-width='");
			result10.add(con4.strokeWidth + "' ");
			if(!con4.dashedArray.isEmpty()) {
				result10.add("stroke-dasharray='");
				result10.add(con4.dashedArray.join(","));
				result10.add("' ");
			}
			result10.add("/>");
			if(con4.drawMutsByLine || con4.drawMutsByText || con4.drawMutsByDots) {
				var vX6 = con4.n1.xPos - con4.n2.xPos;
				var vY6 = con4.n1.yPos - con4.n2.yPos;
				var vL1 = Math.sqrt(vX6 * vX6 + vY6 * vY6);
				var eVX1 = vX6 / vL1;
				var eVY1 = vY6 / vL1;
				var startX1 = con4.n2.xPos + eVX1 * con4.n2.radius;
				var startY1 = con4.n2.yPos + eVY1 * con4.n2.radius;
				var endX1 = con4.n2.xPos + vX6 - eVX1 * con4.n1.radius;
				var endY1 = con4.n2.yPos + vY6 - eVY1 * con4.n1.radius;
				vX6 = (endX1 - startX1) / (con4.l.length + 1);
				vY6 = (endY1 - startY1) / (con4.l.length + 1);
				var iii1 = 0;
				var _g_head56 = con4.l.h;
				while(_g_head56 != null) {
					var val56 = _g_head56.item;
					_g_head56 = _g_head56.next;
					var text1 = val56;
					++iii1;
					var x5 = startX1 + vX6 * iii1;
					var y5 = startY1 + vY6 * iii1;
					if(con4.drawMutsByDots) {
						result10.add("<circle cx='");
						result10.add(x5 + "' cy='");
						result10.add(y5 + "' r='");
						result10.add(con4.drawMutsDotsSize + " fill='");
						result10.add(con4.drawMutsDotsColor);
						if(!con4.drawMutsDotsDashedArray.isEmpty()) {
							result10.add(" stroke-dasharray='");
							result10.add(con4.drawMutsDotsDashedArray.join(","));
							result10.add("'");
						}
						result10.add("/>");
					}
					if(con4.drawMutsByLine) {
						var x12 = x5 - eVY1 * con4.drawMutsLineLen;
						var y12 = y5 + eVX1 * con4.drawMutsLineLen;
						var x21 = x5 + eVY1 * con4.drawMutsLineLen;
						var y21 = y5 - eVX1 * con4.drawMutsLineLen;
						result10.add("<line x1='");
						result10.add(x12 + "' y1='");
						result10.add(y12 + "' x2='");
						result10.add(x21 + "' y2='");
						result10.add(y21 + "' stroke='");
						result10.add(con4.drawMutsLineStrokeColor + "' stroke-width='");
						result10.add(con4.drawMutsLineWidth + "'");
						if(!con4.drawMutsLineDashedArray.isEmpty()) {
							result10.add(" stroke-dasharray='");
							result10.add(con4.drawMutsLineDashedArray.join(","));
							result10.add("'");
						}
						result10.add("/>");
					}
					if(con4.drawMutsByText) {
						result10.add("<text x='");
						result10.add(x5 + con4.drawMutsTextPX + "' y='");
						result10.add(y5 + con4.drawMutsTextSize / 2 + con4.drawMutsTextPY + "' fill='");
						result10.add(con4.drawMutsTextColor + "' font-family='");
						result10.add(con4.drawMutsTextFont + "' font-size='");
						result10.add(con4.drawMutsTextSize + "'");
						result10.add(">" + text1 + "</text>");
					}
				}
			}
			result9.add(result10.join(""));
		}
	}
	if(g_drawCurves) {
		result9.add("<g fill='none'>");
		var _g_head57 = g_links.h;
		while(_g_head57 != null) {
			var val57 = _g_head57.item;
			_g_head57 = _g_head57.next;
			var link9 = val57;
			var result11 = new List();
			result11.add("<path d='M");
			result11.add(link9.n1.xPos + " ");
			result11.add(link9.n1.yPos + " Q");
			result11.add(" " + (2 * link9.xPos - (link9.n1.xPos + link9.n2.xPos) / 2));
			result11.add(" " + (2 * link9.yPos - (link9.n1.yPos + link9.n2.yPos) / 2));
			result11.add(" " + link9.n2.xPos);
			result11.add(" " + link9.n2.yPos);
			result11.add("' stroke='");
			result11.add(link9.strokeColor);
			result11.add("' stroke-width='");
			result11.add(link9.strokeWidth + "' ");
			if(!link9.dashedArray.isEmpty()) {
				result11.add("stroke-dasharray='");
				result11.add(link9.dashedArray.join(","));
				result11.add("' ");
			}
			result11.add("/>");
			result9.add(result11.join(""));
		}
		result9.add("</g>");
	}
	if(g_drawCircles) {
		var _g_head58 = g_nodes.h;
		while(_g_head58 != null) {
			var val58 = _g_head58.item;
			_g_head58 = _g_head58.next;
			var node35 = val58;
			var tmp4;
			if(node35.valid) {
				tmp4 = node35.svg;
			} else {
				var result12 = new List();
				node35.pie = node35.pie.filter(function(t1) {
					if(t1.first != null && t1.first != "") {
						return t1.second > 0;
					} else {
						return false;
					}
				});
				var needArcs1 = false;
				result12.add("<circle id='");
				result12.add("n" + node35.node.id);
				result12.add("' ");
				result12.add("stroke='");
				result12.add(node35.strokeColor);
				result12.add("' ");
				result12.add("stroke-width='");
				result12.add("" + node35.strokeWidth);
				result12.add("' ");
				if(!node35.dashedArray.isEmpty()) {
					result12.add("stroke-dasharray='");
					result12.add(node35.dashedArray.join(","));
					result12.add("' ");
				}
				result12.add("cx='");
				result12.add("" + node35.xPos);
				result12.add("' ");
				result12.add("cy='");
				result12.add("" + node35.yPos);
				result12.add("' ");
				result12.add("r='");
				result12.add("" + node35.radius);
				result12.add("' ");
				if(node35.pie.isEmpty()) {
					result12.add("fill='");
					result12.add("blue");
				} else if(node35.pie.length == 1) {
					result12.add("fill='");
					result12.add(node35.pie.first().first);
				} else {
					needArcs1 = true;
				}
				result12.add("' ");
				result12.add("/>");
				if(needArcs1) {
					var summe1 = 0;
					var _g_head59 = node35.pie.h;
					while(_g_head59 != null) {
						var val59 = _g_head59.item;
						_g_head59 = _g_head59.next;
						var p2 = val59;
						summe1 += p2.second;
					}
					var cs1 = 0;
					var _g_head60 = node35.pie.h;
					while(_g_head60 != null) {
						var val60 = _g_head60.item;
						_g_head60 = _g_head60.next;
						var p3 = val60;
						var color1 = p3.first;
						var perc1 = p3.second / summe1;
						var pX11 = Math.sin(cs1 / summe1 * 2 * Math.PI) * node35.radius + node35.xPos;
						var pY11 = -Math.cos(cs1 / summe1 * 2 * Math.PI) * node35.radius + node35.xPos;
						cs1 += p3.second;
						var pX21 = Math.sin(cs1 / summe1 * 2 * Math.PI) * node35.radius + node35.xPos;
						var pY21 = -Math.cos(cs1 / summe1 * 2 * Math.PI) * node35.radius + node35.xPos;
						var arcFlag1 = perc1 < 0.5 ? 0 : 1;
						result12.add("<path fill='" + color1 + "' d='M" + node35.xPos + "," + node35.yPos + " L" + pX11 + "," + pY11 + " A" + node35.radius + "," + node35.radius + " 1 " + arcFlag1 + ",1 " + pX21 + ", " + pY21 + " z'/>");
					}
				}
				node35.svg = result12.join("");
				node35.valid = true;
				tmp4 = node35.svg;
			}
			result9.add(tmp4);
		}
	}
	if(g_drawAngles) {
		var _g_head61 = g_cons.h;
		while(_g_head61 != null) {
			var val61 = _g_head61.item;
			_g_head61 = _g_head61.next;
			var c11 = val61;
			var _g_head62 = g_cons.h;
			while(_g_head62 != null) {
				var val62 = _g_head62.item;
				_g_head62 = _g_head62.next;
				var c21 = val62;
				if(c11.id > c21.id) {
					var nA1 = null;
					var nB1 = null;
					var nC1 = null;
					if(c11.n1 == c21.n1) {
						nA1 = c11.n2;
						nB1 = c21.n2;
						nC1 = c11.n1;
					} else if(c11.n1 == c21.n2) {
						nA1 = c11.n2;
						nB1 = c21.n1;
						nC1 = c11.n1;
					} else if(c11.n2 == c21.n1) {
						nA1 = c11.n1;
						nB1 = c21.n2;
						nC1 = c11.n2;
					} else if(c11.n2 == c21.n2) {
						nA1 = c11.n1;
						nB1 = c21.n1;
						nC1 = c11.n2;
					}
					if(nC1 != null) {
						var v1X1 = nA1.xPos - nC1.xPos;
						var v1Y1 = nA1.yPos - nC1.yPos;
						var v2X1 = nB1.xPos - nC1.xPos;
						var v2Y1 = nB1.yPos - nC1.yPos;
						var l12 = Math.sqrt(v1X1 * v1X1 + v1Y1 * v1Y1);
						var l22 = Math.sqrt(v2X1 * v2X1 + v2Y1 * v2Y1);
						var c3 = v1X1 * v2X1 + v1Y1 * v2Y1;
						var wXV1 = v1X1 / l12 + v2X1 / l22;
						var wYV1 = v1Y1 / l12 + v2Y1 / l22;
						var wL1 = Math.sqrt(wXV1 * wXV1 + wYV1 * wYV1);
						var xx1 = nC1.xPos + wXV1 / wL1 * (nC1.radius + 20);
						var yy1 = nC1.yPos + wYV1 / wL1 * (nC1.radius + 20);
						var txt1 = HxOverrides.substr("" + Math.acos(c3 / (l12 * l22)) * 360 / (2 * Math.PI),0,6);
						result9.add("<text x='" + xx1 + "' y='" + yy1 + "' text-anchor='middle'>" + txt1 + "</text>");
					}
				}
			}
		}
	}
	if(g_drawBezierPoints) {
		var _g_head63 = g_links.h;
		while(_g_head63 != null) {
			var val63 = _g_head63.item;
			_g_head63 = _g_head63.next;
			var link10 = val63;
			result9.add("<circle cx='" + link10.xPos + "' cy='" + link10.yPos + "' r='5' fill='" + link10.strokeColor + "' />");
		}
	}
	if(g_drawCenter) {
		var rx8 = 0;
		var _g_head64 = g_nodes.h;
		while(_g_head64 != null) {
			var val64 = _g_head64.item;
			_g_head64 = _g_head64.next;
			var node36 = val64;
			rx8 += node36.xPos;
		}
		var x6 = rx8 / g_nodes.length;
		var ry8 = 0;
		var _g_head65 = g_nodes.h;
		while(_g_head65 != null) {
			var val65 = _g_head65.item;
			_g_head65 = _g_head65.next;
			var node37 = val65;
			ry8 += node37.yPos;
		}
		var y6 = ry8 / g_nodes.length;
		result9.add("<line x1='" + x6 + "' y1='" + minY1 + "' x2='" + x6 + "' y2='" + maxY1 + "' stroke='green' stroke-dasharray='3 3' />");
		result9.add("<line x1='" + minX1 + "' y1='" + y6 + "' x2='" + maxX1 + "' y2='" + y6 + "' stroke='green' stroke-dasharray='3 3' />");
		var rx9 = 0;
		var _g_head66 = g_nodes.h;
		while(_g_head66 != null) {
			var val66 = _g_head66.item;
			_g_head66 = _g_head66.next;
			var node38 = val66;
			rx9 += node38.xPos;
		}
		var tmp5 = "<circle cx='" + rx9 / g_nodes.length + "' cy='";
		var ry9 = 0;
		var _g_head67 = g_nodes.h;
		while(_g_head67 != null) {
			var val67 = _g_head67.item;
			_g_head67 = _g_head67.next;
			var node39 = val67;
			ry9 += node39.yPos;
		}
		result9.add(tmp5 + ry9 / g_nodes.length + "' r='5' fill='green' />");
	}
	result9.add("</svg>");
	var s2 = result9.join("");
	haxe_Log.trace(s2,{ fileName : "StdOutPrinter.hx", lineNumber : 15, className : "util.StdOutPrinter", methodName : "printString"});
};
var draw_Graph = function(l) {
	this.drawAngles = false;
	this.drawCenter = false;
	this.drawBezierPoints = false;
	this.drawCurves = true;
	this.drawCons = true;
	this.drawCircles = true;
	this.drawCircles = true;
	this.drawCons = true;
	this.drawCurves = true;
	this.drawBezierPoints = false;
	this.drawCenter = false;
	this.drawAngles = false;
	this.nodes = new List();
	this.cons = new List();
	this.links = new List();
	var _g_head = l.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var e = val;
		this.nodes.add(new draw_NodePos(e));
	}
	var nextConId = 0;
	var _g_head1 = this.nodes.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node1 = val1;
		var _g_head2 = this.nodes.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var node2 = val2;
			if(node1.node.id > node2.node.id) {
				var _g_head3 = node2.node.cons.h;
				while(_g_head3 != null) {
					var val3 = _g_head3.item;
					_g_head3 = _g_head3.next;
					var con = val3;
					if(con.first == node1.node.id) {
						this.cons.add(new draw_Connection(nextConId++,node1,node2,con.second));
						break;
					}
				}
				var _g_head4 = node2.node.links.h;
				while(_g_head4 != null) {
					var val4 = _g_head4.item;
					_g_head4 = _g_head4.next;
					var con1 = val4;
					if(con1.first == node1.node.id) {
						this.links.add(new draw_Link(node1,node2,con1.second));
						break;
					}
				}
			}
		}
	}
};
$hxClasses["draw.Graph"] = draw_Graph;
draw_Graph.__name__ = ["draw","Graph"];
draw_Graph.dist = function(x1,y1,x2,y2) {
	var dX = x1 - x2;
	var dY = y1 - y2;
	return Math.sqrt(dX * dX + dY * dY);
};
draw_Graph.main = function() {
};
draw_Graph.prototype = {
	nodes: null
	,cons: null
	,links: null
	,drawCircles: null
	,drawCons: null
	,drawCurves: null
	,drawBezierPoints: null
	,drawCenter: null
	,drawAngles: null
	,assignMutsLines: function(drawMutsByLine,drawMutsLineStrokeColor,drawMutsLineWidth,drawMutsLineLen,drawMutsLineDashedArray) {
		var drawMutsLineDashedArray_ = new List();
		var _g = 0;
		while(_g < drawMutsLineDashedArray.length) {
			var e = drawMutsLineDashedArray[_g];
			++_g;
			drawMutsLineDashedArray_.add(e);
		}
		var _g_head = this.cons.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var con = val;
			con.drawMutsByLine = drawMutsByLine;
			con.drawMutsLineStrokeColor = drawMutsLineStrokeColor;
			con.drawMutsLineWidth = drawMutsLineWidth;
			con.drawMutsLineLen = drawMutsLineLen;
			con.drawMutsLineDashedArray = drawMutsLineDashedArray_;
		}
	}
	,assignMutsText: function(drawMutsByText,drawMutsTextFont,drawMutsTextSize,drawMutsTextColor,drawMutsTextPX,drawMutsTextPY) {
		var _g_head = this.cons.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var con = val;
			con.drawMutsByText = drawMutsByText;
			con.drawMutsTextFont = drawMutsTextFont;
			con.drawMutsTextSize = drawMutsTextSize;
			con.drawMutsTextColor = drawMutsTextColor;
			con.drawMutsTextPX = drawMutsTextPX;
			con.drawMutsTextPY = drawMutsTextPY;
		}
	}
	,assignButsByDots: function(drawMutsByDots,drawMutsDotsSize,drawMutsDotsColor,drawMutsDotsDashedArray) {
		var drawMutsDotsDashedArray_ = new List();
		var _g = 0;
		while(_g < drawMutsDotsDashedArray.length) {
			var e = drawMutsDotsDashedArray[_g];
			++_g;
			drawMutsDotsDashedArray_.add(e);
		}
		var _g_head = this.cons.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var con = val;
			con.drawMutsByDots = drawMutsByDots;
			con.drawMutsDotsSize = drawMutsDotsSize;
			con.drawMutsDotsColor = drawMutsDotsColor;
			con.drawMutsDotsDashedArray = drawMutsDotsDashedArray_;
		}
	}
	,getNearestO: function(x,y) {
		var maxX = -Infinity;
		var maxY = -Infinity;
		var minX = Infinity;
		var minY = Infinity;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			maxX = Math.max(maxX,node.xPos + node.radius);
			maxY = Math.max(maxY,node.yPos + node.radius);
			minX = Math.min(minX,node.xPos - node.radius);
			minY = Math.min(minY,node.yPos - node.radius);
		}
		var _g_head1 = this.links.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var link = val1;
			var tMax = 0;
			var bX = 2 * link.xPos - (link.n1.xPos + link.n2.xPos) / 2;
			if(2 * bX - link.n1.xPos - link.n2.xPos != 0) {
				tMax = (bX - link.n1.xPos) / (2 * bX - link.n1.xPos - link.n2.xPos);
			}
			if(0 <= tMax && tMax <= 1) {
				tMax = tMax;
			} else {
				tMax = 0;
			}
			var x1 = (1 - tMax) * ((1 - tMax) * link.n1.xPos + tMax * bX) + tMax * ((1 - tMax) * bX + tMax * link.n2.xPos);
			var tMax1 = 0;
			var bY = 2 * link.yPos - (link.n1.yPos + link.n2.yPos) / 2;
			if(2 * bY - link.n1.yPos - link.n2.yPos != 0) {
				tMax1 = (bY - link.n1.yPos) / (2 * bY - link.n1.yPos - link.n2.yPos);
			}
			if(0 <= tMax1 && tMax1 <= 1) {
				tMax1 = tMax1;
			} else {
				tMax1 = 0;
			}
			var y1 = (1 - tMax1) * ((1 - tMax1) * link.n1.yPos + tMax1 * bY) + tMax1 * ((1 - tMax1) * bY + tMax1 * link.n2.yPos);
			maxX = Math.max(maxX,x1);
			maxY = Math.max(maxY,y1);
			minX = Math.min(minX,x1);
			minY = Math.min(minY,y1);
		}
		x = x + minX - 15;
		y = y + minY - 15;
		var result = null;
		var best = Infinity;
		var d = 0;
		if(this.drawCircles) {
			var _g_head2 = this.nodes.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var o = val2;
				var dX = x - o.xPos;
				var dY = y - o.yPos;
				d = Math.sqrt(dX * dX + dY * dY);
				if(d < best) {
					best = d;
					result = o;
				}
			}
		}
		if(this.drawBezierPoints) {
			var _g_head3 = this.links.h;
			while(_g_head3 != null) {
				var val3 = _g_head3.item;
				_g_head3 = _g_head3.next;
				var o1 = val3;
				var dX1 = x - o1.xPos;
				var dY1 = y - o1.yPos;
				d = Math.sqrt(dX1 * dX1 + dY1 * dY1);
				if(d < best) {
					best = d;
					result = o1;
				}
			}
		}
		return result;
	}
	,pieToTxt: function(pie) {
		var result = new List();
		var _g_head = pie.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var p = val;
			result.add(p.first + "\x01" + p.second);
		}
		return result.join("\x03");
	}
	,saveStyle: function() {
		var result = new List();
		var n = new List();
		n.add(this.drawCircles ? "1" : "0");
		n.add(this.drawCons ? "1" : "0");
		n.add(this.drawCurves ? "1" : "0");
		n.add(this.drawBezierPoints ? "1" : "0");
		n.add(this.drawCenter ? "1" : "0");
		n.add(this.drawAngles ? "1" : "0");
		result.add(n.join("\x02"));
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			var n1 = new List();
			n1.add("" + node.xPos);
			n1.add("" + node.yPos);
			n1.add("" + node.radius);
			var pie = node.pie;
			var result1 = new List();
			var _g_head1 = pie.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				result1.add(p.first + "\x01" + p.second);
			}
			n1.add(result1.join("\x03"));
			n1.add(node.strokeColor);
			n1.add("" + node.strokeWidth);
			n1.add(node.dashedArray.join("|"));
			result.add(n1.join("\x02"));
		}
		var _g_head2 = this.cons.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var con = val2;
			var n2 = new List();
			n2.add(con.strokeColor);
			n2.add("" + con.strokeWidth);
			n2.add(con.dashedArray.join("|"));
			n2.add(con.drawMutsByLine ? "1" : "0");
			n2.add(con.drawMutsLineStrokeColor);
			n2.add("" + con.drawMutsLineWidth);
			n2.add("" + con.drawMutsLineLen);
			n2.add("" + con.drawMutsLineDashedArray.join("|"));
			n2.add(con.drawMutsByText ? "1" : "0");
			n2.add(con.drawMutsTextFont);
			n2.add("" + con.drawMutsTextSize);
			n2.add(con.drawMutsTextColor);
			n2.add("" + con.drawMutsTextPX);
			n2.add("" + con.drawMutsTextPY);
			n2.add(con.drawMutsByDots ? "1" : "0");
			n2.add("" + con.drawMutsDotsSize);
			n2.add(con.drawMutsDotsColor);
			n2.add(con.drawMutsDotsDashedArray.join("|"));
			result.add(n2.join("\x02"));
		}
		var _g_head3 = this.links.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var link = val3;
			var n3 = new List();
			n3.add("" + link.w);
			n3.add(link.strokeColor);
			n3.add("" + link.strokeWidth);
			n3.add(link.dashedArray.join("|"));
			n3.add("" + link.xPos);
			n3.add("" + link.yPos);
			result.add(n3.join("\x02"));
		}
		return result.join("\n");
	}
	,parsePie: function(s) {
		var result = new List();
		var _g = 0;
		var _g1 = s.split("\x03");
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var d = p.split("\x01");
			result.add(new util_Pair(d[0],Std.parseInt(d[1])));
		}
		return result;
	}
	,loadStyle: function(style) {
		var lines = new List();
		var _g = 0;
		var _g1 = style.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			lines.add(line);
		}
		var attrs = lines.pop().split("\x02");
		this.drawCircles = attrs[0] == "1";
		this.drawCons = attrs[1] == "1";
		this.drawCurves = attrs[2] == "1";
		this.drawBezierPoints = attrs[3] == "1";
		this.drawCenter = attrs[4] == "1";
		this.drawAngles = attrs[5] == "1";
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			var attrs1 = lines.pop().split("\x02");
			var n = parseFloat(attrs1[0]);
			node.valid = false;
			node.xPos = n;
			var n1 = parseFloat(attrs1[1]);
			node.valid = false;
			node.yPos = n1;
			var n2 = parseFloat(attrs1[2]);
			node.valid = false;
			node.radius = n2;
			var result = new List();
			var _g2 = 0;
			var _g11 = attrs1[3].split("\x03");
			while(_g2 < _g11.length) {
				var p = _g11[_g2];
				++_g2;
				var d = p.split("\x01");
				result.add(new util_Pair(d[0],Std.parseInt(d[1])));
			}
			node.valid = false;
			node.pie = result;
			node.valid = false;
			node.strokeColor = attrs1[4];
			var n3 = parseFloat(attrs1[5]);
			node.valid = false;
			node.strokeWidth = n3;
			var l = new List();
			var _g3 = 0;
			var _g12 = attrs1[6].split("|");
			while(_g3 < _g12.length) {
				var f = _g12[_g3];
				++_g3;
				l.add(parseFloat(f));
			}
			node.valid = false;
			node.dashedArray = l;
		}
		var _g_head1 = this.cons.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var con = val1;
			var attrs2 = lines.pop().split("\x02");
			con.strokeColor = attrs2[0];
			con.strokeWidth = parseFloat(attrs2[1]);
			con.dashedArray = new List();
			var _g4 = 0;
			var _g13 = attrs2[2].split("|");
			while(_g4 < _g13.length) {
				var f1 = _g13[_g4];
				++_g4;
				con.dashedArray.add(parseFloat(f1));
			}
			con.drawMutsByLine = attrs2[3] == "1";
			con.drawMutsLineStrokeColor = attrs2[4];
			con.drawMutsLineWidth = parseFloat(attrs2[5]);
			con.drawMutsLineLen = parseFloat(attrs2[6]);
			con.drawMutsLineDashedArray = new List();
			var _g5 = 0;
			var _g14 = attrs2[7].split("|");
			while(_g5 < _g14.length) {
				var f2 = _g14[_g5];
				++_g5;
				con.drawMutsLineDashedArray.add(parseFloat(f2));
			}
			con.drawMutsByText = attrs2[8] == "1";
			con.drawMutsTextFont = attrs2[9];
			con.drawMutsTextSize = parseFloat(attrs2[10]);
			con.drawMutsTextColor = attrs2[11];
			con.drawMutsTextPX = parseFloat(attrs2[12]);
			con.drawMutsTextPY = parseFloat(attrs2[13]);
			con.drawMutsByDots = attrs2[14] == "1";
			con.drawMutsDotsSize = parseFloat(attrs2[15]);
			con.drawMutsDotsColor = attrs2[16];
			con.drawMutsDotsDashedArray = new List();
			var _g6 = 0;
			var _g15 = attrs2[17].split("|");
			while(_g6 < _g15.length) {
				var f3 = _g15[_g6];
				++_g6;
				con.drawMutsDotsDashedArray.add(parseFloat(f3));
			}
		}
		var _g_head2 = this.links.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var link = val2;
			var attrs3 = lines.pop().split("\x02");
			link.w = parseFloat(attrs3[0]);
			link.strokeColor = attrs3[1];
			link.strokeWidth = parseFloat(attrs3[2]);
			link.dashedArray = new List();
			var _g7 = 0;
			var _g16 = attrs3[3].split("|");
			while(_g7 < _g16.length) {
				var f4 = _g16[_g7];
				++_g7;
				link.dashedArray.add(parseFloat(f4));
			}
			link.xPos = parseFloat(attrs3[4]);
			link.yPos = parseFloat(attrs3[5]);
		}
	}
	,getSvgCode: function() {
		var maxX = -Infinity;
		var maxY = -Infinity;
		var minX = Infinity;
		var minY = Infinity;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			maxX = Math.max(maxX,node.xPos + node.radius);
			maxY = Math.max(maxY,node.yPos + node.radius);
			minX = Math.min(minX,node.xPos - node.radius);
			minY = Math.min(minY,node.yPos - node.radius);
		}
		var _g_head1 = this.links.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var link = val1;
			var tMax = 0;
			var bX = 2 * link.xPos - (link.n1.xPos + link.n2.xPos) / 2;
			if(2 * bX - link.n1.xPos - link.n2.xPos != 0) {
				tMax = (bX - link.n1.xPos) / (2 * bX - link.n1.xPos - link.n2.xPos);
			}
			if(0 <= tMax && tMax <= 1) {
				tMax = tMax;
			} else {
				tMax = 0;
			}
			var x = (1 - tMax) * ((1 - tMax) * link.n1.xPos + tMax * bX) + tMax * ((1 - tMax) * bX + tMax * link.n2.xPos);
			var tMax1 = 0;
			var bY = 2 * link.yPos - (link.n1.yPos + link.n2.yPos) / 2;
			if(2 * bY - link.n1.yPos - link.n2.yPos != 0) {
				tMax1 = (bY - link.n1.yPos) / (2 * bY - link.n1.yPos - link.n2.yPos);
			}
			if(0 <= tMax1 && tMax1 <= 1) {
				tMax1 = tMax1;
			} else {
				tMax1 = 0;
			}
			var y = (1 - tMax1) * ((1 - tMax1) * link.n1.yPos + tMax1 * bY) + tMax1 * ((1 - tMax1) * bY + tMax1 * link.n2.yPos);
			maxX = Math.max(maxX,x);
			maxY = Math.max(maxY,y);
			minX = Math.min(minX,x);
			minY = Math.min(minY,y);
		}
		var width = maxX - minX + 30;
		var height = maxY - minY + 30;
		var result = new List();
		result.add("<svg version='1.1' baseProfile='full' width='" + width);
		result.add("' height='" + height);
		result.add("' viewBox='" + (minX - 15) + "," + (minY - 15) + "," + width + "," + height + "' xmlns='http://www.w3.org/2000/svg'>");
		if(this.drawCons) {
			var _g_head2 = this.cons.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var con = val2;
				var result1 = new List();
				result1.add("<line x1='");
				result1.add(con.n1.xPos + "' y1='");
				result1.add(con.n1.yPos + "' x2='");
				result1.add(con.n2.xPos + "' y2='");
				result1.add(con.n2.yPos + "' stroke='");
				result1.add(con.strokeColor + "' stroke-width='");
				result1.add(con.strokeWidth + "' ");
				if(!con.dashedArray.isEmpty()) {
					result1.add("stroke-dasharray='");
					result1.add(con.dashedArray.join(","));
					result1.add("' ");
				}
				result1.add("/>");
				if(con.drawMutsByLine || con.drawMutsByText || con.drawMutsByDots) {
					var vX = con.n1.xPos - con.n2.xPos;
					var vY = con.n1.yPos - con.n2.yPos;
					var vL = Math.sqrt(vX * vX + vY * vY);
					var eVX = vX / vL;
					var eVY = vY / vL;
					var startX = con.n2.xPos + eVX * con.n2.radius;
					var startY = con.n2.yPos + eVY * con.n2.radius;
					var endX = con.n2.xPos + vX - eVX * con.n1.radius;
					var endY = con.n2.yPos + vY - eVY * con.n1.radius;
					vX = (endX - startX) / (con.l.length + 1);
					vY = (endY - startY) / (con.l.length + 1);
					var iii = 0;
					var _g_head3 = con.l.h;
					while(_g_head3 != null) {
						var val3 = _g_head3.item;
						_g_head3 = _g_head3.next;
						var text = val3;
						++iii;
						var x1 = startX + vX * iii;
						var y1 = startY + vY * iii;
						if(con.drawMutsByDots) {
							result1.add("<circle cx='");
							result1.add(x1 + "' cy='");
							result1.add(y1 + "' r='");
							result1.add(con.drawMutsDotsSize + " fill='");
							result1.add(con.drawMutsDotsColor);
							if(!con.drawMutsDotsDashedArray.isEmpty()) {
								result1.add(" stroke-dasharray='");
								result1.add(con.drawMutsDotsDashedArray.join(","));
								result1.add("'");
							}
							result1.add("/>");
						}
						if(con.drawMutsByLine) {
							var x11 = x1 - eVY * con.drawMutsLineLen;
							var y11 = y1 + eVX * con.drawMutsLineLen;
							var x2 = x1 + eVY * con.drawMutsLineLen;
							var y2 = y1 - eVX * con.drawMutsLineLen;
							result1.add("<line x1='");
							result1.add(x11 + "' y1='");
							result1.add(y11 + "' x2='");
							result1.add(x2 + "' y2='");
							result1.add(y2 + "' stroke='");
							result1.add(con.drawMutsLineStrokeColor + "' stroke-width='");
							result1.add(con.drawMutsLineWidth + "'");
							if(!con.drawMutsLineDashedArray.isEmpty()) {
								result1.add(" stroke-dasharray='");
								result1.add(con.drawMutsLineDashedArray.join(","));
								result1.add("'");
							}
							result1.add("/>");
						}
						if(con.drawMutsByText) {
							result1.add("<text x='");
							result1.add(x1 + con.drawMutsTextPX + "' y='");
							result1.add(y1 + con.drawMutsTextSize / 2 + con.drawMutsTextPY + "' fill='");
							result1.add(con.drawMutsTextColor + "' font-family='");
							result1.add(con.drawMutsTextFont + "' font-size='");
							result1.add(con.drawMutsTextSize + "'");
							result1.add(">" + text + "</text>");
						}
					}
				}
				result.add(result1.join(""));
			}
		}
		if(this.drawCurves) {
			result.add("<g fill='none'>");
			var _g_head4 = this.links.h;
			while(_g_head4 != null) {
				var val4 = _g_head4.item;
				_g_head4 = _g_head4.next;
				var link1 = val4;
				var result2 = new List();
				result2.add("<path d='M");
				result2.add(link1.n1.xPos + " ");
				result2.add(link1.n1.yPos + " Q");
				result2.add(" " + (2 * link1.xPos - (link1.n1.xPos + link1.n2.xPos) / 2));
				result2.add(" " + (2 * link1.yPos - (link1.n1.yPos + link1.n2.yPos) / 2));
				result2.add(" " + link1.n2.xPos);
				result2.add(" " + link1.n2.yPos);
				result2.add("' stroke='");
				result2.add(link1.strokeColor);
				result2.add("' stroke-width='");
				result2.add(link1.strokeWidth + "' ");
				if(!link1.dashedArray.isEmpty()) {
					result2.add("stroke-dasharray='");
					result2.add(link1.dashedArray.join(","));
					result2.add("' ");
				}
				result2.add("/>");
				result.add(result2.join(""));
			}
			result.add("</g>");
		}
		if(this.drawCircles) {
			var _g_head5 = this.nodes.h;
			while(_g_head5 != null) {
				var val5 = _g_head5.item;
				_g_head5 = _g_head5.next;
				var node1 = val5;
				var tmp;
				if(node1.valid) {
					tmp = node1.svg;
				} else {
					var result3 = new List();
					node1.pie = node1.pie.filter(function(t) {
						if(t.first != null && t.first != "") {
							return t.second > 0;
						} else {
							return false;
						}
					});
					var needArcs = false;
					result3.add("<circle id='");
					result3.add("n" + node1.node.id);
					result3.add("' ");
					result3.add("stroke='");
					result3.add(node1.strokeColor);
					result3.add("' ");
					result3.add("stroke-width='");
					result3.add("" + node1.strokeWidth);
					result3.add("' ");
					if(!node1.dashedArray.isEmpty()) {
						result3.add("stroke-dasharray='");
						result3.add(node1.dashedArray.join(","));
						result3.add("' ");
					}
					result3.add("cx='");
					result3.add("" + node1.xPos);
					result3.add("' ");
					result3.add("cy='");
					result3.add("" + node1.yPos);
					result3.add("' ");
					result3.add("r='");
					result3.add("" + node1.radius);
					result3.add("' ");
					if(node1.pie.isEmpty()) {
						result3.add("fill='");
						result3.add("blue");
					} else if(node1.pie.length == 1) {
						result3.add("fill='");
						result3.add(node1.pie.first().first);
					} else {
						needArcs = true;
					}
					result3.add("' ");
					result3.add("/>");
					if(needArcs) {
						var summe = 0;
						var _g_head6 = node1.pie.h;
						while(_g_head6 != null) {
							var val6 = _g_head6.item;
							_g_head6 = _g_head6.next;
							var p = val6;
							summe += p.second;
						}
						var cs = 0;
						var _g_head7 = node1.pie.h;
						while(_g_head7 != null) {
							var val7 = _g_head7.item;
							_g_head7 = _g_head7.next;
							var p1 = val7;
							var color = p1.first;
							var perc = p1.second / summe;
							var pX1 = Math.sin(cs / summe * 2 * Math.PI) * node1.radius + node1.xPos;
							var pY1 = -Math.cos(cs / summe * 2 * Math.PI) * node1.radius + node1.xPos;
							cs += p1.second;
							var pX2 = Math.sin(cs / summe * 2 * Math.PI) * node1.radius + node1.xPos;
							var pY2 = -Math.cos(cs / summe * 2 * Math.PI) * node1.radius + node1.xPos;
							var arcFlag = perc < 0.5 ? 0 : 1;
							result3.add("<path fill='" + color + "' d='M" + node1.xPos + "," + node1.yPos + " L" + pX1 + "," + pY1 + " A" + node1.radius + "," + node1.radius + " 1 " + arcFlag + ",1 " + pX2 + ", " + pY2 + " z'/>");
						}
					}
					node1.svg = result3.join("");
					node1.valid = true;
					tmp = node1.svg;
				}
				result.add(tmp);
			}
		}
		if(this.drawAngles) {
			var _g_head8 = this.cons.h;
			while(_g_head8 != null) {
				var val8 = _g_head8.item;
				_g_head8 = _g_head8.next;
				var c1 = val8;
				var _g_head9 = this.cons.h;
				while(_g_head9 != null) {
					var val9 = _g_head9.item;
					_g_head9 = _g_head9.next;
					var c2 = val9;
					if(c1.id > c2.id) {
						var nA = null;
						var nB = null;
						var nC = null;
						if(c1.n1 == c2.n1) {
							nA = c1.n2;
							nB = c2.n2;
							nC = c1.n1;
						} else if(c1.n1 == c2.n2) {
							nA = c1.n2;
							nB = c2.n1;
							nC = c1.n1;
						} else if(c1.n2 == c2.n1) {
							nA = c1.n1;
							nB = c2.n2;
							nC = c1.n2;
						} else if(c1.n2 == c2.n2) {
							nA = c1.n1;
							nB = c2.n1;
							nC = c1.n2;
						}
						if(nC != null) {
							var v1X = nA.xPos - nC.xPos;
							var v1Y = nA.yPos - nC.yPos;
							var v2X = nB.xPos - nC.xPos;
							var v2Y = nB.yPos - nC.yPos;
							var l1 = Math.sqrt(v1X * v1X + v1Y * v1Y);
							var l2 = Math.sqrt(v2X * v2X + v2Y * v2Y);
							var c = v1X * v2X + v1Y * v2Y;
							var wXV = v1X / l1 + v2X / l2;
							var wYV = v1Y / l1 + v2Y / l2;
							var wL = Math.sqrt(wXV * wXV + wYV * wYV);
							var xx = nC.xPos + wXV / wL * (nC.radius + 20);
							var yy = nC.yPos + wYV / wL * (nC.radius + 20);
							var txt = HxOverrides.substr("" + Math.acos(c / (l1 * l2)) * 360 / (2 * Math.PI),0,6);
							result.add("<text x='" + xx + "' y='" + yy + "' text-anchor='middle'>" + txt + "</text>");
						}
					}
				}
			}
		}
		if(this.drawBezierPoints) {
			var _g_head10 = this.links.h;
			while(_g_head10 != null) {
				var val10 = _g_head10.item;
				_g_head10 = _g_head10.next;
				var link2 = val10;
				result.add("<circle cx='" + link2.xPos + "' cy='" + link2.yPos + "' r='5' fill='" + link2.strokeColor + "' />");
			}
		}
		if(this.drawCenter) {
			var rx = 0;
			var _g_head11 = this.nodes.h;
			while(_g_head11 != null) {
				var val11 = _g_head11.item;
				_g_head11 = _g_head11.next;
				var node2 = val11;
				rx += node2.xPos;
			}
			var x3 = rx / this.nodes.length;
			var ry = 0;
			var _g_head12 = this.nodes.h;
			while(_g_head12 != null) {
				var val12 = _g_head12.item;
				_g_head12 = _g_head12.next;
				var node3 = val12;
				ry += node3.yPos;
			}
			var y3 = ry / this.nodes.length;
			result.add("<line x1='" + x3 + "' y1='" + minY + "' x2='" + x3 + "' y2='" + maxY + "' stroke='green' stroke-dasharray='3 3' />");
			result.add("<line x1='" + minX + "' y1='" + y3 + "' x2='" + maxX + "' y2='" + y3 + "' stroke='green' stroke-dasharray='3 3' />");
			var rx1 = 0;
			var _g_head13 = this.nodes.h;
			while(_g_head13 != null) {
				var val13 = _g_head13.item;
				_g_head13 = _g_head13.next;
				var node4 = val13;
				rx1 += node4.xPos;
			}
			var tmp1 = "<circle cx='" + rx1 / this.nodes.length + "' cy='";
			var ry1 = 0;
			var _g_head14 = this.nodes.h;
			while(_g_head14 != null) {
				var val14 = _g_head14.item;
				_g_head14 = _g_head14.next;
				var node5 = val14;
				ry1 += node5.yPos;
			}
			result.add(tmp1 + ry1 / this.nodes.length + "' r='5' fill='green' />");
		}
		result.add("</svg>");
		return result.join("");
	}
	,assignLinkPos: function() {
		var l = new List();
		var _g_head = this.links.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var link = val;
			link.xPos = NaN;
			link.yPos = NaN;
			var vX = link.n1.xPos - link.n2.xPos;
			var vY = link.n1.yPos - link.n2.yPos;
			var vrX = -vY / 8;
			var vrY = vX / 8;
			var mX = link.n2.xPos + vX / 2;
			var mY = link.n2.yPos + vY / 2;
			link.x1 = mX - vrX;
			link.y1 = mY - vrY;
			link.x2 = mX + vrX;
			link.y2 = mY + vrY;
			link.e1 = 0;
			link.e2 = 0;
			var _g_head1 = this.nodes.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var node = val1;
				var dX = node.xPos - link.x1;
				var dY = node.yPos - link.y1;
				link.e1 += 1 / Math.sqrt(dX * dX + dY * dY);
				var dX1 = node.xPos - link.x2;
				var dY1 = node.yPos - link.y2;
				link.e2 += 1 / Math.sqrt(dX1 * dX1 + dY1 * dY1);
			}
			l.add(link);
		}
		while(!l.isEmpty()) {
			var bestEDiff = -1.0;
			var bestLink = null;
			var _g_head2 = l.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var link1 = val2;
				var eDiff = Math.abs(link1.e1 - link1.e2);
				if(eDiff > bestEDiff || bestEDiff == -1) {
					bestEDiff = eDiff;
					bestLink = link1;
				}
			}
			bestLink.xPos = bestLink.e1 < bestLink.e2 ? bestLink.x1 : bestLink.x2;
			bestLink.yPos = bestLink.e1 < bestLink.e2 ? bestLink.y1 : bestLink.y2;
			l.remove(bestLink);
		}
	}
	,assignRandomNodePos: function() {
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			var n = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
			node.valid = false;
			node.xPos = n;
			var n1 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
			node.valid = false;
			node.yPos = n1;
		}
		var _g_head1 = this.nodes.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var node1 = val1;
			var needCheck = true;
			while(needCheck) {
				needCheck = false;
				var _g_head2 = this.nodes.h;
				while(_g_head2 != null) {
					var val2 = _g_head2.item;
					_g_head2 = _g_head2.next;
					var node2 = val2;
					if(node1.node.id > node2.node.id && node1.xPos == node2.xPos && node2.yPos == node2.yPos) {
						var n2 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
						node1.valid = false;
						node1.xPos = n2;
						var n3 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
						node1.valid = false;
						node1.yPos = n3;
						needCheck = true;
						break;
					}
				}
			}
		}
	}
	,checkNoNodeAtSamePoint: function() {
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node1 = val;
			var needCheck = true;
			while(needCheck) {
				needCheck = false;
				var _g_head1 = this.nodes.h;
				while(_g_head1 != null) {
					var val1 = _g_head1.item;
					_g_head1 = _g_head1.next;
					var node2 = val1;
					if(node1.node.id > node2.node.id && node1.xPos == node2.xPos && node2.yPos == node2.yPos) {
						var n = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
						node1.valid = false;
						node1.xPos = n;
						var n1 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
						node1.valid = false;
						node1.yPos = n1;
						needCheck = true;
						break;
					}
				}
			}
		}
	}
	,calcCenterX: function() {
		var rx = 0;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			rx += node.xPos;
		}
		return rx / this.nodes.length;
	}
	,calcCenterY: function() {
		var ry = 0;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			ry += node.yPos;
		}
		return ry / this.nodes.length;
	}
	,centerPos: function() {
		var rx = 0;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			rx += node.xPos;
		}
		var cx = rx / this.nodes.length;
		var ry = 0;
		var _g_head1 = this.nodes.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var node1 = val1;
			ry += node1.yPos;
		}
		var cy = ry / this.nodes.length;
		var _g_head2 = this.nodes.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var node2 = val2;
			node2.valid = false;
			node2.xPos -= cx;
			node2.valid = false;
			node2.yPos -= cy;
		}
	}
	,stretch: function(fact) {
		var rx = 0;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			rx += node.xPos;
		}
		var cx = rx / this.nodes.length;
		var ry = 0;
		var _g_head1 = this.nodes.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var node1 = val1;
			ry += node1.yPos;
		}
		var cy = ry / this.nodes.length;
		var _g_head2 = this.nodes.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var node2 = val2;
			node2.valid = false;
			node2.xPos -= cx;
			node2.valid = false;
			node2.yPos -= cy;
		}
		var rx1 = 0;
		var _g_head3 = this.nodes.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var node3 = val3;
			rx1 += node3.xPos;
		}
		var cx1 = rx1 / this.nodes.length;
		var ry1 = 0;
		var _g_head4 = this.nodes.h;
		while(_g_head4 != null) {
			var val4 = _g_head4.item;
			_g_head4 = _g_head4.next;
			var node4 = val4;
			ry1 += node4.yPos;
		}
		var cy1 = ry1 / this.nodes.length;
		var _g_head5 = this.nodes.h;
		while(_g_head5 != null) {
			var val5 = _g_head5.item;
			_g_head5 = _g_head5.next;
			var node5 = val5;
			var vX = node5.xPos - cx1;
			var vY = node5.yPos - cy1;
			vX *= fact;
			vY *= fact;
			node5.valid = false;
			node5.xPos = cx1 + vX;
			node5.valid = false;
			node5.yPos = cy1 + vY;
		}
	}
	,rotate: function(angle) {
		var rx = 0;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			rx += node.xPos;
		}
		var cx = rx / this.nodes.length;
		var ry = 0;
		var _g_head1 = this.nodes.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var node1 = val1;
			ry += node1.yPos;
		}
		var cy = ry / this.nodes.length;
		var _g_head2 = this.nodes.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var node2 = val2;
			node2.valid = false;
			node2.xPos -= cx;
			node2.valid = false;
			node2.yPos -= cy;
		}
		var rx1 = 0;
		var _g_head3 = this.nodes.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var node3 = val3;
			rx1 += node3.xPos;
		}
		var cx1 = rx1 / this.nodes.length;
		var ry1 = 0;
		var _g_head4 = this.nodes.h;
		while(_g_head4 != null) {
			var val4 = _g_head4.item;
			_g_head4 = _g_head4.next;
			var node4 = val4;
			ry1 += node4.yPos;
		}
		var cy1 = ry1 / this.nodes.length;
		var _g_head5 = this.nodes.h;
		while(_g_head5 != null) {
			var val5 = _g_head5.item;
			_g_head5 = _g_head5.next;
			var node5 = val5;
			var vX = node5.xPos - cx1;
			var vY = node5.yPos - cy1;
			vX = vX * Math.cos(angle) - vY * Math.sin(angle);
			vY = vX * Math.sin(angle) + vY * Math.cos(angle);
			node5.valid = false;
			node5.xPos = cx1 + vX;
			node5.valid = false;
			node5.yPos = cy1 + vY;
		}
		var _g_head6 = this.links.h;
		while(_g_head6 != null) {
			var val6 = _g_head6.item;
			_g_head6 = _g_head6.next;
			var link = val6;
			var vX1 = link.xPos - cx1;
			var vY1 = link.yPos - cy1;
			vX1 = vX1 * Math.cos(angle) - vY1 * Math.sin(angle);
			vY1 = vX1 * Math.sin(angle) + vY1 * Math.cos(angle);
			link.xPos = cx1 + vX1;
			link.yPos = cy1 + vY1;
		}
		var rx2 = 0;
		var _g_head7 = this.nodes.h;
		while(_g_head7 != null) {
			var val7 = _g_head7.item;
			_g_head7 = _g_head7.next;
			var node6 = val7;
			rx2 += node6.xPos;
		}
		var cx2 = rx2 / this.nodes.length;
		var ry2 = 0;
		var _g_head8 = this.nodes.h;
		while(_g_head8 != null) {
			var val8 = _g_head8.item;
			_g_head8 = _g_head8.next;
			var node7 = val8;
			ry2 += node7.yPos;
		}
		var cy2 = ry2 / this.nodes.length;
		var _g_head9 = this.nodes.h;
		while(_g_head9 != null) {
			var val9 = _g_head9.item;
			_g_head9 = _g_head9.next;
			var node8 = val9;
			node8.valid = false;
			node8.xPos -= cx2;
			node8.valid = false;
			node8.yPos -= cy2;
		}
	}
	,fluct: function() {
		return 10 * Math.random() * (Math.random() > 0.5 ? 1 : -1);
	}
	,forceDirectedMethod: function(setRandomInitial,damping,smE,kn,ks,kc,steps,remVelocity) {
		if(remVelocity == null) {
			remVelocity = true;
		}
		if(steps == null) {
			steps = 1000;
		}
		if(kc == null) {
			kc = 5.0;
		}
		if(ks == null) {
			ks = 0.2;
		}
		if(kn == null) {
			kn = 1.0;
		}
		if(setRandomInitial) {
			var _g_head = this.nodes.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var node = val;
				var n = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
				node.valid = false;
				node.xPos = n;
				var n1 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
				node.valid = false;
				node.yPos = n1;
			}
			var _g_head1 = this.nodes.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var node1 = val1;
				var needCheck = true;
				while(needCheck) {
					needCheck = false;
					var _g_head2 = this.nodes.h;
					while(_g_head2 != null) {
						var val2 = _g_head2.item;
						_g_head2 = _g_head2.next;
						var node2 = val2;
						if(node1.node.id > node2.node.id && node1.xPos == node2.xPos && node2.yPos == node2.yPos) {
							var n2 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
							node1.valid = false;
							node1.xPos = n2;
							var n3 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
							node1.valid = false;
							node1.yPos = n3;
							needCheck = true;
							break;
						}
					}
				}
			}
		} else {
			var _g_head3 = this.nodes.h;
			while(_g_head3 != null) {
				var val3 = _g_head3.item;
				_g_head3 = _g_head3.next;
				var node11 = val3;
				var needCheck1 = true;
				while(needCheck1) {
					needCheck1 = false;
					var _g_head4 = this.nodes.h;
					while(_g_head4 != null) {
						var val4 = _g_head4.item;
						_g_head4 = _g_head4.next;
						var node21 = val4;
						if(node11.node.id > node21.node.id && node11.xPos == node21.xPos && node21.yPos == node21.yPos) {
							var n4 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
							node11.valid = false;
							node11.xPos = n4;
							var n5 = (Math.random() > 0.5 ? -1 : 1) * 1000 * Math.random();
							node11.valid = false;
							node11.yPos = n5;
							needCheck1 = true;
							break;
						}
					}
				}
			}
		}
		if(remVelocity) {
			var _g_head5 = this.nodes.h;
			while(_g_head5 != null) {
				var val5 = _g_head5.item;
				_g_head5 = _g_head5.next;
				var node3 = val5;
				node3.velocityX = 0;
				node3.velocityY = 0;
			}
		}
		var tE = 0;
		var xDif;
		var yDif;
		var r;
		var stepCount = 0;
		var stopCritSteps;
		while(true) {
			++stepCount;
			stopCritSteps = false;
			tE = 0;
			var _g_head6 = this.nodes.h;
			while(_g_head6 != null) {
				var val6 = _g_head6.item;
				_g_head6 = _g_head6.next;
				var node4 = val6;
				node4.forceX = 0;
				node4.forceY = 0;
				var _g_head7 = this.nodes.h;
				while(_g_head7 != null) {
					var val7 = _g_head7.item;
					_g_head7 = _g_head7.next;
					var oNode = val7;
					if(node4 != oNode) {
						xDif = node4.xPos - oNode.xPos;
						yDif = node4.yPos - oNode.yPos;
						r = Math.sqrt(xDif * xDif + yDif * yDif);
						if(r > 1) {
							node4.forceX += kn * xDif / (r * r);
							node4.forceY += kn * yDif / (r * r);
						} else {
							r += 0.1;
							node4.forceX += kn * (xDif + 10 * Math.random() * (Math.random() > 0.5 ? 1 : -1)) / (r * r);
							node4.forceY += kn * (yDif + 10 * Math.random() * (Math.random() > 0.5 ? 1 : -1)) / (r * r);
						}
					}
				}
				var _g_head8 = this.cons.h;
				while(_g_head8 != null) {
					var val8 = _g_head8.item;
					_g_head8 = _g_head8.next;
					var con = val8;
					if(con.n1 == node4) {
						xDif = con.n2.xPos - con.n1.xPos;
						yDif = con.n2.yPos - con.n1.yPos;
					} else if(con.n2 == node4) {
						xDif = con.n1.xPos - con.n2.xPos;
						yDif = con.n1.yPos - con.n2.yPos;
					} else {
						continue;
					}
					r = Math.sqrt(xDif * xDif + yDif * yDif);
					var displacement = r - con.expLength;
					xDif /= r;
					yDif /= r;
					node4.forceX += ks * displacement * xDif;
					node4.forceY += ks * displacement * yDif;
				}
			}
			var _g_head9 = this.nodes.h;
			while(_g_head9 != null) {
				var val9 = _g_head9.item;
				_g_head9 = _g_head9.next;
				var node5 = val9;
				node5.velocityX = (node5.velocityX + node5.forceX) * damping;
				node5.velocityY = (node5.velocityY + node5.forceY) * damping;
				node5.valid = false;
				node5.xPos += node5.velocityX;
				node5.valid = false;
				node5.yPos += node5.velocityY;
				var l = Math.sqrt(node5.velocityX * node5.velocityX + node5.velocityY * node5.velocityY);
				tE += l * l;
			}
			if(stepCount > steps && steps > -1) {
				stopCritSteps = true;
			}
			if(!(tE > smE && !stopCritSteps)) {
				break;
			}
		}
		return tE;
	}
	,calculateEnergy: function() {
		var result = 0;
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node1 = val;
			var _g_head1 = this.nodes.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var node2 = val1;
				if(node1.node.id > node2.node.id) {
					var dX = node1.xPos - node2.xPos;
					var dY = node1.yPos - node2.yPos;
					result += 1.0 / Math.sqrt(dX * dX + dY * dY);
				}
			}
		}
		var _g_head2 = this.cons.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var con = val2;
			var expDist = con.expLength;
			var dX1 = con.n1.xPos - con.n2.xPos;
			var dY1 = con.n1.yPos - con.n2.yPos;
			var rDist = Math.sqrt(dX1 * dX1 + dY1 * dY1);
			var diff = expDist - rDist;
			result += diff * diff;
		}
		return result;
	}
	,__class__: draw_Graph
};
var draw_Link = function(n1,n2,w) {
	this.n1 = n1;
	this.n2 = n2;
	this.w = w;
	this.strokeColor = "blue";
	this.strokeWidth = w;
	this.dashedArray = new List();
};
$hxClasses["draw.Link"] = draw_Link;
draw_Link.__name__ = ["draw","Link"];
draw_Link.prototype = {
	n1: null
	,n2: null
	,w: null
	,strokeColor: null
	,strokeWidth: null
	,dashedArray: null
	,xPos: null
	,yPos: null
	,x1: null
	,y1: null
	,x2: null
	,y2: null
	,e1: null
	,e2: null
	,set_xPos: function(n) {
		this.xPos = n;
	}
	,set_yPos: function(n) {
		this.yPos = n;
	}
	,calcCurve: function(a,b,c,t) {
		return (1 - t) * ((1 - t) * a + t * b) + t * ((1 - t) * b + t * c);
	}
	,calcCPoint: function(a,b,c) {
		return 2 * b - (a + c) / 2;
	}
	,getLinkSvg: function() {
		var result = new List();
		result.add("<path d='M");
		result.add(this.n1.xPos + " ");
		result.add(this.n1.yPos + " Q");
		result.add(" " + (2 * this.xPos - (this.n1.xPos + this.n2.xPos) / 2));
		result.add(" " + (2 * this.yPos - (this.n1.yPos + this.n2.yPos) / 2));
		result.add(" " + this.n2.xPos);
		result.add(" " + this.n2.yPos);
		result.add("' stroke='");
		result.add(this.strokeColor);
		result.add("' stroke-width='");
		result.add(this.strokeWidth + "' ");
		if(!this.dashedArray.isEmpty()) {
			result.add("stroke-dasharray='");
			result.add(this.dashedArray.join(","));
			result.add("' ");
		}
		result.add("/>");
		return result.join("");
	}
	,getMMX: function() {
		var tMax = 0;
		var bX = 2 * this.xPos - (this.n1.xPos + this.n2.xPos) / 2;
		if(2 * bX - this.n1.xPos - this.n2.xPos != 0) {
			tMax = (bX - this.n1.xPos) / (2 * bX - this.n1.xPos - this.n2.xPos);
		}
		if(0 <= tMax && tMax <= 1) {
			tMax = tMax;
		} else {
			tMax = 0;
		}
		return (1 - tMax) * ((1 - tMax) * this.n1.xPos + tMax * bX) + tMax * ((1 - tMax) * bX + tMax * this.n2.xPos);
	}
	,getMMY: function() {
		var tMax = 0;
		var bY = 2 * this.yPos - (this.n1.yPos + this.n2.yPos) / 2;
		if(2 * bY - this.n1.yPos - this.n2.yPos != 0) {
			tMax = (bY - this.n1.yPos) / (2 * bY - this.n1.yPos - this.n2.yPos);
		}
		if(0 <= tMax && tMax <= 1) {
			tMax = tMax;
		} else {
			tMax = 0;
		}
		return (1 - tMax) * ((1 - tMax) * this.n1.yPos + tMax * bY) + tMax * ((1 - tMax) * bY + tMax * this.n2.yPos);
	}
	,__class__: draw_Link
};
var draw_NodePos = function(n) {
	this.valid = false;
	this.pie = new List();
	this.node = n;
	this.radius = 3 + this.node.names.length;
	if(this.node.type == parsing_SEQ_$TYPE.MEDIAN_VECTOR) {
		this.strokeColor = "grey";
		this.strokeWidth = 1;
	} else {
		this.strokeColor = "black";
		this.strokeWidth = 3;
	}
	this.dashedArray = new List();
};
$hxClasses["draw.NodePos"] = draw_NodePos;
draw_NodePos.__name__ = ["draw","NodePos"];
draw_NodePos.prototype = {
	node: null
	,xPos: null
	,yPos: null
	,radius: null
	,pie: null
	,strokeColor: null
	,strokeWidth: null
	,dashedArray: null
	,velocityX: null
	,velocityY: null
	,forceX: null
	,forceY: null
	,valid: null
	,svg: null
	,set_xPos: function(n) {
		this.valid = false;
		this.xPos = n;
	}
	,set_yPos: function(n) {
		this.valid = false;
		this.yPos = n;
	}
	,set_radius: function(n) {
		this.valid = false;
		this.radius = n;
	}
	,set_pie: function(n) {
		this.valid = false;
		this.pie = n;
	}
	,set_strokeColor: function(n) {
		this.valid = false;
		this.strokeColor = n;
	}
	,set_strokeWidth: function(n) {
		this.valid = false;
		this.strokeWidth = n;
	}
	,set_dashedArray: function(n) {
		this.valid = false;
		this.dashedArray = n;
	}
	,getNodeSvg: function() {
		if(this.valid) {
			return this.svg;
		}
		var result = new List();
		this.pie = this.pie.filter(function(t) {
			if(t.first != null && t.first != "") {
				return t.second > 0;
			} else {
				return false;
			}
		});
		var needArcs = false;
		result.add("<circle id='");
		result.add("n" + this.node.id);
		result.add("' ");
		result.add("stroke='");
		result.add(this.strokeColor);
		result.add("' ");
		result.add("stroke-width='");
		result.add("" + this.strokeWidth);
		result.add("' ");
		if(!this.dashedArray.isEmpty()) {
			result.add("stroke-dasharray='");
			result.add(this.dashedArray.join(","));
			result.add("' ");
		}
		result.add("cx='");
		result.add("" + this.xPos);
		result.add("' ");
		result.add("cy='");
		result.add("" + this.yPos);
		result.add("' ");
		result.add("r='");
		result.add("" + this.radius);
		result.add("' ");
		if(this.pie.isEmpty()) {
			result.add("fill='");
			result.add("blue");
		} else if(this.pie.length == 1) {
			result.add("fill='");
			result.add(this.pie.first().first);
		} else {
			needArcs = true;
		}
		result.add("' ");
		result.add("/>");
		if(needArcs) {
			var summe = 0;
			var _g_head = this.pie.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				summe += p.second;
			}
			var cs = 0;
			var _g_head1 = this.pie.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p1 = val1;
				var color = p1.first;
				var perc = p1.second / summe;
				var pX1 = Math.sin(cs / summe * 2 * Math.PI) * this.radius + this.xPos;
				var pY1 = -Math.cos(cs / summe * 2 * Math.PI) * this.radius + this.xPos;
				cs += p1.second;
				var pX2 = Math.sin(cs / summe * 2 * Math.PI) * this.radius + this.xPos;
				var pY2 = -Math.cos(cs / summe * 2 * Math.PI) * this.radius + this.xPos;
				var arcFlag = perc < 0.5 ? 0 : 1;
				result.add("<path fill='" + color + "' d='M" + this.xPos + "," + this.yPos + " L" + pX1 + "," + pY1 + " A" + this.radius + "," + this.radius + " 1 " + arcFlag + ",1 " + pX2 + ", " + pY2 + " z'/>");
			}
		}
		this.svg = result.join("");
		this.valid = true;
		return this.svg;
	}
	,minX: function() {
		return this.xPos - this.radius;
	}
	,maxX: function() {
		return this.xPos + this.radius;
	}
	,minY: function() {
		return this.yPos - this.radius;
	}
	,maxY: function() {
		return this.yPos + this.radius;
	}
	,__class__: draw_NodePos
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,toString: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
haxe_Log.clear = function() {
	js_Boot.__clear_trace();
};
var interfaces_Printer = function() {
	this.indent = "  ";
	this.newline = "\n";
	this.countingOffset = 1;
};
$hxClasses["interfaces.Printer"] = interfaces_Printer;
interfaces_Printer.__name__ = ["interfaces","Printer"];
interfaces_Printer.prototype = {
	countingOffset: null
	,newline: null
	,indent: null
	,printString: null
	,close: null
	,__class__: interfaces_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) {
		d.innerHTML = "";
	}
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = ["js","Lib"];
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib["eval"] = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
var parsing_MJNetParser = function() { };
$hxClasses["parsing.MJNetParser"] = parsing_MJNetParser;
parsing_MJNetParser.__name__ = ["parsing","MJNetParser"];
parsing_MJNetParser.countIndents = function(s) {
	var result = 0;
	while(true) {
		var cCode = HxOverrides.cca(s,result);
		var result1 = false;
		var _g = 0;
		var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
		while(_g < _g1.length) {
			var ele = _g1[_g];
			++_g;
			if(ele == cCode) {
				result1 = true;
				break;
			}
		}
		if(!result1) {
			break;
		}
		++result;
	}
	return result;
};
parsing_MJNetParser.parseNet = function(fileContent) {
	var lines = fileContent.split("\n");
	var result = new List();
	var lineNo = 0;
	var currentNode = null;
	var readNames = false;
	var readCons = false;
	var readLinks = false;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		++lineNo;
		var end = line.length;
		while(true) {
			var tmp;
			if(end > 0) {
				var cCode = HxOverrides.cca(line,end - 1);
				var result1 = false;
				var _g1 = 0;
				var _g11 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g1 < _g11.length) {
					var ele = _g11[_g1];
					++_g1;
					if(ele == cCode) {
						result1 = true;
						break;
					}
				}
				tmp = result1;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--end;
		}
		var s = line.substring(0,end);
		var begin = 0;
		var sLen = s.length;
		while(true) {
			var tmp1;
			if(begin < sLen) {
				var cCode1 = HxOverrides.cca(s,begin);
				var result2 = false;
				var _g2 = 0;
				var _g12 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g2 < _g12.length) {
					var ele1 = _g12[_g2];
					++_g2;
					if(ele1 == cCode1) {
						result2 = true;
						break;
					}
				}
				tmp1 = result2;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			++begin;
		}
		var line_ = HxOverrides.substr(s,begin,null);
		if(line_ == null || line_ == "" || line_.charAt(0) == "#") {
			continue;
		}
		var result3 = 0;
		while(true) {
			var cCode2 = HxOverrides.cca(line,result3);
			var result4 = false;
			var _g3 = 0;
			var _g13 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g3 < _g13.length) {
				var ele2 = _g13[_g3];
				++_g3;
				if(ele2 == cCode2) {
					result4 = true;
					break;
				}
			}
			if(!result4) {
				break;
			}
			++result3;
		}
		var indents = result3;
		if(indents == 0 && (line_ == "SAMPLED_SEQUENCE" || line_ == "MEDIAN_VECTOR")) {
			if(currentNode != null) {
				result.add(currentNode);
			}
			currentNode = new parsing_Node();
			currentNode.type = line_ == "SAMPLED_SEQUENCE" ? parsing_SEQ_$TYPE.SAMPLED_SEQUENCE : parsing_SEQ_$TYPE.MEDIAN_VECTOR;
			readNames = false;
			readCons = false;
			readLinks = false;
			continue;
		}
		if(currentNode == null) {
			throw new js__$Boot_HaxeError("Expected SAMPLED_SEQUENCE or MEDIAN_VECTOR in line " + lineNo + "!");
		}
		if(indents == 2 && HxOverrides.substr(line_,0,"ID".length) == "ID") {
			currentNode.id = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"FFR_ID".length) == "FFR_ID") {
			currentNode.spId = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"SEQUENCE".length) == "SEQUENCE") {
			currentNode.seq = line_.split(" ")[1];
		} else if(!(indents == 2 && HxOverrides.substr(line_,0,"NB_NAMES".length) == "NB_NAMES")) {
			if(indents == 2 && HxOverrides.substr(line_,0,"NAMES".length) == "NAMES") {
				readNames = true;
				readCons = false;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"CONNECTED_TO".length) == "CONNECTED_TO") {
				readNames = false;
				readCons = true;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"LINKED_TO".length) == "LINKED_TO") {
				readNames = false;
				readCons = false;
				readLinks = true;
			} else if(indents == 4 && (readNames || readCons || readLinks)) {
				if(readNames) {
					currentNode.names.add(line_);
				} else if(readCons) {
					var d = line_.split(" ");
					var l = new List();
					var _g21 = 5;
					var _g14 = d.length;
					while(_g21 < _g14) {
						var i = _g21++;
						l.add(Std.parseInt(d[i]));
					}
					currentNode.cons.add(new util_Pair(Std.parseInt(d[1]),l));
				} else if(readLinks) {
					var d1 = line_.split(" ");
					currentNode.links.add(new util_Pair(Std.parseInt(d1[1]),Std.parseInt(d1[3])));
				}
			} else {
				throw new js__$Boot_HaxeError("Unexpected expression in line " + lineNo + "!");
			}
		}
	}
	if(currentNode != null) {
		result.add(currentNode);
	}
	return result;
};
parsing_MJNetParser.main = function() {
};
var parsing_SEQ_$TYPE = $hxClasses["parsing.SEQ_TYPE"] = { __ename__ : ["parsing","SEQ_TYPE"], __constructs__ : ["SAMPLED_SEQUENCE","MEDIAN_VECTOR"] };
parsing_SEQ_$TYPE.SAMPLED_SEQUENCE = ["SAMPLED_SEQUENCE",0];
parsing_SEQ_$TYPE.SAMPLED_SEQUENCE.toString = $estr;
parsing_SEQ_$TYPE.SAMPLED_SEQUENCE.__enum__ = parsing_SEQ_$TYPE;
parsing_SEQ_$TYPE.MEDIAN_VECTOR = ["MEDIAN_VECTOR",1];
parsing_SEQ_$TYPE.MEDIAN_VECTOR.toString = $estr;
parsing_SEQ_$TYPE.MEDIAN_VECTOR.__enum__ = parsing_SEQ_$TYPE;
parsing_SEQ_$TYPE.__empty_constructs__ = [parsing_SEQ_$TYPE.SAMPLED_SEQUENCE,parsing_SEQ_$TYPE.MEDIAN_VECTOR];
var parsing_Node = function() {
	this.names = new List();
	this.cons = new List();
	this.links = new List();
};
$hxClasses["parsing.Node"] = parsing_Node;
parsing_Node.__name__ = ["parsing","Node"];
parsing_Node.prototype = {
	type: null
	,id: null
	,spId: null
	,seq: null
	,names: null
	,cons: null
	,links: null
	,__class__: parsing_Node
};
var parsing_Parse = function() { };
$hxClasses["parsing.Parse"] = parsing_Parse;
parsing_Parse.__name__ = ["parsing","Parse"];
parsing_Parse.startsWith = function(t,s) {
	return HxOverrides.substr(t,0,s.length) == s;
};
parsing_Parse.isWhitespace = function(s,pos) {
	var cCode = HxOverrides.cca(s,pos);
	var result = false;
	var _g = 0;
	var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
	while(_g < _g1.length) {
		var ele = _g1[_g];
		++_g;
		if(ele == cCode) {
			result = true;
			break;
		}
	}
	return result;
};
parsing_Parse.stripStringBegin = function(s) {
	var begin = 0;
	var sLen = s.length;
	while(true) {
		var tmp;
		if(begin < sLen) {
			var cCode = HxOverrides.cca(s,begin);
			var result = false;
			var _g = 0;
			var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g < _g1.length) {
				var ele = _g1[_g];
				++_g;
				if(ele == cCode) {
					result = true;
					break;
				}
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		++begin;
	}
	return HxOverrides.substr(s,begin,null);
};
parsing_Parse.stripStringEnd = function(s) {
	var end = s.length;
	while(true) {
		var tmp;
		if(end > 0) {
			var cCode = HxOverrides.cca(s,end - 1);
			var result = false;
			var _g = 0;
			var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g < _g1.length) {
				var ele = _g1[_g];
				++_g;
				if(ele == cCode) {
					result = true;
					break;
				}
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		--end;
	}
	return s.substring(0,end);
};
parsing_Parse.stripString = function(s) {
	var end = s.length;
	while(true) {
		var tmp;
		if(end > 0) {
			var cCode = HxOverrides.cca(s,end - 1);
			var result = false;
			var _g = 0;
			var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g < _g1.length) {
				var ele = _g1[_g];
				++_g;
				if(ele == cCode) {
					result = true;
					break;
				}
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		--end;
	}
	var s1 = s.substring(0,end);
	var begin = 0;
	var sLen = s1.length;
	while(true) {
		var tmp1;
		if(begin < sLen) {
			var cCode1 = HxOverrides.cca(s1,begin);
			var result1 = false;
			var _g2 = 0;
			var _g11 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g2 < _g11.length) {
				var ele1 = _g11[_g2];
				++_g2;
				if(ele1 == cCode1) {
					result1 = true;
					break;
				}
			}
			tmp1 = result1;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		++begin;
	}
	return HxOverrides.substr(s1,begin,null);
};
var util_Pair = function(u,v) {
	this.second = null;
	this.first = null;
	this.first = u;
	this.second = v;
};
$hxClasses["util.Pair"] = util_Pair;
util_Pair.__name__ = ["util","Pair"];
util_Pair.prototype = {
	first: null
	,second: null
	,swapFirst: function(p) {
		var tmp = this.first;
		this.first = p.first;
		p.first = tmp;
	}
	,swapSecond: function(p) {
		var tmp = this.second;
		this.second = p.second;
		p.second = tmp;
	}
	,swap: function(p) {
		this.swapFirst(p);
		this.swapSecond(p);
	}
	,__class__: util_Pair
};
var util_StdOutPrinter = function() {
	this.indent = "  ";
	this.newline = "\n";
	this.countingOffset = 1;
};
$hxClasses["util.StdOutPrinter"] = util_StdOutPrinter;
util_StdOutPrinter.__name__ = ["util","StdOutPrinter"];
util_StdOutPrinter.__interfaces__ = [interfaces_Printer];
util_StdOutPrinter.prototype = {
	countingOffset: null
	,newline: null
	,indent: null
	,printString: function(s) {
		haxe_Log.trace(s,{ fileName : "StdOutPrinter.hx", lineNumber : 15, className : "util.StdOutPrinter", methodName : "printString"});
	}
	,close: function() {
	}
	,__class__: util_StdOutPrinter
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
function $arrayPush(x) { this.push(x); }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var Void = $hxClasses["Void"] = { __ename__ : ["Void"]};
js_Boot.__toStr = ({ }).toString;
