// Generated by Haxe 3.4.2
"use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(a[i] === obj) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(a[i] === obj) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var LEle = function(name,spId,next) {
	this.l = new List();
	this.name = name;
	this.spId = spId;
	this.next = next;
};
$hxClasses["LEle"] = LEle;
LEle.__name__ = ["LEle"];
LEle.prototype = {
	l: null
	,name: null
	,spId: null
	,next: null
	,__class__: LEle
};
var LstExtractor = function() { };
$hxClasses["LstExtractor"] = LstExtractor;
LstExtractor.__name__ = ["LstExtractor"];
LstExtractor.extract = function(p,s,onlyInd,sort,sortAlpha,outputSet) {
	var lines = s.split("\n");
	var result = new List();
	var lineNo = 0;
	var currentNode = null;
	var readNames = false;
	var readCons = false;
	var readLinks = false;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		++lineNo;
		var end = line.length;
		while(true) {
			var tmp;
			if(end > 0) {
				var cCode = HxOverrides.cca(line,end - 1);
				var result1 = false;
				var _g1 = 0;
				var _g11 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g1 < _g11.length) {
					var ele = _g11[_g1];
					++_g1;
					if(ele == cCode) {
						result1 = true;
						break;
					}
				}
				tmp = result1;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--end;
		}
		var s1 = line.substring(0,end);
		var begin = 0;
		var sLen = s1.length;
		while(true) {
			var tmp1;
			if(begin < sLen) {
				var cCode1 = HxOverrides.cca(s1,begin);
				var result2 = false;
				var _g2 = 0;
				var _g12 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g2 < _g12.length) {
					var ele1 = _g12[_g2];
					++_g2;
					if(ele1 == cCode1) {
						result2 = true;
						break;
					}
				}
				tmp1 = result2;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			++begin;
		}
		var line_ = HxOverrides.substr(s1,begin,null);
		if(line_ == null || line_ == "" || line_.charAt(0) == "#") {
			continue;
		}
		var result3 = 0;
		while(true) {
			var cCode2 = HxOverrides.cca(line,result3);
			var result4 = false;
			var _g3 = 0;
			var _g13 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g3 < _g13.length) {
				var ele2 = _g13[_g3];
				++_g3;
				if(ele2 == cCode2) {
					result4 = true;
					break;
				}
			}
			if(!result4) {
				break;
			}
			++result3;
		}
		var indents = result3;
		if(indents == 0 && (line_ == "SAMPLED_SEQUENCE" || line_ == "MEDIAN_VECTOR")) {
			if(currentNode != null) {
				result.add(currentNode);
			}
			currentNode = new parsing_Node();
			currentNode.type = line_ == "SAMPLED_SEQUENCE" ? parsing_SEQ_$TYPE.SAMPLED_SEQUENCE : parsing_SEQ_$TYPE.MEDIAN_VECTOR;
			readNames = false;
			readCons = false;
			readLinks = false;
			continue;
		}
		if(currentNode == null) {
			throw new js__$Boot_HaxeError("Expected SAMPLED_SEQUENCE or MEDIAN_VECTOR in line " + lineNo + "!");
		}
		if(indents == 2 && HxOverrides.substr(line_,0,"ID".length) == "ID") {
			currentNode.id = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"FFR_ID".length) == "FFR_ID") {
			currentNode.spId = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"SEQUENCE".length) == "SEQUENCE") {
			currentNode.seq = line_.split(" ")[1];
		} else if(!(indents == 2 && HxOverrides.substr(line_,0,"NB_NAMES".length) == "NB_NAMES")) {
			if(indents == 2 && HxOverrides.substr(line_,0,"NAMES".length) == "NAMES") {
				readNames = true;
				readCons = false;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"CONNECTED_TO".length) == "CONNECTED_TO") {
				readNames = false;
				readCons = true;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"LINKED_TO".length) == "LINKED_TO") {
				readNames = false;
				readCons = false;
				readLinks = true;
			} else if(indents == 4 && (readNames || readCons || readLinks)) {
				if(readNames) {
					currentNode.names.add(line_);
				} else if(readCons) {
					var d = line_.split(" ");
					var l = new List();
					var _g21 = 5;
					var _g14 = d.length;
					while(_g21 < _g14) {
						var i = _g21++;
						l.add(Std.parseInt(d[i]));
					}
					currentNode.cons.add(new util_Pair(Std.parseInt(d[1]),l));
				} else if(readLinks) {
					var d1 = line_.split(" ");
					currentNode.links.add(new util_Pair(Std.parseInt(d1[1]),Std.parseInt(d1[3])));
				}
			} else {
				throw new js__$Boot_HaxeError("Unexpected expression in line " + lineNo + "!");
			}
		}
	}
	if(currentNode != null) {
		result.add(currentNode);
	}
	var net = result;
	var f = null;
	var _g_head = net.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var e = val;
		var _g_head1 = e.names.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var n = val1;
			var name;
			if(onlyInd) {
				var result5 = null;
				if(n != null) {
					var pos = n.lastIndexOf("_");
					if(pos != -1) {
						result5 = HxOverrides.substr(n,0,pos);
					}
				}
				name = result5;
			} else {
				name = n;
			}
			var alreadyIn = false;
			var current = f;
			while(current != null) {
				if(current.name == name) {
					alreadyIn = true;
					break;
				}
				current = current.next;
			}
			if(!alreadyIn) {
				f = new LEle(name,e.spId,f);
			}
		}
	}
	if(sort || outputSet) {
		if(sortAlpha && !outputSet) {
			var list = f;
			if(list == null) {
				f = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e1;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g15 = 0;
						var _g4 = insize;
						while(_g15 < _g4) {
							var i1 = _g15++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e1 = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.name == q.name ? 0 : p1.name > q.name ? 1 : -1) <= 0) {
								e1 = p1;
								p1 = p1.next;
								--psize;
							} else {
								e1 = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e1;
							} else {
								list = e1;
							}
							tail = e1;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				f = list;
			}
		} else {
			var list1 = f;
			if(list1 == null) {
				f = null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e2;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g16 = 0;
						var _g5 = insize1;
						while(_g16 < _g5) {
							var i2 = _g16++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e2 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.spId == q1.spId ? p2.name == q1.name ? 0 : p2.name > q1.name ? 1 : -1 : p2.spId - q1.spId) <= 0) {
								e2 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e2 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e2;
							} else {
								list1 = e2;
							}
							tail1 = e2;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				f = list1;
			}
		}
	}
	var current1 = f;
	if(outputSet) {
		var needNewLine = false;
		var lastSpId = -1;
		while(current1 != null) {
			if(current1.spId == lastSpId) {
				p.printString("\t" + current1.name);
			} else {
				lastSpId = current1.spId;
				if(needNewLine) {
					p.printString(p.newline);
				}
				p.printString(current1.name);
			}
			current1 = current1.next;
			needNewLine = true;
		}
		p.printString(p.newline);
	} else {
		while(current1 != null) {
			p.printString(current1.name);
			p.printString("\t" + current1.spId);
			p.printString(p.newline);
			current1 = current1.next;
		}
	}
	p.close();
};
LstExtractor.main = function() {
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCharCode(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js_Boot.getClass(o);
	}
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return e[0];
};
Type.enumParameters = function(e) {
	return e.slice(2);
};
Type.enumIndex = function(e) {
	return e[1];
};
Type.allEnums = function(e) {
	return e.__empty_constructs__;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,toString: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
haxe_Log.clear = function() {
	js_Boot.__clear_trace();
};
var haxe_ds_ListSort = function() { };
$hxClasses["haxe.ds.ListSort"] = haxe_ds_ListSort;
haxe_ds_ListSort.__name__ = ["haxe","ds","ListSort"];
haxe_ds_ListSort.sort = function(list,cmp) {
	if(list == null) {
		return null;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail = null;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g1 = 0;
			var _g = insize;
			while(_g1 < _g) {
				var i = _g1++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = tail;
	return list;
};
haxe_ds_ListSort.sortSingleLinked = function(list,cmp) {
	if(list == null) {
		return null;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g1 = 0;
			var _g = insize;
			while(_g1 < _g) {
				var i = _g1++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	return list;
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.__properties__ = {get_length:"get_length"};
haxe_ds__$Vector_Vector_$Impl_$._new = function(length) {
	var this1 = new Array(length);
	return this1;
};
haxe_ds__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1[index];
};
haxe_ds__$Vector_Vector_$Impl_$.set = function(this1,index,val) {
	return this1[index] = val;
};
haxe_ds__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	return this1.slice(0);
};
haxe_ds__$Vector_Vector_$Impl_$.toData = function(this1) {
	return this1;
};
haxe_ds__$Vector_Vector_$Impl_$.fromData = function(data) {
	return data;
};
haxe_ds__$Vector_Vector_$Impl_$.fromArrayCopy = function(array) {
	return array.slice(0);
};
haxe_ds__$Vector_Vector_$Impl_$.copy = function(this1) {
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
	return r;
};
haxe_ds__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var b_b = "";
	var i = 0;
	var len = this1.length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i1 = _g1++;
		b_b += Std.string(Std.string(this1[i1]));
		if(i1 < len - 1) {
			b_b += sep == null ? "null" : "" + sep;
		}
	}
	return b_b;
};
haxe_ds__$Vector_Vector_$Impl_$.map = function(this1,f) {
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	var i = 0;
	var len = length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i1 = _g1++;
		var v = f(this1[i1]);
		r[i1] = v;
	}
	return r;
};
haxe_ds__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.sort(f);
};
var interfaces_Printer = function() {
	this.indent = "  ";
	this.newline = "\n";
	this.countingOffset = 1;
};
$hxClasses["interfaces.Printer"] = interfaces_Printer;
interfaces_Printer.__name__ = ["interfaces","Printer"];
interfaces_Printer.prototype = {
	countingOffset: null
	,newline: null
	,indent: null
	,printString: null
	,close: null
	,__class__: interfaces_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) {
		d.innerHTML = "";
	}
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = ["js","Lib"];
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib["eval"] = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
var mj_Connection = function(conT,dist) {
	this.connectedTo = conT;
	this.dist = dist;
};
$hxClasses["mj.Connection"] = mj_Connection;
mj_Connection.__name__ = ["mj","Connection"];
mj_Connection.prototype = {
	next: null
	,connectedTo: null
	,dist: null
	,__class__: mj_Connection
};
var mj_Link = function() {
};
$hxClasses["mj.Link"] = mj_Link;
mj_Link.__name__ = ["mj","Link"];
mj_Link.prototype = {
	to: null
	,names: null
	,countInd: function() {
		return this.names.length;
	}
	,__class__: mj_Link
};
var mj_Seq = function() {
	this.names = new List();
	this.indNames = new List();
	this.linkedTo = new List();
	this.spId = 0;
};
$hxClasses["mj.Seq"] = mj_Seq;
mj_Seq.__name__ = ["mj","Seq"];
mj_Seq.calcHash = function(s) {
	var result = 7;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var pos = _g1++;
		result = 31 * result + HxOverrides.cca(s,pos);
	}
	return result;
};
mj_Seq.getIndIdentifier = function(s) {
	var result = null;
	if(s != null) {
		var pos = s.lastIndexOf("_");
		if(pos != -1) {
			result = HxOverrides.substr(s,0,pos);
		}
	}
	return result;
};
mj_Seq.createSample = function(id,name,seq) {
	var result = new mj_Seq();
	result.id = id;
	if(name != null && name != "") {
		result.names.add(name);
		var result1 = null;
		if(name != null) {
			var pos = name.lastIndexOf("_");
			if(pos != -1) {
				result1 = HxOverrides.substr(name,0,pos);
			}
		}
		var indId = result1;
		var result2 = false;
		var _g_head = result.indNames.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var indName = val;
			if(indName == indId) {
				result2 = true;
				break;
			}
		}
		if(!result2) {
			result.indNames.add(indId);
		}
	}
	result.origSeq = seq;
	var s = result.origSeq;
	var result3 = 7;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var pos1 = _g1++;
		result3 = 31 * result3 + HxOverrides.cca(s,pos1);
	}
	result.hashCode = result3;
	result.isSample = true;
	return result;
};
mj_Seq.createMedian = function(id,seq) {
	var result = new mj_Seq();
	result.id = id;
	result.redSeq = seq;
	var s = result.redSeq;
	var result1 = 7;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var pos = _g1++;
		result1 = 31 * result1 + HxOverrides.cca(s,pos);
	}
	result.hashCode = result1;
	result.isSample = false;
	return result;
};
mj_Seq.prototype = {
	next: null
	,prev: null
	,hashCode: null
	,nextWithHash: null
	,prevWithHash: null
	,calcHashForOrig: function() {
		var s = this.origSeq;
		var result = 7;
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var pos = _g1++;
			result = 31 * result + HxOverrides.cca(s,pos);
		}
		this.hashCode = result;
	}
	,calcHashForRed: function() {
		var s = this.redSeq;
		var result = 7;
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var pos = _g1++;
			result = 31 * result + HxOverrides.cca(s,pos);
		}
		this.hashCode = result;
	}
	,names: null
	,indNames: null
	,addName: function(s) {
		if(s != null && s != "") {
			this.names.add(s);
			var result = null;
			if(s != null) {
				var pos = s.lastIndexOf("_");
				if(pos != -1) {
					result = HxOverrides.substr(s,0,pos);
				}
			}
			var indId = result;
			var result1 = false;
			var _g_head = this.indNames.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var indName = val;
				if(indName == indId) {
					result1 = true;
					break;
				}
			}
			if(!result1) {
				this.indNames.add(indId);
			}
		}
	}
	,hasIndIdentifier: function(s) {
		var result = false;
		var _g_head = this.indNames.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var indName = val;
			if(indName == s) {
				result = true;
				break;
			}
		}
		return result;
	}
	,cmpIndIdentifiers: function(o) {
		var result = new List();
		var _g_head = o.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			var result1 = false;
			var _g_head1 = this.indNames.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var indName = val1;
				if(indName == e) {
					result1 = true;
					break;
				}
			}
			if(result1) {
				result.add(e);
			}
		}
		return result;
	}
	,origSeq: null
	,redSeq: null
	,reduceSequence: function(ipos) {
		var l = new List();
		var _g_head = ipos.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			l.add(this.origSeq.charAt(e));
		}
		this.redSeq = l.join("");
	}
	,constructSeq: function(s,ipos) {
		var i = 0;
		var _g_head = ipos.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var pos = val;
			s[pos] = this.redSeq.charAt(i++);
		}
		var b_b = "";
		var i1 = 0;
		var len = s.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i2 = _g1++;
			b_b += Std.string(Std.string(s[i2]));
			if(i2 < len - 1) {
				b_b += "";
			}
		}
		this.origSeq = b_b;
	}
	,isSample: null
	,id: null
	,spId: null
	,visitedId: null
	,connectedTo: null
	,nrConnections: null
	,linkedTo: null
	,addConnection: function(c) {
		c.next = this.connectedTo;
		this.connectedTo = c;
		this.nrConnections++;
	}
	,clearConnections: function() {
		this.nrConnections = 0;
		this.connectedTo = null;
	}
	,addLinkTo: function(o,names) {
		if(names != null && !names.isEmpty()) {
			var l = new mj_Link();
			l.to = o;
			l.names = names;
			this.linkedTo.add(l);
		}
	}
	,addLinkBySeq: function(os) {
		var o = os.indNames;
		var result = new List();
		var _g_head = o.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			var result1 = false;
			var _g_head1 = this.indNames.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var indName = val1;
				if(indName == e) {
					result1 = true;
					break;
				}
			}
			if(result1) {
				result.add(e);
			}
		}
		var l = result;
		if(l != null && !l.isEmpty()) {
			var l1 = new mj_Link();
			l1.to = os;
			l1.names = l;
			this.linkedTo.add(l1);
		}
		if(l != null && !l.isEmpty()) {
			var l2 = new mj_Link();
			l2.to = this;
			l2.names = l;
			os.linkedTo.add(l2);
		}
	}
	,__class__: mj_Seq
};
var parsing_MJNetParser = function() { };
$hxClasses["parsing.MJNetParser"] = parsing_MJNetParser;
parsing_MJNetParser.__name__ = ["parsing","MJNetParser"];
parsing_MJNetParser.countIndents = function(s) {
	var result = 0;
	while(true) {
		var cCode = HxOverrides.cca(s,result);
		var result1 = false;
		var _g = 0;
		var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
		while(_g < _g1.length) {
			var ele = _g1[_g];
			++_g;
			if(ele == cCode) {
				result1 = true;
				break;
			}
		}
		if(!result1) {
			break;
		}
		++result;
	}
	return result;
};
parsing_MJNetParser.parseNet = function(fileContent) {
	var lines = fileContent.split("\n");
	var result = new List();
	var lineNo = 0;
	var currentNode = null;
	var readNames = false;
	var readCons = false;
	var readLinks = false;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		++lineNo;
		var end = line.length;
		while(true) {
			var tmp;
			if(end > 0) {
				var cCode = HxOverrides.cca(line,end - 1);
				var result1 = false;
				var _g1 = 0;
				var _g11 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g1 < _g11.length) {
					var ele = _g11[_g1];
					++_g1;
					if(ele == cCode) {
						result1 = true;
						break;
					}
				}
				tmp = result1;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--end;
		}
		var s = line.substring(0,end);
		var begin = 0;
		var sLen = s.length;
		while(true) {
			var tmp1;
			if(begin < sLen) {
				var cCode1 = HxOverrides.cca(s,begin);
				var result2 = false;
				var _g2 = 0;
				var _g12 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
				while(_g2 < _g12.length) {
					var ele1 = _g12[_g2];
					++_g2;
					if(ele1 == cCode1) {
						result2 = true;
						break;
					}
				}
				tmp1 = result2;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			++begin;
		}
		var line_ = HxOverrides.substr(s,begin,null);
		if(line_ == null || line_ == "" || line_.charAt(0) == "#") {
			continue;
		}
		var result3 = 0;
		while(true) {
			var cCode2 = HxOverrides.cca(line,result3);
			var result4 = false;
			var _g3 = 0;
			var _g13 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g3 < _g13.length) {
				var ele2 = _g13[_g3];
				++_g3;
				if(ele2 == cCode2) {
					result4 = true;
					break;
				}
			}
			if(!result4) {
				break;
			}
			++result3;
		}
		var indents = result3;
		if(indents == 0 && (line_ == "SAMPLED_SEQUENCE" || line_ == "MEDIAN_VECTOR")) {
			if(currentNode != null) {
				result.add(currentNode);
			}
			currentNode = new parsing_Node();
			currentNode.type = line_ == "SAMPLED_SEQUENCE" ? parsing_SEQ_$TYPE.SAMPLED_SEQUENCE : parsing_SEQ_$TYPE.MEDIAN_VECTOR;
			readNames = false;
			readCons = false;
			readLinks = false;
			continue;
		}
		if(currentNode == null) {
			throw new js__$Boot_HaxeError("Expected SAMPLED_SEQUENCE or MEDIAN_VECTOR in line " + lineNo + "!");
		}
		if(indents == 2 && HxOverrides.substr(line_,0,"ID".length) == "ID") {
			currentNode.id = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"FFR_ID".length) == "FFR_ID") {
			currentNode.spId = Std.parseInt(line_.split(" ")[1]);
		} else if(indents == 2 && HxOverrides.substr(line_,0,"SEQUENCE".length) == "SEQUENCE") {
			currentNode.seq = line_.split(" ")[1];
		} else if(!(indents == 2 && HxOverrides.substr(line_,0,"NB_NAMES".length) == "NB_NAMES")) {
			if(indents == 2 && HxOverrides.substr(line_,0,"NAMES".length) == "NAMES") {
				readNames = true;
				readCons = false;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"CONNECTED_TO".length) == "CONNECTED_TO") {
				readNames = false;
				readCons = true;
				readLinks = false;
			} else if(indents == 2 && HxOverrides.substr(line_,0,"LINKED_TO".length) == "LINKED_TO") {
				readNames = false;
				readCons = false;
				readLinks = true;
			} else if(indents == 4 && (readNames || readCons || readLinks)) {
				if(readNames) {
					currentNode.names.add(line_);
				} else if(readCons) {
					var d = line_.split(" ");
					var l = new List();
					var _g21 = 5;
					var _g14 = d.length;
					while(_g21 < _g14) {
						var i = _g21++;
						l.add(Std.parseInt(d[i]));
					}
					currentNode.cons.add(new util_Pair(Std.parseInt(d[1]),l));
				} else if(readLinks) {
					var d1 = line_.split(" ");
					currentNode.links.add(new util_Pair(Std.parseInt(d1[1]),Std.parseInt(d1[3])));
				}
			} else {
				throw new js__$Boot_HaxeError("Unexpected expression in line " + lineNo + "!");
			}
		}
	}
	if(currentNode != null) {
		result.add(currentNode);
	}
	return result;
};
parsing_MJNetParser.main = function() {
};
var parsing_SEQ_$TYPE = $hxClasses["parsing.SEQ_TYPE"] = { __ename__ : ["parsing","SEQ_TYPE"], __constructs__ : ["SAMPLED_SEQUENCE","MEDIAN_VECTOR"] };
parsing_SEQ_$TYPE.SAMPLED_SEQUENCE = ["SAMPLED_SEQUENCE",0];
parsing_SEQ_$TYPE.SAMPLED_SEQUENCE.toString = $estr;
parsing_SEQ_$TYPE.SAMPLED_SEQUENCE.__enum__ = parsing_SEQ_$TYPE;
parsing_SEQ_$TYPE.MEDIAN_VECTOR = ["MEDIAN_VECTOR",1];
parsing_SEQ_$TYPE.MEDIAN_VECTOR.toString = $estr;
parsing_SEQ_$TYPE.MEDIAN_VECTOR.__enum__ = parsing_SEQ_$TYPE;
parsing_SEQ_$TYPE.__empty_constructs__ = [parsing_SEQ_$TYPE.SAMPLED_SEQUENCE,parsing_SEQ_$TYPE.MEDIAN_VECTOR];
var parsing_Node = function() {
	this.names = new List();
	this.cons = new List();
	this.links = new List();
};
$hxClasses["parsing.Node"] = parsing_Node;
parsing_Node.__name__ = ["parsing","Node"];
parsing_Node.prototype = {
	type: null
	,id: null
	,spId: null
	,seq: null
	,names: null
	,cons: null
	,links: null
	,__class__: parsing_Node
};
var parsing_Parse = function() { };
$hxClasses["parsing.Parse"] = parsing_Parse;
parsing_Parse.__name__ = ["parsing","Parse"];
parsing_Parse.startsWith = function(t,s) {
	return HxOverrides.substr(t,0,s.length) == s;
};
parsing_Parse.isWhitespace = function(s,pos) {
	var cCode = HxOverrides.cca(s,pos);
	var result = false;
	var _g = 0;
	var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
	while(_g < _g1.length) {
		var ele = _g1[_g];
		++_g;
		if(ele == cCode) {
			result = true;
			break;
		}
	}
	return result;
};
parsing_Parse.stripStringBegin = function(s) {
	var begin = 0;
	var sLen = s.length;
	while(true) {
		var tmp;
		if(begin < sLen) {
			var cCode = HxOverrides.cca(s,begin);
			var result = false;
			var _g = 0;
			var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g < _g1.length) {
				var ele = _g1[_g];
				++_g;
				if(ele == cCode) {
					result = true;
					break;
				}
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		++begin;
	}
	return HxOverrides.substr(s,begin,null);
};
parsing_Parse.stripStringEnd = function(s) {
	var end = s.length;
	while(true) {
		var tmp;
		if(end > 0) {
			var cCode = HxOverrides.cca(s,end - 1);
			var result = false;
			var _g = 0;
			var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g < _g1.length) {
				var ele = _g1[_g];
				++_g;
				if(ele == cCode) {
					result = true;
					break;
				}
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		--end;
	}
	return s.substring(0,end);
};
parsing_Parse.stripString = function(s) {
	var end = s.length;
	while(true) {
		var tmp;
		if(end > 0) {
			var cCode = HxOverrides.cca(s,end - 1);
			var result = false;
			var _g = 0;
			var _g1 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g < _g1.length) {
				var ele = _g1[_g];
				++_g;
				if(ele == cCode) {
					result = true;
					break;
				}
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		--end;
	}
	var s1 = s.substring(0,end);
	var begin = 0;
	var sLen = s1.length;
	while(true) {
		var tmp1;
		if(begin < sLen) {
			var cCode1 = HxOverrides.cca(s1,begin);
			var result1 = false;
			var _g2 = 0;
			var _g11 = [9,10,11,12,13,32,133,160,5760,8192,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,6158,8203,8204,8205,8288,65279];
			while(_g2 < _g11.length) {
				var ele1 = _g11[_g2];
				++_g2;
				if(ele1 == cCode1) {
					result1 = true;
					break;
				}
			}
			tmp1 = result1;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		++begin;
	}
	return HxOverrides.substr(s1,begin,null);
};
var util_Pair = function(u,v) {
	this.second = null;
	this.first = null;
	this.first = u;
	this.second = v;
};
$hxClasses["util.Pair"] = util_Pair;
util_Pair.__name__ = ["util","Pair"];
util_Pair.prototype = {
	first: null
	,second: null
	,swapFirst: function(p) {
		var tmp = this.first;
		this.first = p.first;
		p.first = tmp;
	}
	,swapSecond: function(p) {
		var tmp = this.second;
		this.second = p.second;
		p.second = tmp;
	}
	,swap: function(p) {
		this.swapFirst(p);
		this.swapSecond(p);
	}
	,__class__: util_Pair
};
var util_StdOutPrinter = function() {
	this.indent = "  ";
	this.newline = "\n";
	this.countingOffset = 1;
};
$hxClasses["util.StdOutPrinter"] = util_StdOutPrinter;
util_StdOutPrinter.__name__ = ["util","StdOutPrinter"];
util_StdOutPrinter.__interfaces__ = [interfaces_Printer];
util_StdOutPrinter.prototype = {
	countingOffset: null
	,newline: null
	,indent: null
	,printString: function(s) {
		haxe_Log.trace(s,{ fileName : "StdOutPrinter.hx", lineNumber : 15, className : "util.StdOutPrinter", methodName : "printString"});
	}
	,close: function() {
	}
	,__class__: util_StdOutPrinter
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
function $arrayPush(x) { this.push(x); }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var Void = $hxClasses["Void"] = { __ename__ : ["Void"]};
js_Boot.__toStr = ({ }).toString;
